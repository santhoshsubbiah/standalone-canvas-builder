// $Id$
(function(){
    $.ui.plugin.add("draggable", "multimove", { //NO I18N
        start: function(){
            var $box = $(this);
            var box = $box.position();
            var inst = zutils.getParentData($box);
            var toolinst = inst.config.toolsRef;
            var selectedel = toolinst.selectedfields.not('.zcanvas-editor-outer'); //NO I18N
            selectedel.each(function(){
                var el = $(this);
                var elpos = el.position();
                var $clone = el.clone(1);
                var newpos = {
                    left: elpos.left - box.left,
                    top: elpos.top - box.top
                }
                // eslint-disable-next-line webperf/layout-thrashing
                $box.append($clone);
                $clone.css(newpos);
               
            });

            selectedel.addClass('zcmovingnode'); // NO I18N
            var parentouter = $box.parent('.ui-droppable-disabled'); // NO I18N
            if(parentouter.length){
                parentouter.droppable('enable').addClass('zctempenable'); // NO I18N
            }
        }
    });
})();;
// Setup
function DragSelect(options) {
  this.multiSelectKeyPressed = false;
  this.initialCursorPos = { x: 0, y: 0 };
  this.newCursorPos = { x: 0, y: 0 };
  this.previousCursorPos = { x: 0, y: 0 };
  this.initialScroll = { x: 0, y: 0 };
  this.selected = [];
  this._prevSelected = []; // memory to fix #9

  this._createBindings();
  this._setupOptions(options);
  this.start();
}
DragSelect.prototype._createBindings = function() {
  this._startUp = this._startUp.bind(this);
  this._handleMove = this._handleMove.bind(this);
  this.reset = this.reset.bind(this);
  this._onClick = this._onClick.bind(this);
};
DragSelect.prototype._setupOptions = function(options) {
  this.selectedClass = options.selectedClass || 'zcanvas-multiselect'; // NO I18N
  this.hoverClass = options.hoverClass || 'ds-hover'; // NO I18N
  this.selectorClass = options.selectorClass || 'ds-selector'; // NO I18N
  this.selectableClass = options.selectableClass || 'ds-selectable'; // NO I18N

  this.selectables = [];
  this._handleSelectables(this.toArray(options.selectables));

  this.multiSelectKeys = options.multiSelectKeys || [
    'ctrlKey', // NO I18N
    'shiftKey', // NO I18N
    'metaKey' // NO I18N
  ];
  this.multiSelectMode = options.multiSelectMode || false;
  this.autoScrollSpeed = options.autoScrollSpeed === 0 ? 0 : options.autoScrollSpeed || 1;
  this.selectCallback = options.onElementSelect || function() { return; };
  this.unselectCallback = options.onElementUnselect || function() { return; };
  this.onDragStartBegin = options.onDragStartBegin || function() { return; };
  this.moveStartCallback = options.onDragStart || function() { return; };
  this.moveCallback = options.onDragMove || function() { return; };
  this.callback = options.callback || function() { return; };
  this.area = options.area || document;
  this.customStyles = options.customStyles;
  if (this.area !== document) {
  //  var computedArea = getComputedStyle(this.area);
 // var computedArea = $(this.area).css(['position']); // NO I18N
 // PURPOSE: prevent recalculate style by statically forcing positioning
 var computedArea = {};
 var areaclasslist = this.area.classList;
 computedArea.position = areaclasslist.contains('zc-tab-content') || areaclasslist.contains('zcanvas-editor-outer') ? 'relative' : 'absolute'; // NO I18N
    var isPositioned =
      computedArea.position === 'absolute' ||
      computedArea.position === 'relative' ||
      computedArea.position === 'fixed';
    if (!isPositioned) {
      this.area.style.position = 'relative';
    }
  }
  this.selector = options.selector || this._createSelector();
  this.addClass(this.selector, this.selectorClass);
};
DragSelect.prototype._handleSelectables = function(
  selectables,
  remove,
  fromSelection
) {
  var selectableLength = selectables.length;
  for (var index = 0; index < selectableLength; index++) {
    var selectable = selectables[index];
    var indexOf = this.selectables.indexOf(selectable);

    if (indexOf < 0 && !remove) {

      this.addClass(selectable, this.selectableClass);
      selectable.addEventListener('click', this._onClick);
      this.selectables.push(selectable);
      if (fromSelection && this.selected.indexOf(selectable) < 0) {
        this.addClass(selectable, this.selectedClass);
        this.selected.push(selectable);
      }
    } else if (indexOf > -1 && remove) {

      this.removeClass(selectable, this.hoverClass);
      // eslint-disable-next-line zstandard/combine-properties
      this.removeClass(selectable, this.selectableClass);
      selectable.removeEventListener('click', this._onClick);
      this.selectables.splice(indexOf, 1);
      if (fromSelection && this.selected.indexOf(selectable) > -1) {
        this.removeClass(selectable, this.selectedClass);
        this.selected.splice(this.selected.indexOf(selectable), 1);
      }
    }
  }
};
DragSelect.prototype._onClick = function(event) {

  if (this.mouseInteraction) {
    return;
  } // fix firefox doubleclick issue
  if (this.isRightClick(event)) {
    return;
  }

  var node = event.target;
  if(!this.hasClass(node,'zcanvas-field')){
   var fieldnode = $(node).closest('.zcanvas-field');
   if(fieldnode.length){
     node = fieldnode[0];
   }
  }
  var flag = false;
  if (this.isMultiSelectKeyPressed(event)) {
    this._prevSelected = this.selected.slice();
    flag = true;
  } // #9
  else {
    this._prevSelected = [];
  } // #9
  this.checkIfInsideSelection(true); // reset selection if no multiselectionkeypressed

  if (this.hasClass(node,this.selectableClass)) {
    this.unselect(node);
  }

  if(flag && this.hasClass(node,this.selectableClass)){
    this.select(node);
  }

  this.reset();
};
DragSelect.prototype._createSelector = function() {
  var selector = document.createElement('div');

  selector.style.position = 'absolute'; // NO I18N
  if (!this.customStyles) {
    selector.style.background = 'rgba(0, 0, 255, 0.1)'; // NO I18N
    selector.style.border = '1px solid rgba(0, 0, 255, 0.45)'; // NO I18N
    selector.style.display = 'none'; // NO I18N
    selector.style.pointerEvents = 'none'; // fix for issue #8 (ie11+) // NO I18N
  }

  var _area = this.area === document ? document.body : this.area;
  _area.appendChild(selector);

  return selector;
};
//////////////////////////////////////////////////////////////////////////////////////
DragSelect.prototype.start = function() {
  this.area.addEventListener('mousedown', this._startUp);
};
DragSelect.prototype._startUp = function(event) {
  this.selected = [];
  var base = event.target;
  // if( this.area != base){ // event.shiftKey &&
  //   var $target = $(event.target);
  //   var editor = $target.closest('.zcanvas-editor'); // NO I18N
  //   if(!editor.length){
  //     editor = $target.closest('.zcanvas-editor-outer'); // NO I18N
  //   }
  //   base = editor[0];
  // }
  var actioncondition = false;
  var $target = $(event.target);
  
  if($target.hasClass('zcanvas-selectbox')){
    actioncondition = true;
  }
  var field = $target.closest('.zcanvas-field'); // NO I18N
  if(field.hasClass('zcanvas-selected-element')){
    actioncondition = true;
  }
  var tabcont = $target.hasClass('zc-tab-content'); // NO I18N
  if(tabcont && $target.closest('.zctablayout').is('.ui-draggable:not(.ui-draggable-disabled)')){
    actioncondition = true;
  }
  
  var rlcont = $target.hasClass('zcanvas-title-editor') || $target.hasClass('zcanvas-non-delete'); // NO I18N
  if(rlcont &&  $target.closest('.zcanvas-static-editor').is('.ui-draggable:not(.ui-draggable-disabled)')){
	  actioncondition = true;
  }
  // eslint-disable-next-line no-extra-parens
  if(this.area !== base || actioncondition || (( event.target.classList.contains('zcanvas-editor-outer') && (event.target.classList.contains('zcanvas-selected-element')) || (this.area.classList.contains('zcanvas-selected-element') && !this.area.classList.contains('zcanvas-locked-element') && !this.area.classList.contains('zcanvas-non-delete') && !this.area.classList.contains('zcanvas-title-editor')) ) && !this.area.classList.contains('zcanvas-editor-outer')) ){ // || !event.shiftKey
    return;
  }
  this.onDragStartBegin(event);
  if (this._breaked) { return false; }

  if (this.isRightClick(event)) {
    return;
  }

  this.mouseInteraction = true;
  this.selector.style.display = 'block';

  if (this.isMultiSelectKeyPressed(event)) {
    this._prevSelected = this.selected.slice();
  } // #9
  else {
    this._prevSelected = [];
  } // #9
  this._getStartingPositions(event);
  this.checkIfInsideSelection(true);

  this.selector.style.display = 'none'; // hidden unless moved, fix for issue #8
  this.moveStartCallback(event);
  if (this._breaked) { return false; }
  this.area.removeEventListener('mousedown', this._startUp);
  this.area.addEventListener('mousemove', this._handleMove);
  // eslint-disable-next-line zstandard/no-body-events
  document.addEventListener('mouseup', this.reset);
};
DragSelect.prototype.isMultiSelectKeyPressed = function(event) {
  this.multiSelectKeyPressed = false;

  if (this.multiSelectMode) {
    this.multiSelectKeyPressed = true;
  } else {
    var multiselectkeylen = this.multiSelectKeys.length;
    for (var index = 0; index < multiselectkeylen; index++) {
      var mKey = this.multiSelectKeys[index];
      if (event[mKey]) {
        this.multiSelectKeyPressed = true;
      }
    }
  }

  return this.multiSelectKeyPressed;
};
DragSelect.prototype._getStartingPositions = function(event) {
  this.initialCursorPos = this.newCursorPos = this._getCursorPos(
    event,
    this.area
  );
  this.initialScroll = this.getScroll(this.area);

  var selectorPos = {};
  selectorPos.x = this.initialCursorPos.x + this.initialScroll.x;
  selectorPos.y = this.initialCursorPos.y + this.initialScroll.y;
  selectorPos.w = 0;
  selectorPos.h = 0;
  this.updatePos(this.selector, selectorPos);
};
//////////////////////////////////////////////////////////////////////////////////////
DragSelect.prototype._handleMove = function(event) {
  var selectorPos = this.getPosition(event);
  this.moveCallback(event);
  if (this._breaked) {
    return false;
  }

  this.selector.style.display = 'block'; // hidden unless moved, fix for issue #8
  this.updatePos(this.selector, selectorPos);
  this.checkIfInsideSelection();
  this._autoScroll(event);
};
DragSelect.prototype.getPosition = function(event) {
  var cursorPosNew = this._getCursorPos(event, this.area);
  var scrollNew = this.getScroll(this.area);
  this.newCursorPos = cursorPosNew;
  var scrollAmount = {
    x: scrollNew.x - this.initialScroll.x,
    y: scrollNew.y - this.initialScroll.y
  };
  var selectorPos = {};
  if (cursorPosNew.x > this.initialCursorPos.x - scrollAmount.x) {
    selectorPos.x = this.initialCursorPos.x + this.initialScroll.x; // 2.
    selectorPos.w = cursorPosNew.x - this.initialCursorPos.x + scrollAmount.x; // 3.
  } else {
    selectorPos.x = cursorPosNew.x + scrollNew.x; // 2b.
    selectorPos.w = this.initialCursorPos.x - cursorPosNew.x - scrollAmount.x; // 3b.
  }
  if (cursorPosNew.y > this.initialCursorPos.y - scrollAmount.y) {
    selectorPos.y = this.initialCursorPos.y + this.initialScroll.y;
    selectorPos.h = cursorPosNew.y - this.initialCursorPos.y + scrollAmount.y;
  } else {
    selectorPos.y = cursorPosNew.y + scrollNew.y;
    selectorPos.h = this.initialCursorPos.y - cursorPosNew.y - scrollAmount.y;
  }

  return selectorPos;
};
//////////////////////////////////////////////////////////////////////////////////////
DragSelect.prototype.checkIfInsideSelection = function(force) {
  var anyInside = false;
  var selectablelen =  this.selectables.length;
  for( var i = 0, il = selectablelen; i < il; i++ ) {
    var selectable = this.selectables[i];

    var $scroll = this.getScroll(this.area);
    var selectionRect = {
      y: this.selector.getBoundingClientRect().top + $scroll.y,
      x: this.selector.getBoundingClientRect().left + $scroll.x,
      h: this.selector.offsetHeight,
      w: this.selector.offsetWidth
    };

    if( this._isElementTouching( selectable, selectionRect, $scroll ) ) {
      this._handleSelection( selectable, force );
      anyInside = true;
    } else {
      this._handleUnselection( selectable, force );
    }
  }
  return anyInside;
};
DragSelect.prototype._handleSelection = function(item, force) {
  if (this.hasClass(item, this.hoverClass) && !force) {
    return false;
  }
  var posInSelectedArray = this.selected.indexOf(item);

  if (posInSelectedArray < 0) {
    this.select(item);
  } else if (posInSelectedArray > -1 && this.multiSelectKeyPressed) {
    this.unselect(item);
  }

  this.addClass(item, this.hoverClass);
};
DragSelect.prototype._handleUnselection = function(item, force) {
  if (!this.hasClass(item, this.hoverClass) && !force) {
    return false;
  }
  var posInSelectedArray = this.selected.indexOf(item);
  var isInPrevSelection = this._prevSelected.indexOf(item); // #9
  if (posInSelectedArray > -1 && isInPrevSelection < 0) {
    this.unselect(item);
  } else if (posInSelectedArray < 0 && isInPrevSelection > -1) {
    this.select(item);
  }

  this.removeClass(item, this.hoverClass);
};
DragSelect.prototype.select = function(item) {
  if (this.selected.indexOf(item) > -1) {
    return false;
  }

  this.selected.push(item);
  this.addClass(item, this.selectedClass);

  this.selectCallback(item);
  if (this._breaked) {
    return false;
  }

  return item;
};
DragSelect.prototype.unselect = function(item) {
  if (this.selected.indexOf(item) < 0) {
    return false;
  }

  this.selected.splice(this.selected.indexOf(item), 1);
  this.removeClass(item, this.selectedClass);

  this.unselectCallback(item);
  if (this._breaked) {
    return false;
  }

  return item;
};
DragSelect.prototype.toggle = function(item) {
  if (this.selected.indexOf(item) > -1) {
    this.unselect(item);
  } else {
    this.select(item);
  }

  return item;
};
DragSelect.prototype._isElementTouching = function(
  element,
  selectionRect,
  scroll
) {
  var elementRect = {
    y: element.getBoundingClientRect().top + scroll.y,
    x: element.getBoundingClientRect().left + scroll.x,
    h: element.offsetHeight || element.getBoundingClientRect().height,
    w: element.offsetWidth || element.getBoundingClientRect().width
  };
  // Imagine following Example:
  // a01[1]a02
  //          a11[2]a12
  // to check if those two boxes collide we do this AABB calculation:
  //& a02 > a11 (right border pos box1 larger than left border pos box2)
  //& b02 > b11 (bottom border pos box1 larger than top border pos box2)
  if (
    selectionRect.x < elementRect.x + elementRect.w &&
    selectionRect.x + selectionRect.w > elementRect.x &&
    selectionRect.y < elementRect.y + elementRect.h &&
    selectionRect.h + selectionRect.y > elementRect.y
  ) {
    return true; // collision detected!
  } else {
    return false;
  }
};
//////////////////////////////////////////////////////////////////////////////////////
DragSelect.prototype._autoScroll = function(event) {
  var edge = this.isCursorNearEdge(event, this.area);

  var docEl = document && document.documentElement && document.documentElement.scrollTop && document.documentElement;
  var _area = this.area === document ? docEl || document.body : this.area;

  if (edge === 'top' && _area.scrollTop > 0) {
    _area.scrollTop -= 1 * this.autoScrollSpeed;
  } else if (edge === 'bottom') {
    _area.scrollTop += 1 * this.autoScrollSpeed;
  } else if (edge === 'left' && _area.scrollLeft > 0) {
    _area.scrollLeft -= 1 * this.autoScrollSpeed;
  } else if (edge === 'right') {
    _area.scrollLeft += 1 * this.autoScrollSpeed;
  }
};
DragSelect.prototype.isCursorNearEdge = function(event, area) {
  var cursorPosition = this._getCursorPos(event, area);
  var areaRect = this.getAreaRect(area);

  var tolerance = {
    x: Math.max(areaRect.width / 10, 30),
    y: Math.max(areaRect.height / 10, 30)
  };

  if (cursorPosition.y < tolerance.y) {
    return 'top'; // NO I18N
  } else if (areaRect.height - cursorPosition.y < tolerance.y) {
    return 'bottom'; // NO I18N
  } else if (areaRect.width - cursorPosition.x < tolerance.x) {
    return 'right'; // NO I18N
  } else if (cursorPosition.x < tolerance.x) {
    return 'left'; // NO I18N
  }

  return false;
};
//////////////////////////////////////////////////////////////////////////////////////
DragSelect.prototype.reset = function(event) {
  this.previousCursorPos = this._getCursorPos(event, this.area);
  document.removeEventListener('mouseup', this.reset);
  this.area.removeEventListener('mousemove', this._handleMove);
  this.area.addEventListener('mousedown', this._startUp);

  var prevent = this.callback(this.selected, event, this.selector.scrollHeight);
  if (this._breaked) {
    return false;
  }

  this.selector.style.width = '0';
  this.selector.style.height = '0';
  this.selector.style.display = 'none';

  setTimeout(
    function() {
      this.mouseInteraction = false;
    }.bind(this),
    100
  );
  

  if(prevent && event){
    event.stopImmediatePropagation();
    event.stopPropagation();
    event.preventDefault();
    return false;
  }
};
DragSelect.prototype.break = function() {
  this._breaked = true;
  setTimeout(
    function() {
      this._breaked = false;
    }.bind(this),
    100
  );
};
DragSelect.prototype.stop = function() {
  this.reset();
  this.area.removeEventListener('mousedown', this._startUp);
  document.removeEventListener('mouseup', this.reset);
};
//////////////////////////////////////////////////////////////////////////////////////
DragSelect.prototype.getSelection = function() {
  return this.selected;
};
DragSelect.prototype.getCursorPos = function(event, _area, ignoreScroll) {
  if (!event) {
    return false;
  }

  // eslint-disable-next-line no-extra-parens
  var area = _area || (_area !== false && this.area);
  var pos = this._getCursorPos(event, area);
  var $scroll = ignoreScroll ? { x: 0, y: 0 } : this.getScroll(area);

  return {
    x: pos.x + $scroll.x,
    y: pos.y + $scroll.y
  };
};
DragSelect.prototype.addSelection = function(
  _nodes,
  _callback,
  dontAddToSelectables
) {
  var nodes = this.toArray(_nodes);
  var nodelen = nodes.length;
  for (var index = 0, il = nodelen; index < il; index++) {
    var node = nodes[index];
    this.select(node);
  }

  if (!dontAddToSelectables) {
    this.addSelectables(nodes);
  }
  if (_callback) {
    this.callback(this.selected, false);
  }

  return this.selected;
};
DragSelect.prototype.removeSelection = function(
  _nodes,
  _callback,
  removeFromSelectables
) {
  var nodes = this.toArray(_nodes);
  var nodelen = nodes.length;
  for (var index = 0, il = nodelen; index < il; index++) {
    var node = nodes[index];
    this.unselect(node);
  }

  if (removeFromSelectables) {
    this.removeSelectables(nodes);
  }
  if (_callback) {
    this.callback(this.selected, false);
  }

  return this.selected;
};
DragSelect.prototype.toggleSelection = function(_nodes, _callback, _special) {
  var nodes = this.toArray(_nodes);
  var nodelen = nodes.length;
  for (var index = 0, il = nodelen; index < il; index++) {
    var node = nodes[index];

    if (this.selected.indexOf(node) < 0) {
      this.addSelection(node, _callback, _special);
    } else {
      this.removeSelection(node, _callback, _special);
    }
  }

  return this.selected;
};
DragSelect.prototype.setSelection = function(
  _nodes,
  runCallback,
  dontAddToSelectables
) {
  this.clearSelection();
  this.addSelection(_nodes, runCallback, dontAddToSelectables);

  return this.selected;
};
DragSelect.prototype.clearSelection = function(runCallback) {
  var selection = this.selected.slice();
  var selectionlen = selection.length;
  for (var index = 0, il = selectionlen; index < il; index++) {
    var node = selection[index];
    this.unselect(node);
  }

  if (runCallback) {
    this.callback(this.selected, false);
  }

  return this.selected;
};
DragSelect.prototype.addSelectables = function(_nodes, addToSelection) {
  var nodes = this.toArray(_nodes);
  this._handleSelectables(nodes, false, addToSelection);
  return _nodes;
};
DragSelect.prototype.getSelectables = function() {
  return this.selectables;
};
DragSelect.prototype.setSelectables = function(
  _nodes,
  removeFromSelection,
  addToSelection
) {
  this.removeSelectables(this.getSelectables(), removeFromSelection);
  return this.addSelectables(_nodes, addToSelection);
};
DragSelect.prototype.removeSelectables = function(_nodes, removeFromSelection) {
  var nodes = this.toArray(_nodes);
  this._handleSelectables(nodes, true, removeFromSelection);
  return _nodes;
};
//////////////////////////////////////////////////////////////////////////////////////
DragSelect.prototype.isRightClick = function(event) {
  if (!event) {
    return false;
  }

  var isRightMB = false;

  if ('which' in event) {
    isRightMB = event.which === 3;
  } else if ('button' in event) {
    isRightMB = event.button === 2;
  }

  return isRightMB;
};
DragSelect.prototype.addClass = function(element, classname) {
  if (element.classList) {
    return element.classList.add(classname);
  }

  var cn = element.getAttribute('class') || '';
  if (cn.indexOf(classname) !== -1) {
    return element;
  } // test for existance
  if (cn !== '') {
    classname = ' ' + classname;
  } // add a space if the element already has class
  element.setAttribute('class', cn + classname);
  return element;
};
DragSelect.prototype.removeClass = function(element, classname) {
  if (element.classList) {
    return element.classList.remove(classname);
  }

  var cn = element.getAttribute('class') || '';
  var rxp = new RegExp(classname + '\\b', 'g');
  cn = cn.replace(rxp, '');
  element.setAttribute('class', cn);
  return element;
};
DragSelect.prototype.hasClass = function(element, classname) {
  if (element.classList) {
    return element.classList.contains(classname);
  }

  var cn = element.getAttribute('class') || '';
  if (cn.indexOf(classname) > -1) {
    return true;
  } else {
    return false;
  }
};
DragSelect.prototype.toArray = function(nodes) {
  if (!nodes) {
    return false;
  }
  if (!nodes.length && this.isElement(nodes)) {
    return [nodes];
  }

  var array = [];
  var nodelen = nodes.length;
  for (var i = nodelen - 1; i >= 0; i--) {
    array[i] = nodes[i];
  }

  return array;
};
DragSelect.prototype.isElement = function(node) {
  try {
    return node instanceof HTMLElement || node instanceof SVGElement;
  } catch (e) {
    murphy.error(e);
    // an exception is thrown and we end up here. Testing some
    return (
      typeof node === 'object' && // NO I18N
      node.nodeType === 1 &&
      typeof node.style === 'object' && // NO I18N
      typeof node.ownerDocument === 'object' // NO I18N
    );
  }
};
DragSelect.prototype._getCursorPos = function(event, area) {
  if (!event) {
    return { x: 0, y: 0 };
  }

  var cPos = {
    x: event.pageX || event.clientX,
    y: event.pageY || event.clientY
  };

  var areaRect = this.getAreaRect(area || document);
  var docScroll = this.getScroll(); // needed when document is scrollable but area is not

  return {
    x: cPos.x - areaRect.left - docScroll.x,
    y: cPos.y - areaRect.top - docScroll.y
  };
};
DragSelect.prototype.getInitialCursorPosition = function() {
  return this.initialCursorPos;
};
DragSelect.prototype.getCurrentCursorPosition = function() {
  return this.newCursorPos;
};
DragSelect.prototype.getPreviousCursorPosition = function() {
  return this.previousCursorPos;
};
DragSelect.prototype.getCursorPositionDifference = function(
  usePreviousCursorDifference
) {
  var posA = this.getCurrentCursorPosition();
  var posB = usePreviousCursorDifference
    ? this.getPreviousCursorPosition()
    : this.getInitialCursorPosition();

  return {
    x: posA.x - posB.x,
    y: posA.y - posB.y
  };
};
DragSelect.prototype.getScroll = function(area) {
  var body = {
    top:
      document.body.scrollTop > 0
        ? document.body.scrollTop
        : document.documentElement.scrollTop,
    left:
      document.body.scrollLeft > 0
        ? document.body.scrollLeft
        : document.documentElement.scrollLeft
  };

  var $scroll = {
    y: area && area.scrollTop >= 0 ? area.scrollTop : body.top,
    x: area && area.scrollLeft >= 0 ? area.scrollLeft : body.left
  };

  return $scroll;
};
DragSelect.prototype.getAreaRect = function(area) {
  if (area === document) {
    var size = {
      y:
        area.documentElement.clientHeight > 0
          ? area.documentElement.clientHeight
          : window.innerHeight,
      x:
        area.documentElement.clientWidth > 0
          ? area.documentElement.clientWidth
          : window.innerWidth
    };
    return {
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      width: size.x,
      height: size.y
    };
  }

  var clientRect = area.getBoundingClientRect();

  return {
    top: clientRect.top,
    left: clientRect.left,
    bottom: clientRect.bottom,
    right: clientRect.right,
    width: area.offsetWidth,
    height: area.offsetHeight
  };
};
DragSelect.prototype.updatePos = function(node, pos) {
  node.style.left = pos.x + 'px';
  node.style.top = pos.y + 'px';
  node.style.width = pos.w + 'px';
  node.style.height = pos.h + 'px';
  return node;
};

//////////////////////////////////////////////////////////////////////////////////////
// eslint-disable-next-line zstandard/no-duplicate-null-check
if (typeof module !== 'undefined' && module !== null) {
  module.exports = DragSelect;
} else if (
  typeof define !== 'undefined' && // NO I18N
  typeof define === 'function' && // NO I18N
  define
) {
  define(function() {
    return DragSelect;
  });
} else {
  window.DragSelect = DragSelect;
}
;var canvasObjUtils = {
    hasExternalutils: typeof $u !== 'undefined' , // NO I18N
    hasExternalFramework: typeof $L !== 'undefined'  // NO I18N
}
canvasObjUtils._ = {
    filter: function(obj , iterator){
        if(obj){
            if(obj.filter !== Array.prototype.filter && obj.toArray){
                obj = obj.toArray();
            }
            return obj.filter(iterator);
        }
        return [];
    },
    map: function(obj , iterator){
        if(obj){
            if(obj.map !== Array.prototype.map && obj.toArray){
                obj = obj.toArray();
            }
            return obj.map(iterator);
        }
        return [];
    },
    isArray : Array.isArray,
    find: function(obj , iterator){
        if(obj){
            if(obj.find !== Array.prototype.find && obj.toArray){
                obj = obj.toArray();
            }
            return obj.find(iterator);
        }
        return [];
    },
    keys: Object.keys,
    sortBy: canvasObjUtils.hasExternalutils ? $u.sortBy : _.sortBy,
    uniq: canvasObjUtils.hasExternalutils ? $u.uniq : _.uniq,
    isString: canvasObjUtils.hasExternalutils ? $u.isString : _.isString, 
    debounce: canvasObjUtils.hasExternalFramework ? $L.debounce : _.debounce,
    extend: canvasObjUtils.hasExternalFramework ? $L.extend : _.extend,
    min: canvasObjUtils.hasExternalutils ? $u.min : _.min,
    max: canvasObjUtils.hasExternalutils ? $u.max : _.max,
    defaults: canvasObjUtils.hasExternalutils ? $u.defaults : _.defaults,
    groupBy: canvasObjUtils.hasExternalutils ? $u.groupBy : _.groupBy,
    difference: canvasObjUtils.hasExternalutils ? $u.difference : _.difference,
    clone: canvasObjUtils.hasExternalutils ? $u.clone : _.clone,
    isEmpty: canvasObjUtils.hasExternalutils ? $u.isEmpty : _.isEmpty,
    intersection : canvasObjUtils.hasExternalutils ? $u.intersection : _.intersection
}
;//$Id$
$.ui.droppable.prototype._updatedepth = function(){
   // var depth = this.element.css('z-index'); // NO I18N
    var depth = this.element[0].style.zIndex;
    // eslint-disable-next-line eqeqeq
    if(depth == ""){
        depth = 1;
    }
    if(isNaN(depth)){
        depth = 0;
    }
    this.depth = depth;
}
$.ui.droppable.prototype._canvasarrange = function(scope){
	
    var cindex = 1;
    function applysort(el ){
           var childrens = el.children('.zcanvas-editor.ui-droppable , .zctablayout ,  .zclayout-table'); // NO I18N
           var childlen = childrens.length;
           if(!childlen){
               return;
           }

           childrens = childrens.toArray().sort(function(a , b){
               // eslint-disable-next-line eqeqeq
               if( a == b){
                   return 0;
               }
               if(a.compareDocumentPosition(b) & 2){
                   return 1;
               }
               return -1;
           })
          
           var sorted = canvasObjUtils._.sortBy(childrens , function(ele){
               return parseInt(ele.style.zIndex) || 0;
           });
           
           $(sorted).each(function(){
               var $this = $(this);
               if($this.hasClass('zclayout-table')){
                   var inst = $this.children('.zctable-sortable').sortable('instance'); // NO I18N
                   if(inst){
                       cindex++;
                       inst.actualindex = cindex;
                       applysort($this); // NOT necessary just for flow
                   }

               }else if($this.hasClass('zcanvas-editor')){ // NO I18N
                   var inst = $this.droppable('instance'); // NO I18N
                   if(inst){
                        cindex++;
                       inst.actualindex = cindex;
                       applysort( $this );
                   }
               }else if($this.hasClass('zctablayout')){ // NO I18N
                   cindex++;
                   var staticindex = cindex;
                   var $editors = $this.find('.zc-tab-container').children('.zcanvas-editor'); // NO I18N
                   $editors.each(function(){
                       var $el = $(this);
                       var inst = $el.droppable('instance'); // NO I18N
                       if(inst){
                           inst.actualindex = staticindex;
                           applysort($el)
                       }
                   })
               }
               

           })
           
           return;
    }
    // $.ui.ddmanager.droppables[scope || 'default'] = canvasObjUtils._.filter( $.ui.ddmanager.droppables[scope || 'default'] , function(i) { return i.bindings[0].parentElement; })

    
    
    if(!scope || scope === 'default'){
        applysort($('#zcanvas-editor-outer') , 0);

        $.ui.ddmanager.droppables[scope || 'default'] = canvasObjUtils._.sortBy($.ui.ddmanager.droppables[scope || 'default'] ,function(index){
            return parseInt(index.actualindex) || 0;
        } ).reverse();
    }
    

}
$.ui.droppable.prototype._rearrangescopes = canvasObjUtils._.debounce($.ui.droppable.prototype._canvasarrange , 1000);
$.ui.droppable.prototype._addToManager = function(scope){
    this._updatedepth();
    $.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
    $.ui.ddmanager.droppables[ scope ].push( this );
    if(!scope || scope === 'default'){
        this._rearrangescopes && this._rearrangescopes(scope);
    }

}
$.ui.droppable.prototype._drop = function( event, custom ) {

	var draggable = custom || $.ui.ddmanager.current,
		childrenIntersection = false;

	// Bail if draggable and droppable are same element
	if ( !draggable || ( draggable.currentItem ||
			draggable.element )[ 0 ] === this.element[ 0 ] ) {
		return false;
	}

	this.element
		.find( ":data(ui-droppable)" )
		.not( ".ui-draggable-dragging" ) // NO I18N
		.each( function() {
			var inst = $( this ).droppable( "instance" );
			if (
				inst.options.greedy &&
				!inst.options.disabled &&
				inst.options.scope === draggable.options.scope &&
				inst.accept.call(
                    // eslint-disable-next-line no-extra-parens
					inst.element[ 0 ], ( draggable.currentItem || draggable.element )
				) &&
				$.ui.scrollcheck($.ui.intersect(
					draggable,
					$.extend( inst, { offset: inst.element.offset() } ),
					inst.options.tolerance, event
				) , draggable ,$.extend( inst, { offset: inst.element.offset() } ) ,inst.options.tolerance, event )
			) {
				childrenIntersection = true;
				return false; }
		} );
	if ( childrenIntersection ) {
		return false;
	}

    if ( this.accept.call( this.element[ 0 ],
        // eslint-disable-next-line no-extra-parens
			( draggable.currentItem || draggable.element ) ) ) {
		this._removeActiveClass();
		this._removeHoverClass();

		this._trigger( "drop", event, this.ui( draggable ) ); // NO I18N
		return this.element;
	}

	return false;

}
// eslint-disable-next-line zohocrm/no-dummy-functions
$.ui.resizable.prototype._removeHandles = function() {
    //  While changing resize handles , added handles are removed in plugin, that should not be happened.. 
    // For this fix :: We need to remove the element manually...
   return true;
}
// NO changes just to inherited for render axis method perf
$.ui.resizable.prototype._setupHandles = function() {
    var o = this.options, handle, i, n, hname, axis, that = this;
    this.handles = o.handles ||
        ( !$( ".ui-resizable-handle", this.element ).length ? // NO I18N
            "e,s,se" : { // NO I18N
                n: ".ui-resizable-n", // NO I18N
                e: ".ui-resizable-e", // NO I18N
                s: ".ui-resizable-s", // NO I18N
                w: ".ui-resizable-w", // NO I18N
                se: ".ui-resizable-se", // NO I18N
                sw: ".ui-resizable-sw", // NO I18N
                ne: ".ui-resizable-ne", // NO I18N
                nw: ".ui-resizable-nw" // NO I18N
            } );

    this._handles = $();
    this._addedHandles = $();
    if ( this.handles.constructor === String ) {

        if ( this.handles === "all" ) { // NO I18N
            this.handles = "n,e,s,w,se,sw,ne,nw"; // NO I18N
        }

        n = this.handles.split( "," );
        this.handles = {};
        var nlen = n.length;
        for ( i = 0; i < nlen; i++ ) {

            handle = String.prototype.trim.call( n[ i ] );
            hname = "ui-resizable-" + handle; // NO I18N
            axis = $( "<div>" ); // NO I18N
            this._addClass( axis, "ui-resizable-handle " + hname ); // NO I18N

            axis.css( { zIndex: o.zIndex } );

            this.handles[ handle ] = ".ui-resizable-" + handle;
            if ( !this.element.children( this.handles[ handle ] ).length ) {
                this.element.append( axis );
                this._addedHandles = this._addedHandles.add( axis );
            }
        }

    }

    this._renderAxis = function( target ) {

        var i, axis, padPos, padWrapper;
    
        target = target || this.element;
    
        for ( i in this.handles ) {
    
            if ( this.handles[ i ].constructor === String ) {
                var _currenthandle = this.element.children( this.handles[ i ] ).first();
                if(this.options.zhandlevisible){
                    this.handles[ i ] = _currenthandle;
                }else{
                    this.handles[ i ] = _currenthandle.show();
                }
                
            } else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
                this.handles[ i ] = $( this.handles[ i ] );
                this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
            }
    
            if ( this.elementIsWrapper &&
                    this.originalElement[ 0 ]
                        .nodeName
                        .match( /^(textarea|input|select|button)$/i ) ) {
                axis = $( this.handles[ i ], this.element );
    
                padWrapper = /sw|ne|nw|se|n|s/.test( i ) ? axis.outerHeight() : axis.outerWidth(); // eslint-disable-line webperf/layout-thrashing
    
                padPos = [ "padding", // NO I18N
                    /ne|nw|n/.test( i ) ? "Top" : // NO I18N
                    /se|sw|s/.test( i ) ? "Bottom" : // NO I18N
                    /^e$/.test( i ) ? "Right" : "Left" ].join( "" ); // NO I18N
    
                target.css( padPos, padWrapper );
    
                this._proportionallyResize();
            }
    
            this._handles = this._handles.add( this.handles[ i ] );
        }
    }

    // TODO: make renderAxis a prototype function
    this._renderAxis( this.element );

    this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
    this._handles.disableSelection();

    this._handles.on( "mouseover", function() {
        if ( !that.resizing ) {
            if ( this.className ) {
                // eslint-disable-next-line webperf/no-global-variables 
                axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i ); // NO I18N
            }
            // eslint-disable-next-line webperf/no-closure
            that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se"; // NO I18N
        }
    } );

    if ( o.autoHide ) {
        this._handles.hide();
        this._addClass( "ui-resizable-autohide" ); // NO I18N
    }
}




$.ui.plugin.has = function(plugins, option){
    var pluginlen = plugins.length;
    for(var i = 0 ; i < pluginlen; i++){
        // eslint-disable-next-line eqeqeq
        if(plugins[i][0] == option){
            return true;
        }
    }
    return false;
}
$.ui.plugin.add2 = function( module, option, set ) {
    var i,
        proto = $.ui[ module ].prototype;
    for ( i in set ) {
        proto.plugins[ i ] = proto.plugins[ i ] || [];
        if(!$.ui.plugin.has( proto.plugins[ i ] , option)){
            proto.plugins[ i ].push( [ option, set[ i ] ] );
        }
    }
}
$.ui.draggable.prototype._mouseStop = function(event) {
    //If we are using droppables, inform the manager about the drop
    var dropped = false;
    if ($.ui.ddmanager && !this.options.dropBehaviour){
        dropped = $.ui.ddmanager.drop(this, event);
    }

    //if a drop comes from outside (a sortable)
    if(this.dropped) {
        dropped = this.dropped;
        this.dropped = false;
    }
    this.mergetimer && clearTimeout(this.mergetimer);
// eslint-disable-next-line no-extra-parens , eqeqeq
    if((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
        // eslint-disable-next-line zstandard/no-reserved-words
        var self = this;
        self._trigger("reverting", event); //No I18N
        // eslint-disable-next-line webperf/no-animate
        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
            event.reverted = true;
            self._trigger("stop", event); //No I18N
            self._clear();
        });
    } else {
        this._trigger("stop", event); //No I18N
        this.helper && this._clear();
    }

    return false;
}

$.ui.draggable.prototype._setPositionRelative= function() {
    if ( !this.options.znoposition && !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
        this.element[ 0 ].style.position = "relative";
    }
}
$.ui.draggable.prototype._mouseDrag = function( event, noPropagation ) {
    // eslint-disable-next-line zstandard/no-reserved-words
    var self = this;
    clearTimeout(self.mergetimer);
    // reset any necessary cached properties (see #5009)
    if ( this.hasFixedAncestor ) {
        this.offset.parent = this._getParentOffset();
    }

    //Compute the helpers position
    this.position = this._generatePosition( event, true );
    this.positionAbs = this._convertPositionTo( "absolute" );//NO I18N

    //Call plugins and callbacks and use the resulting position if something is returned
    if ( !noPropagation ) {
        var ui = this._uiHash();
        if ( this._trigger( "drag", event, ui ) === false ) {
            this._mouseUp( new $.Event( "mouseup", event ) );//NO I18N
            return false;
        }
        this.position = ui.position;
    }
    if(this.helper && this.helper.length){
        this.helper[ 0 ].style.left = this.position.left + "px"; // eslint-disable-line webperf/layout-thrashing
        this.helper[ 0 ].style.top = this.position.top + "px";  // eslint-disable-line webperf/layout-thrashing
    }
    var catchEvents = event;
    var mousestop = function(){ self._trigger("zmouseStop", catchEvents);}//No I18N
    self.mergetimer = setTimeout(mousestop, 500);

    if ( $.ui.ddmanager ) {
        $.ui.ddmanager.drag( this, event );
    }

    return false;
}
$.ui.ddmanager.dragStart = function( draggable, event ) {
    // if(draggable && draggable.offsetParent && draggable.offsetParent.is('.ui-droppable')){
    //     if($.ui.ddmanager.activateddrop && $.ui.ddmanager.activateddrop.isover == true){
    //         $.ui.ddmanager.activateddrop.isout = true;
    //         $.ui.ddmanager.activateddrop.isover = false;
    //         $.ui.ddmanager.activateddrop._out($.ui.ddmanager.activateddrop , event);
    //     }
    //     $.ui.ddmanager.activateddrop = draggable.offsetParent.droppable('instance'); // NO I18N
    //     $.ui.ddmanager.activateddrop.isout = false;
    //     $.ui.ddmanager.activateddrop.isover = true;
    //     $.ui.ddmanager.activateddrop._over($.ui.ddmanager.activateddrop , event);
    // }else{
    //     $.ui.ddmanager.activateddrop = false;
    // }
    draggable.element.parentsUntil( "body" ).on( "scroll.droppable", function() { // NO I18N
        if ( !draggable.options.refreshPositions ) {
            $.ui.ddmanager.prepareOffsets( draggable, event );
        }
    } );
}
$.ui.ddmanager.prepareOffsets = function( t, event ) {

	var i, j,
		m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
		type = event ? event.type : null, // workaround for #2317
		list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();
	// eslint-disable-next-line zstandard/proper-usage-of-loop
	droppablesLoop: for ( i = 0; i < m.length; i++ ) {

		// No disabled and non-accepted
        if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ], // eslint-disable-line no-extra-parens
            // eslint-disable-next-line no-extra-parens
				( t.currentItem || t.element ) ) ) ) {
			continue;
		}

		// Filter out elements in the current dragged item
		// eslint-disable-next-line zstandard/proper-usage-of-loop
		for ( j = 0; j < list.length; j++ ) {
			if ( list[ j ] === m[ i ].element[ 0 ] ) {
				m[ i ].proportions().height = 0;
				continue droppablesLoop;
			}
		}

		m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
		if ( !m[ i ].visible ) {
			continue;
		}

		// Activate the droppable if used directly from draggables
		if ( type === "mousedown" ) {
			m[ i ]._activate.call( m[ i ], event );
		}
		// eslint-disable-next-line webperf/layout-thrashing
		m[ i ].offset = m[ i ].element.offset();
		
		m[ i ].proportions( {
			// eslint-disable-next-line webperf/layout-thrashing
			width: m[ i ].element[ 0 ].offsetWidth,
			// eslint-disable-next-line webperf/layout-thrashing
			height: m[ i ].element[ 0 ].offsetHeight
		} );
		
		m[ i ].scrollableParent = null;

	}
    t.scrollableParent = null;

}
$.ui.zintersect = ( function() {
    return function( draggable, droppable, toleranceMode, event ) {

        if ( !droppable.offset ) {
            return false;
        }
     // eslint-disable-next-line webperf/layout-thrashing
        var x1 = ( draggable.positionAbs ||
        		// eslint-disable-next-line webperf/layout-thrashing
                draggable.position.absolute ).left + draggable.margins.left,
             // eslint-disable-next-line webperf/layout-thrashing
            y1 = ( draggable.positionAbs ||
            		// eslint-disable-next-line webperf/layout-thrashing
                draggable.position.absolute ).top + draggable.margins.top,
             // eslint-disable-next-line webperf/layout-thrashing
            x2 = x1 + draggable.helperProportions.width,
         // eslint-disable-next-line webperf/layout-thrashing
            y2 = y1 + draggable.helperProportions.height,
         // eslint-disable-next-line webperf/layout-thrashing
            l = droppable.zoffsets.left,
         // eslint-disable-next-line webperf/layout-thrashing
            t = droppable.zoffsets.top,
         // eslint-disable-next-line webperf/layout-thrashing
            r = l + droppable.zproportions.width,
         // eslint-disable-next-line webperf/layout-thrashing
            b = t + droppable.zproportions.height;

        switch ( toleranceMode ) {
        case "fit":
            // eslint-disable-next-line no-extra-parens
            return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
        case "intersect":
            // eslint-disable-next-line no-extra-parens
            return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
            // eslint-disable-next-line no-extra-parens
                x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
                // eslint-disable-next-line no-extra-parens
                t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
                // eslint-disable-next-line no-extra-parens
                y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
        case "pointer":
        	// eslint-disable-next-line webperf/layout-thrashing
            return $.ui._isOverAxis( event.pageY, t, droppable.zproportions.height ) &&
         // eslint-disable-next-line webperf/layout-thrashing
            $.ui._isOverAxis( event.pageX, l, droppable.zproportions.width );
        case "touch":
            return (
                // eslint-disable-next-line no-extra-parens
                ( y1 >= t && y1 <= b ) || // Top edge touching
                // eslint-disable-next-line no-extra-parens
                ( y2 >= t && y2 <= b ) || // Bottom edge touching
                // eslint-disable-next-line no-extra-parens
                ( y1 < t && y2 > b ) // Surrounded vertically
            ) && (
                // eslint-disable-next-line no-extra-parens
                ( x1 >= l && x1 <= r ) || // Left edge touching
                // eslint-disable-next-line no-extra-parens
                ( x2 >= l && x2 <= r ) || // Right edge touching
                // eslint-disable-next-line no-extra-parens
                ( x1 < l && x2 > r ) // Surrounded horizontally
            );
        default:
            return false;
        }
    };
} )()
$.ui.scrollcheck = function(flag , draggable , droppable , tolerance ,event ){
	if(flag && !droppable.element.has(draggable.element).length){
		 if(!droppable.scrollableParent){
			 
            var scrollparent = droppable.element.scrollParent();
            if(!draggable.scrollableParent){
				draggable.scrollableParent = draggable.element.scrollParent();
			}
			droppable.scrollableParent = scrollparent;
			
			var proportions = droppable.proportions();
	        
	        var scrolloffset = scrollparent.offset();
	        scrolloffset.right = scrolloffset.left + scrollparent.outerWidth();
	        scrolloffset.bottom = scrolloffset.top + scrollparent.outerHeight();
	        
	        var elementoffset = droppable.offset;
	        elementoffset.right = elementoffset.left + proportions.width;
	        elementoffset.bottom = elementoffset.top + proportions.height;
	        droppable.zproportions = zutils.zcopyobj(proportions);
        	droppable.zoffsets = zutils.zcopyobj(droppable.offset);
        	droppable.scrolloffset = scrolloffset;
            droppable.elementoffset = elementoffset;
            // eslint-disable-next-line no-extra-parens
        	if((scrolloffset.top < elementoffset.top) && (scrolloffset.bottom > elementoffset.bottom) && (scrolloffset.left < elementoffset.left) && (scrolloffset.right > elementoffset.right)){
	        	droppable.perfectfit = true;
	        }else if(scrollparent.is(draggable.scrollableParent)){
	        	droppable.perfectfit = true;
	        }else{
	        	if(scrolloffset.left > elementoffset.left){
	        		var diff = scrolloffset.left - Math.abs(elementoffset.left);
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		droppable.zoffsets.left = scrolloffset.left;
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		droppable.zproportions.width = droppable.zproportions.width - diff;
	        	}
	        	// eslint-disable-next-line webperf/layout-thrashing
	        	if(scrolloffset.top > elementoffset.top){
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		var diff = scrolloffset.top - Math.abs(elementoffset.top);
	        		droppable.zoffsets.top = scrolloffset.top;
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		droppable.zproportions.height = droppable.zproportions.height - diff;
	        	}
	        	// eslint-disable-next-line webperf/layout-thrashing
	        	if(scrolloffset.right < elementoffset.right){
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		var diff = elementoffset.right - scrolloffset.right;
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		droppable.zproportions.width = droppable.zproportions.width - diff;
	        	}
	        	// eslint-disable-next-line webperf/layout-thrashing
	        	if(scrolloffset.bottom < elementoffset.bottom){
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		var diff = elementoffset.bottom - scrolloffset.bottom;
	        		// eslint-disable-next-line webperf/layout-thrashing
	        		droppable.zproportions.height = droppable.zproportions.height - diff;
	        	}
	        	
	        	
	        	
	        }
        	
		 }
		 
	        if(droppable.perfectfit){
	        	return true;
	        }else{
	        	return  $.ui.zintersect( draggable, droppable, tolerance, event );
	        }
	        
	        
	}
	return flag;
}
$.ui.ddmanager.drag = function( draggable, event ) {
    // If you have a highly dynamic page, you might try this option. It renders positions
    // every time you move the mouse.
    if ( draggable.options.refreshPositions ) {
        $.ui.ddmanager.prepareOffsets( draggable, event );
    }

    // Run through all droppables and check their positions based on specific tolerance options
    $.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

        if ( this.options.disabled || this.greedyChild || !this.visible ) {
            return;
        }

        var isintersect = $.ui.intersect( draggable, this, this.options.tolerance, event );
        var parentInstance, scope, parent,
            intersects = $.ui.scrollcheck(isintersect , draggable , this , this.options.tolerance , event),
            c = !intersects && this.isover ?
                "isout" : // NO I18N
                // eslint-disable-next-line no-extra-parens
                ( intersects && !this.isover ? "isover" : null ); // NO I18N
        if ( !c ) {
            return;
        }
 

        if(c === 'isover' && $.ui.ddmanager.activateddrop) {
            if( $.ui.ddmanager.droppables[ draggable.option.scope || 'default' ].indexOf(this) > $.ui.ddmanager.droppables[ draggable.option.scope || 'default' ].indexOf($.ui.ddmanager.activateddrop)){
                this.isover = false; 
                this.isout = true;
                this._out.call(this, event);
                $.ui.ddmanager.activateddrop.isover = true;
                $.ui.ddmanager.activateddrop.isout = false;
                $.ui.ddmanager.activateddrop._over.call($.ui.ddmanager.activateddrop , event);
                return;
            }else{
                $.ui.ddmanager.activateddrop.isout = true;
                $.ui.ddmanager.activateddrop.isover = false;
                $.ui.ddmanager.activateddrop._out.call($.ui.ddmanager.activateddrop , event);
            }
        }
       

        if ( this.options.greedy ) {

            // find droppable parents with same scope
            scope = this.options.scope;
            parent = this.element.parents( ":data(ui-droppable)" ).filter( function() { // NO I18N
                return $( this ).droppable( "instance" ).options.scope === scope;
            } );
            var parentlen = parent.length;
            if ( parentlen ) {
            	
                // eslint-disable-next-line zstandard/no-jQuery-casting
                parentInstance = $( parent[ 0 ] ).droppable( "instance" );
                // eslint-disable-next-line no-extra-parens
                parentInstance.greedyChild = ( c === "isover" ); // NO I18N
                
                for(var i = 0 ; i < parentlen ; i++){
                    var parinst = parent.eq(i).droppable( "instance" ); // NO I18N
                    // eslint-disable-next-line no-extra-parens
                	parinst.greedyChild = ( c === "isover" ); // NO I18N
                	
                	  if ( parinst && c === "isover" ) {
                		  parinst.isover = false;
                		  parinst.isout = true;
                		  parinst._out.call( parinst, event );
                      }
                	 
                }
            }
        }

        // We just moved into a greedy child
//        if ( parentInstance && c === "isover" ) {
//            parentInstance.isover = false;
//            parentInstance.isout = true;
//            parentInstance._out.call( parentInstance, event );
//        }


      
        this[ c ] = true;
        this[ c === "isout" ? "isover" : "isout" ] = false; // NO I18N
        this[ c === "isover" ? "_over" : "_out" ].call( this, event ); // NO I18N
        
        if(c === 'isover'){
            $.ui.ddmanager.activateddrop = this;
        }
        if(c === 'isout'){
            $.ui.ddmanager.activateddrop = false;
        }

        // We just moved out of a greedy child
//        if ( parentInstance && c === "isout" ) {
//            parentInstance.isout = false;
//            parentInstance.isover = true;
//            parentInstance._over.call( parentInstance, event );
//        }
        
        for(var i = 0 ; i < parentlen ; i++){
        	var parinst = parent.eq(i).droppable( "instance" ); // NO I18N
        	
        	if(i > 0){
        		continue;
        	}
        	
            if ( parinst && c === "isout" ) {
          	  parinst.isout = false;
          	  parinst.isover = true;
          	  parinst._over.call( parentInstance, event );
          	  $.ui.ddmanager.activateddrop = parinst;
            }
        }
    } );
}
$.ui._isOverAxis = function( x, reference, size ) {
    // eslint-disable-next-line no-extra-parens
    return ( x >= reference ) && ( x < ( reference + size ) );
}
$.ui.intersect = function( draggable, droppable, toleranceMode, event ) {
    
    if ( !droppable.offset ) {
        return false;
    }

    var x1 = ( draggable.positionAbs ||
            draggable.position.absolute ).left + draggable.margins.left,
        y1 = ( draggable.positionAbs ||
            draggable.position.absolute ).top + draggable.margins.top,
        x2 = x1 + draggable.helperProportions.width,
        y2 = y1 + draggable.helperProportions.height,
        l = droppable.offset.left,
        t = droppable.offset.top,
        r = l + droppable.proportions().width,
        b = t + droppable.proportions().height;

    switch ( toleranceMode ) {
    case "fit":
        // eslint-disable-next-line no-extra-parens
        return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
    case "intersect":
        // eslint-disable-next-line no-extra-parens
        return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
        // eslint-disable-next-line no-extra-parens
            x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
            // eslint-disable-next-line no-extra-parens
            t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
            // eslint-disable-next-line no-extra-parens
            y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
    case "pointer":
        // eslint-disable-next-line webperf/layout-thrashing
        return $.ui._isOverAxis( event.pageY, t, droppable.proportions().height ) &&
        // eslint-disable-next-line webperf/layout-thrashing
                $.ui._isOverAxis( event.pageX, l, droppable.proportions().width );
    case "touch":
        return (
            // eslint-disable-next-line no-extra-parens
            ( y1 >= t && y1 <= b ) || // Top edge touching
            // eslint-disable-next-line no-extra-parens
            ( y2 >= t && y2 <= b ) || // Bottom edge touching
            // eslint-disable-next-line no-extra-parens
            ( y1 < t && y2 > b ) // Surrounded vertically
        ) && (
            // eslint-disable-next-line no-extra-parens
            ( x1 >= l && x1 <= r ) || // Left edge touching
            // eslint-disable-next-line no-extra-parens
            ( x2 >= l && x2 <= r ) || // Right edge touching
            // eslint-disable-next-line no-extra-parens
            ( x1 < l && x2 > r )  // Surrounded horizontally
        );
    default:
        return false;
    }
};
$.ui.ddmanager.drop = function( draggable, event ) {

    var dropped = false;

    // Create a copy of the droppables in case the list changes during the drop (#9116)
    $.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {
        if ( this.greedyChild ) {
            this.greedyChild = false;
        }
        if ( !this.options ) {
            return;
        }
        if ( !this.options.disabled && this.visible && !dropped &&
            $.ui.scrollcheck($.ui.intersect( draggable, this, this.options.tolerance, event ) , draggable, this, this.options.tolerance, event) ) {
        dropped = this._drop.call( this, event ) || dropped;
    }

        if ( !this.options.disabled && this.visible && (this.accept.call( this.element[ 0 ], 
                ( draggable.currentItem || draggable.element ) ) ) || draggable.acceptable_destroyed) { // eslint-disable-line no-extra-parens
            this.isout = true;
            this.isover = false;
            this._deactivate.call( this, event );
        }

    });

    $.ui.ddmanager.activateddrop = false;


    return dropped;

}

$.ui.plugin.add( "resizable", "zalsoResize", {  // NO I18N

	start: function() {
		var that = $( this ).resizable( "instance" ), // NO I18N
			o = that.options;

		$( o.zalsoResize ).each( function() {
            var self_ = this;
            var el = $( this );
            var inst = el.resizable("instance"); // NO I18N
            var plug = inst ? inst.plugins.start : [];
            plug.map(function(i){
                if(i[0] === "zrestricteditor" || i[0] === "zrestrict"){
                    inst.options[i[0]] && i[1].bind(self_)();
                }
            })
          //  el.data('zc_old', canvasObjUtils._.extend(inst.size , inst.position));
			el.data( "ui-resizable-alsoresize", { // NO I18N
				width: parseFloat( el.width() ), height: parseFloat( el.height() ),
				left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) ) // NO I18N
			} );
		} );
	},

	resize: function(  ) {
		var that = $( this ).resizable( "instance" ), // NO I18N
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
                // eslint-disable-next-line no-extra-parens
                height: ( that.size.height - os.height ) || 0,
                // eslint-disable-next-line no-extra-parens
                width: ( that.size.width - os.width ) || 0,
                // eslint-disable-next-line no-extra-parens
				top: ( that.position.top - op.top ) || 0,
				// eslint-disable-next-line no-extra-parens
				left: ( that.position.left - op.left ) || 0
			};

			$( o.zalsoResize ).each( function() {
                var el = $( this );
                var rdata = el.data();
                
                var start = rdata.uiResizableAlsoresize; 
                var resize = rdata.uiResizable;
                var meta = resize.zcmetastyles;
                var style = {};
				var css = ["width","left"];  // NO I18N

                if(resize.options.handles.indexOf('s') > -1){ // NO I18N
                    css.push("height"); // NO I18N
                }
                if(resize.options.handles.indexOf('n') > -1){
                    css.push("top"); // NO I18N
                }
                    

				$.each( css, function( i, prop ) {
                    if( (prop === 'left' || prop === 'top') && o && o.znoleftalsoresize && typeof that.axis === 'string' && ( that.axis.indexOf('w') > -1 || that.axis.indexOf('n') > -1 ) ){
                        return true;
                    }
					var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
					if ( sum && sum >= 0 ) {
                        style[ prop ] = sum || null;
                        
                        // Padding and Border handler
                        // eslint-disable-next-line eqeqeq
                        if(style[prop] && prop == 'height' && meta){
                            style[prop] += meta.nh;
                        }
                        // eslint-disable-next-line eqeqeq
                        if(style[prop] && prop == 'width' && meta){
                            style[prop] += meta.ww;
                        }
					}
				} );

				el.css( style );
			} );
	},

	stop: function() {
		$( this ).removeData( "ui-resizable-alsoresize" ); // NO I18N
	}
} );;$.ui.plugin.add( "draggable", "zconnectToSortable", { // NO I18N
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.sortables = [];
		if(draggable.options.zconnectToSortable && (!draggable.options.zconnectToSortableCondition || !draggable.options.zconnectToSortableCondition(draggable.element))){
			$( draggable.options.zconnectToSortable + '.ui-sortable' + ':visible:not(.zctable-disabled)' ).each( function() {
				var sortable = $( this ).sortable( "instance" );
	
				if ( sortable && !sortable.options.disabled ) {
					draggable.sortables.push( sortable );
	
					// RefreshPositions is called at drag start to refresh the containerCache
					// which is used in drag. This ensures it's initialized and synchronized
					// with any changes that might have happened on the page since initialization.
					sortable.refreshPositions();
					sortable._trigger( "activate", event, uiSortable ); // NO I18N
				}
			} );
		}
		
		
		var sorted = draggable.sortables.sort(function(_a,_b){
			// eslint-disable-next-line zstandard/no-jQuery-casting
			var a = _a.element.parent()[0];
			// eslint-disable-next-line zstandard/no-jQuery-casting
			var b = _b.element.parent()[0];
			// eslint-disable-next-line eqeqeq
			if(a == b){
				return 0;
			}
			if(a.compareDocumentPosition(b) & 2){
				return 1;
			}
			return -1;
		});
		
		draggable.sortables = canvasObjUtils._.sortBy(sorted , function(a){
				/*// eslint-disable-next-line zstandard/no-jQuery-casting
				var ele = a.element.parent()[0];
				var depth = parseInt(ele.style.zIndex) || 0;
				a.depth = depth;
	           return depth;*/
			   return parseInt(a.actualindex || 0);
	       }).reverse();
	       
		draggable.activated = false;
		$.ui.ddmanager.activatedsort = false;
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ), // NO I18N
					top: sortable.placeholder.css( "top" ), // NO I18N
					left: sortable.placeholder.css( "left" ) // NO I18N
				};

				sortable._mouseStop( event );

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {

				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable ); // NO I18N
			}
		} );

		if($.ui.ddmanager.activatedsort){
			$.ui.ddmanager.activatedsort && $.ui.ddmanager.activatedsort.droppable('option' , 'disabled' , false); // NO I18N
		}
	},
	drag: function( event, ui, draggable ) {
		var justouter = false;
		$.each( draggable.sortables, function() {
			
			
			
			var innermostIntersecting = false,
				sortable = this;

				
			
			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			var _isIntersect = sortable._intersectsWith( sortable.containerCache );
			var isdropopened = true;
			if(_isIntersect && $.ui.ddmanager && $.ui.ddmanager.activateddrop && $.ui.ddmanager.activateddrop.element && !$.ui.ddmanager.activateddrop.element.has(sortable.element).length  && !sortable.element.has($.ui.ddmanager.activateddrop.element).length){
				var _dropelement = parseInt( $.ui.ddmanager.activateddrop.actualindex );
				var _sortelement = parseInt( this.actualindex || this.depth );
				if(_dropelement > _sortelement){
					isdropopened = false
				}else{
					$.ui.ddmanager.activatedsort = $.ui.ddmanager.activateddrop.element;
					$.ui.ddmanager.activatedsort.droppable('option' , 'disabled' , true); // NO I18N 
					$.ui.ddmanager.activatedsort.removeClass('ui-droppable-active ui-droppable-hover zcanvas-overeditor'); // NO I18N
				}
			}
			if ( _isIntersect &&  isdropopened) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {

					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				} );
			}
			
			// eslint-disable-next-line eqeqeq , no-extra-parens
			if(!innermostIntersecting || (innermostIntersecting && draggable.sortables.indexOf(this) > draggable.sortables.indexOf(draggable.activated) &&  draggable.activated != this)){

				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {
					justouter = innermostIntersecting;
					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) ); // NO I18N
				//	sortable._mouseStop( event, true );
					draggable.activated = false;
					// Restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						// eslint-disable-next-line webperf/layout-thrashing
						sortable.placeholder.remove();
					}

					// Restore and recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways. (#8809, #10669)
					// eslint-disable-next-line webperf/layout-thrashing
					ui.helper.appendTo( draggable._parent );
					// eslint-disable-next-line webperf/layout-thrashing
					ui.helper.removeClass('zcOvertable'); // NO I18N
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event ); // NO I18N
					ui.helper.data('uiDraggable',draggable); // NO I18N

					// Inform draggable that the helper is no longer in a valid drop zone
					// FIXME: This is a fix for nested reverted bug
					//draggable.dropped = false;

					

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );

					if($.ui.ddmanager.activatedsort){
						$.ui.ddmanager.activatedsort && $.ui.ddmanager.activatedsort.droppable('option' , 'disabled' , false); // NO I18N
					}
				}
			}

			// eslint-disable-next-line eqeqeq
			if ( innermostIntersecting && !justouter && (!draggable.activated || draggable.activated == this || draggable.sortables.indexOf(this) < draggable.sortables.indexOf(draggable.activated))) {
				
				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {

					sortable.isOver = 1;
					
					draggable.activated = this;

					// Store draggable's parent in case we need to reappend to it later.
					// eslint-disable-next-line webperf/no-multipleDOMLookup
					draggable._parent = ui.helper.parent();

					// eslint-disable-next-line webperf/layout-thrashing
					sortable.currentItem = ui.helper.appendTo( sortable.element ).data( "ui-sortable-item", true ); // NO I18N

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					// eslint-disable-next-line webperf/layout-thrashing
					sortable.offset.click.top = draggable.offset.click.top;
					// eslint-disable-next-line webperf/layout-thrashing
					sortable.offset.click.left = draggable.offset.click.left;
					// eslint-disable-next-line webperf/layout-thrashing
					sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;
					// eslint-disable-next-line webperf/layout-thrashing
					sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;

					draggable._trigger( "toSortable", event ); // NO I18N

					// TRIGGER OVER EVENT HERE FOR CANVAS TO GREEDY THE DROPPABLE

					sortable._trigger( "over", event, sortable._uiHash( sortable ) ); // NO I18N

					// END



					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );

					// Hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
					ui.helper.data('uiDraggable',draggable); // NO I18N
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );

					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					// eslint-disable-next-line webperf/layout-thrashing
					ui.position = sortable.position;
				}
			} 
			
			
		} );
	}
} );;(function(){
	var zhelpers = {
		camelize: function(str){
			return str.toLowerCase().replace(/\b[a-z]/g, function(letter) {
				return letter.toUpperCase();
			});
		}
	}
	window.zhelpers = zhelpers;
})();
;(function(){
    var zcconfig = function(tools){


        tools.tools.handler.textarea = function(config){
            var toolel = $(config.container);
            var template = '<textarea placeholder="Image URL (https://www.example.com/image.jpeg)" class="zcanvastoolinput zcanvastooltext"> </textarea>';
            var $el = $($.parseHTML(template));
            toolel.html($el);
            var inputchangeHandler = function(e){
                var result = {style: {}};
                result.style[this.config.actionproperty] = e.target.value;

                var processchange = function(result){
                    if(this.config.preprocess){
                        result = this.config.preprocess.bind(this)(result);
                    }
    
                    if(this.config.onChange){
                        this.config.onChange.bind(this)(this.config , result)   
                    }else{
                        this.main.changehandler(this.config , result);
                    }
                }
               if(this.config.sanitizeinput){
                    this.result = result;
                    this.config.sanitizeinput.bind(this)( e.target.value , processchange.bind(this))
               }else{
                    processchange.bind(this)(result);
               }
                
                e.stopImmediatePropagation();
                return result;
            }
            if(this.config && this.config.toolonfocus){
            	$el.focus(this.config.toolonfocus);
            }
            if(this.config && this.config.toolonblur){
            	$el.blur(this.config.toolonblur);
            }
            $el.change(inputchangeHandler.bind({main: this , config: config}));
            this.tools.metaformation.bind({main: this , config: config})($el);
        }

        tools.tools.populate.textarea = function(config, obj){
            if(obj.length){
                var multi = this.multiobject(config , obj);
                if(!multi){
                    obj = {}
                    if(config.availableclass){
                        obj.class = '';
                    }else{
                        obj[config.actionproperty] = '';
                    }
                }else{
                    obj = obj[0];
                }
            }
            var styleproperty = config.actionproperty
            var val;
            var value = obj;
            var prevalue = {};
            var $el = $(config.container);
            var $inputel = $el.find('.zcanvastooltext');
            val = value[styleproperty];
            prevalue[styleproperty] = val;
            $inputel.val(val || '');
        }

        tools.tools.getvalue.textarea = function(config){
            var val = $(config.container).find('.zcanvastooltext').val(); // NO I18N
            return val;
        }

        tools.tools.handler.button = function(config){
            var toolel = $(config.container);
            var template = '<button>' + config.actiontext + '</button>'; // NO I18N
            var $el = $($.parseHTML(template));
            toolel.html($el);

            var clickhandler = function(e){
                if(this.config.changehandler){
                    this.config.changehandler.bind(this)();
                }
                e.stopImmediatePropagation();   
            }

            $el.click(clickhandler.bind({main: this , config: config}));
            this.tools.metaformation.bind({main: this , config: config})($el);
        }

        tools.tools.populate.button = function(config){
            if(config && config.populate ){
                config.populate();
            }
            return ;
        }



        tools.tools.handler.degree = function(config){
            var toolel = $(config.container);
            var degreechage = function(deg){
                var value = {style:{}};
                value.style[config.actionproperty] = deg;
                if(this.config.preprocess){
                    value = this.config.preprocess.bind(this)(value);
                }
                var datac = $(config.datacontainer);
                this.main.changehandler(this.config , value, this.nocatch, !this.nocatch ? zutils.zcopyobj( datac.data('zcprev') ) : undefined); // NO I18N
                if(!this.nocatch){
                    datac.data('zcprev',value.style); // NO I18N
                }
                return value;
            }
            var inst =  new ZDegreePicker({
                container: config.container, // NO I18N
                onChange: degreechage.bind({main: this , config: config, nocatch: true}),
                onStop: degreechage.bind({main: this , config: config})
            });
            toolel.data('zcdegree', inst); // NO I18N
            this.tools.metaformation.bind({main: this , config: config})(toolel);
        }

        tools.tools.populate.degree = function(config , obj){
            if(obj.length){
                var multi = this.multiobject(config , obj, true);
                if(!multi){
                    obj = {
                        bgdegree: 160
                    }
                }else{
                    obj = obj[0];
                }
            }
            var container = $(config.container);
            var inst = container.data('zcdegree'); // NO I18N
            inst.setvalue(obj[config.actionproperty]);
        }

        tools.tools.getvalue.degree = function(config){
            var el = $(config.container).find('.z-degree-angle'); // NO I18N
            var s = el[0].style.transform; // NO I18N
            // eslint-disable-next-line no-useless-escape
            var rotate = s.match(new RegExp('rotate\((.*)\)'))
            if(rotate && rotate.length){
                var rotatedata = parseInt(rotate[1].replace('(','').replace('(',''))
                return Math.abs(360 + rotatedata);
            }
            return 0;
        }

        
        var spacehandler = function(flag){
        	var selfields = this.main.selectedfields || $('');
        	var sellen = selfields.length;
            var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
            var spaceAdd = function(toolname){
                var item = this.main.availabletools[toolname];
                $(item.container).addClass('zc-sep-hide');
            }
            var spaceRemove = function(toolname){
                var item = this.main.availabletools[toolname];
                $(item.container).removeClass('zc-sep-hide');
                this.main.setcurrentvalue(item);
            }
        	for(var i = 0 ; i < sellen ; i++){
	            var selector = this.main.getSelectorByElement(selfields.eq(i) , 'default'); // NO I18N
	            var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
	            var obj = this.main.getstylebyselector(selector)[this.main.state] || {};
	            var previous = zutils.zcopyobj2(obj);
	            if(flag){
	                this.main.tools.helpers.formation[this.config.handlertype](obj);
	                this.config.metadata.multiple.map(spaceAdd.bind(this));
	                this.config.metadata.single.map(spaceRemove.bind(this));
	                
	            }else{
	                this.main.tools.helpers.deformation[this.config.handlertype](obj);
	                this.config.metadata.single.map(spaceAdd.bind(this));
	                this.config.metadata.multiple.map(spaceRemove.bind(this));
	                
	            }
	            var current =  zutils.zcopyobj2(obj);
	            this.main.updatestyle(this.config , styleselector , obj);
	            var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true,undoobj.actionarray);
	            undoobj.actionarray.push(undo);
        	}
        	this.main.savecanvasaction(undoobj,selfields);
        }

        var borderhandler = function(flag){
        	var selfields = this.main.selectedfields || $('');
        	var sellen = selfields.length;
            var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
            var _single = $('.canvas-box-single'); // NO I18N
            var _multi = $('.canvas-tool-multiple'); // NO I18N
            var setBordervalue = function(toolname){
                var item = this.main.availabletools[toolname];
                this.main.setcurrentvalue(item);
            }
        	for(var i = 0 ; i < sellen ; i++){
	            var selector = this.main.getSelectorByElement(selfields.eq(i), 'default'); // NO I18N
	            var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
	            var obj = this.main.getstylebyselector(selector)[this.main.state] || {};
	            var previous = zutils.zcopyobj2(obj);
	            if(flag){
	                obj.border = '1px solid rgba(0,0,0,1)'; // NO I18N
	                delete obj['border-left'];   // NO I18N
	                delete obj['border-top'];  // NO I18N
	                delete obj['border-right'];  // NO I18N
	                delete obj['border-bottom'];  // NO I18N
	                _single.removeClass('zc-sep-hide');
	                _multi.addClass('zc-sep-hide');
	                this.config.metadata.single.map(setBordervalue.bind(this))
	            }else{
	                var border = '1px solid rgba(0,0,0,1)'; // NO I18N
	                if(obj.border){
	                    border = obj.border;
	                    delete obj.border;
	                }
	                obj['border-top'] = obj['border-right'] = obj['border-bottom'] = obj['border-left'] = border; // NO I18N
	                _single.addClass('zc-sep-hide');
	                _multi.removeClass('zc-sep-hide');
	                this.config.metadata.multiple.map(setBordervalue.bind(this));
	            }
	            var current =  zutils.zcopyobj2(obj);
	            this.main.updatestyle(this.config , styleselector , obj);
	            var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true, undoobj.actionarray);
	            undoobj.actionarray.push(undo);
	    	}
        	this.main.savecanvasaction(undoobj,selfields);
        }


        var shadowprocess = function(property ,selectedIndex){
            var box = '';
            var toolist = this.main.availabletools.boxshadow.tools;
            var toollen = toolist.length;
            for(var i = 0 ; i < toollen ; i++){
                box += this.main.tools.getvalue[toolist[i].type].bind(this)(toolist[i] , selectedIndex);
                if(toolist[i].type === 'input'){
                    box += 'px ';  // NO I18N
                }
            }
            property.style = {} ;
            property.style['box-shadow'] = box; // NO I18N
            return property;
        }

        var bordersideswitch = function(){
            if(this.config.meta){
                $('.canvas-multi-border:not(.zc-border-hide)').addClass('zc-border-hide');
                var metael = $('.' + this.config.meta.class);
                metael.removeClass('zc-border-hide');
                var metaparent = metael.parent();
                metaparent.removeClass('zc-first-selected-element zc-last-selected-element'); // NO I18N
                if(this.config.meta.class === 'canvas-border-top'){
                    metaparent.addClass('zc-first-selected-element'); // NO I18N
                }else if(this.config.meta.class === 'canvas-border-left'){ // NO I18N
                    metaparent.addClass('zc-last-selected-element'); // NO I18N
                }
                $('.canvas-border-tab .spaceicon.zc-tools-selected').removeClass('zc-tools-selected');
                $(this.config.container).addClass('zc-tools-selected');
            }
        }

        var formborder = function(name , prop , selectedIndex){
            var property = {};
            var border = '';
            var toollist = this.main.availabletools[name].tools;
            var toollen = toollist.length;
            var toolorder = {};
            for(var i = 0 ; i < toollen ; i++){
                if(toollist[i].noprocess){
                    continue;
                }
              //  border += this.main.tools.getvalue[toollist[i].type].bind(this)(toollist[i] , selectedIndex);
               
                switch(toollist[i].type){
                    case 'input':
                        toolorder.input = toollist[i];
                        break;
                    case 'select':
                        toolorder.select = toollist[i];
                        break;
                    case 'colorpicker':
                        toolorder.colorpicker = toollist[i];
                        break;
                }
             //   border += ' '; // NO I18N
            }
            
            border += this.main.tools.getvalue[toolorder.input.type].bind(this)(toolorder.input , selectedIndex) + 'px ';
            border += this.main.tools.getvalue[toolorder.select.type].bind(this)(toolorder.select , selectedIndex) + ' ';
            border += this.main.tools.getvalue[toolorder.colorpicker.type].bind(this)(toolorder.colorpicker , selectedIndex);
            
            property.style = {};
            property.style[prop] = border;
            return property;
        }
        var borderprocess = function(item , selectedIndex){
            return formborder.bind(this)('border', 'border', selectedIndex); // NO I18N
        }
        var bordertprocess = function(item , selectedIndex){
            return formborder.bind(this)('bordert', 'border-top', selectedIndex); // NO I18N
        }
        var borderrprocess = function(item , selectedIndex){
            return formborder.bind(this)('borderr', 'border-right', selectedIndex); // NO I18N
        }
        var borderbprocess = function(item , selectedIndex){
            return formborder.bind(this)('borderb', 'border-bottom', selectedIndex); // NO I18N
        }
        var borderlprocess = function(item , selectedIndex){
            return formborder.bind(this)('borderl', 'border-left', selectedIndex); // NO I18N
        }

        
        var bgprocess = function(){
            var bgimage = '';
            var toolist = this.main.availabletools.bgadvanced.tools;
            var image = toolist[0];
            var degree = toolist[1];
            var gradient = toolist[2];
            var imagevalue = '';
            var gradientvalue = '';
            if(image){
                imagevalue = this.main.tools.getvalue[image.type](image);
                if(imagevalue){
                    imagevalue = 'url(' + imagevalue.trim() + ')'; // NO I18N
                }
            }
            if(gradient){
                gradientvalue = this.main.tools.getvalue[gradient.type](gradient);
                if(gradientvalue){
                    var degreevalue = this.main.tools.getvalue[degree.type](degree);
                    gradientvalue = 'linear-gradient(' + (degreevalue || 0) + 'deg , ' + gradientvalue + ')'; // NO I18N
                }
            }

            bgimage += imagevalue ? imagevalue : '';
            
            bgimage =  bgimage && gradientvalue ? bgimage + '  , ' : bgimage; 

            bgimage += gradientvalue ? gradientvalue : '';

            return {
                style: {
                    'background-image' : bgimage // NO I18N
                }
            }
        }

        var switchhandler = function(config , flag){
           
            if(!flag){
                config.metadata.single.map(function(toolname){
                    var item = this.availabletools[toolname];
                    $(item.container).addClass('zc-sep-hide');
                }.bind(this));
                config.metadata.multiple.map(function(toolname){
                    var item = this.availabletools[toolname];
                    $(item.container).removeClass('zc-sep-hide');
                }.bind(this));
            }else{
                config.metadata.single.map(function(toolname){
                    var item = this.availabletools[toolname];
                    $(item.container).removeClass('zc-sep-hide');
                }.bind(this));
                config.metadata.multiple.map(function(toolname){
                    var item = this.availabletools[toolname];
                    $(item.container).addClass('zc-sep-hide');
                }.bind(this));
            }
           
        }

        var multihandlerswitch = function(config , flag){
            var $helement = $(config.metadata.container);
            var $basec = $(config.metadata.base);
            
            if(!flag){ 
                $helement.hide();
                $basec.addClass('zctool-hidden');
            }
            $helement.show();
            $basec.removeClass('zctool-hidden');
        }

        var prepopulatehandler = function(config , style , selectedfield){
            if(selectedfield.hasClass('zcanvas-field')){
                var $selectedEl = selectedfield.find('.zcanvas-inner-component:not(.zcicon)');
                var sellen = $selectedEl.length;
                style = [];
                for(var i = 0 ; i < sellen ; i++){
                    style.push(this.getcurrentstyle(config , $selectedEl.eq(i)));
                }
            }
            return style;
        }

        var getthemestyle = function(element){
            var zctype = this.config.gettype(element);
            var type = zctype.zctype;
            var themestyle = {}
            if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                if(this.config.theme.currenttheme[type][this.state]){
                    themestyle = this.config.theme.currenttheme[type][this.state]
                }else{
                    themestyle = this.config.theme.currenttheme[type].default;
                }
            }
            return themestyle;
        }

        tools.addtool({
            toolname: 'fontsize', // NO I18N
            container: '#sizeselect', // NO I18N
            type: 'select', // NO I18N
            selected : '12', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'font-size', // NO I18N
            extravalue: true,
            min: '1', // NO I18N
            max: '99', // NO I18N
            i18n: 'zc.editor.font.size', // NO I18N
            actualmin: 1,
            actualmax: 99,
            basecontainer: '.canvas-text-tools', // NO I18N
            list : [
                {
                    selectvalue: '11', // NO I18N
                    displayvalue: '11', // NO I18N
                    style: {
                        'font-size':'11px' // NO I18N
                    }
                },
                {
                    selectvalue: '12', // NO I18N
                    displayvalue: '12', // NO I18N
                    style: {
                        'font-size':'12px' // NO I18N
                    }
                },
                {
                    selectvalue: '13', // NO I18N
                    displayvalue: '13', // NO I18N
                    style: {
                        'font-size':'13px' // NO I18N
                    }
                },
                {
                    selectvalue: '14', // NO I18N
                    displayvalue: '14', // NO I18N
                    style: {
                        'font-size':'14px' // NO I18N
                    }
                },
                {
                    selectvalue: '15', // NO I18N
                    displayvalue: '15', // NO I18N
                    style: {
                        'font-size':'15px' // NO I18N
                    }
                },
                {
                    selectvalue: '16', // NO I18N
                    displayvalue: '16', // NO I18N
                    style: {
                        'font-size':'16px' // NO I18N
                    }
                },
                {
                    selectvalue: '17', // NO I18N
                    displayvalue: '17', // NO I18N
                    style: {
                        'font-size':'17px' // NO I18N
                    }
                },
                {
                    selectvalue: '18', // NO I18N
                    displayvalue: '18', // NO I18N
                    style: {
                        'font-size':'18px' // NO I18N
                    }
                },
                {
                    selectvalue: '19', // NO I18N
                    displayvalue: '19', // NO I18N
                    style: {
                        'font-size':'19px' // NO I18N
                    }
                },
                {
                    selectvalue: '20', // NO I18N
                    displayvalue: '20', // NO I18N
                    style: {
                        'font-size':'20px' // NO I18N
                    }
                },
                {
                    selectvalue: '21', // NO I18N
                    displayvalue: '21', // NO I18N
                    style: {
                        'font-size':'21px' // NO I18N
                    }
                },
                {
                    selectvalue: '22', // NO I18N
                    displayvalue: '22', // NO I18N
                    style: {
                        'font-size':'22px' // NO I18N
                    }
                },
                {
                    selectvalue: '23', // NO I18N
                    displayvalue: '23', // NO I18N
                    style: {
                        'font-size':'23px' // NO I18N
                    }
                },
                {
                    selectvalue: '24', // NO I18N
                    displayvalue: '24', // NO I18N
                    style: {
                        'font-size':'24px' // NO I18N
                    }
                },
                {
                    selectvalue: '26', // NO I18N
                    displayvalue: '26', // NO I18N
                    style: {
                        'font-size':'26px' // NO I18N
                    }
                },
                {
                    selectvalue: '30', // NO I18N
                    displayvalue: '30', // NO I18N
                    style: {
                        'font-size':'30px' // NO I18N
                    }
                },
                {
                    selectvalue: '32', // NO I18N
                    displayvalue: '32', // NO I18N
                    style: {
                        'font-size':'32px' // NO I18N
                    }
                },
                {
                    selectvalue: '36', // NO I18N
                    displayvalue: '36', // NO I18N
                    style: {
                        'font-size':'36px' // NO I18N
                    }
                }
             ]
        });

        tools.addtool({
            toolname: 'fontcolor',  // NO I18N
            container: '#fontcolor', // NO I18N
            type: 'colorpicker', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'color', // NO I18N
            el: 'elementfontcolor' // NO I18N
        });

        tools.addtool({
            toolname: 'iconcolor',  // NO I18N
            container: '#iconcolorinput', // NO I18N
            type: 'colorpicker', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'color', // NO I18N
            el: 'elementiconcolor', // NO I18N
            sync: '#iconcolor' // NO I18N
        });

        tools.addtool({
            toolname: 'iconcolorhex',  // NO I18N
            container: '#iconcolor', // NO I18N
            type: 'hexinput', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'color', // NO I18N
            basecontainer: '.zc-icon-colortool', // NO I18N
            sync: '#iconcolorinput' // NO I18N
        });

        tools.addtool({
            toolname: 'bgcolorinput',  // NO I18N
            container: '#bgcolorinput', // NO I18N
            type: 'hexinput', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'background-color', // NO I18N
            sync: '#bgcolor' // NO I18N
        });

        tools.addtool({
            toolname: 'bgcolor',  // NO I18N
            container: '#bgcolor', // NO I18N
            type: 'colorpicker', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'background-color', // NO I18N
            basecontainer: '.zc-bg-tool', // NO I18N
            el: 'elementbgcolor', // NO I18N
            sync: '#bgcolorinput' // NO I18N
        });

        tools.addtool({
            toolname: 'fontweight', // NO I18N
            container: '#weightselect', // NO I18N
            type: 'select', // NO I18N
            selected : 'Regular', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'font-family', // NO I18N
            list: [
                {
                    selectvalue: 'Thin', // NO I18N
                    displayvalue: 'Thin', // NO I18N
                    style: {
                        'font-family':'LatoThin' // NO I18N
                    }
                },
                {
                    selectvalue: 'Light', // NO I18N
                    displayvalue: 'Light', // NO I18N
                    style: {
                        'font-family':'LatoLight' // NO I18N
                    }
                },
                {
                    selectvalue: 'Regular', // NO I18N
                    displayvalue: 'Regular', // NO I18N
                    style: {
                        'font-family':'LatoRegular' // NO I18N
                    }
                },
                {
                    selectvalue: 'Medium', // NO I18N
                    displayvalue: 'Medium', // NO I18N
                    style: {
                        'font-family':'LatoMedium' // NO I18N
                    }
                },
                {
                    selectvalue: 'Semi Bold', // NO I18N
                    displayvalue: 'Semi Bold', // NO I18N
                    style: {
                        'font-family':'LatoSemibold' // NO I18N
                    }
                },
                {
                    selectvalue: 'Bold', // NO I18N
                    displayvalue: 'Bold', // NO I18N
                    style: {
                        'font-family':'LatoBold' // NO I18N
                    }
                },
                {
                    selectvalue: 'Extra Bold', // NO I18N
                    displayvalue: 'Extra Bold', // NO I18N
                    style: {
                        'font-family':'LatoBlack' // NO I18N
                    }
                },
                {
                    selectvalue: 'Thin Italic', // NO I18N
                    displayvalue: 'Thin Italic', // NO I18N
                    style: {
                        'font-family':'LatoThinItalic' // NO I18N
                    }
                },
                {
                    selectvalue: 'Light Italic', // NO I18N
                    displayvalue: 'Light Italic', // NO I18N
                    style: {
                        'font-family':'LatoLightItalic' // NO I18N
                    }
                },
                {
                    selectvalue: 'Regular Italic', // NO I18N
                    displayvalue: 'Regular Italic', // NO I18N
                    style: {
                        'font-family':'LatoItalic' // NO I18N
                    }
                },
                {
                    selectvalue: 'Medium Italic', // NO I18N
                    displayvalue: 'Medium Italic', // NO I18N
                    style: {
                        'font-family':'LatoMediumItalic' // NO I18N
                    }
                },
                {
                    selectvalue: 'Semi Bold Italic', // NO I18N
                    displayvalue: 'Semi Bold Italic', // NO I18N
                    style: {
                        'font-family':'LatoSemiboldItalic' // NO I18N
                    }
                },
                {
                    selectvalue: 'Bold Italic', // NO I18N
                    displayvalue: 'Bold Italic', // NO I18N
                    style: {
                        'font-family':'LatoBoldItalic' // NO I18N
                    }
                },
                {
                    selectvalue: 'Extra Bold Italic ', // NO I18N
                    displayvalue: 'Extra Bold Italic', // NO I18N
                    style: {
                        'font-family':'LatoBlackItalic' // NO I18N
                    }
                }
            ]
        });


        tools.addtool({
            toolname: 'align', // NO I18N
            container: '#aligntool', // NO I18N
            selected: '<span class="zctoolleftalignicon"></span>', // NO I18N
            defaultselected: '<span class="zctoolleftalignicon"></span>', // NO I18N
            actiontype: 'actionclasslist', // NO I18N
            actionproperty: [], // NO I18N
            availableclass: ['zc-ta-left','zc-ta-center','zc-ta-right'], //NO I18N
            basecontainer: '#aligntool', // NO I18N
            type: 'list', // NO I18N
            list: [
                {
                    class: 'zc-ta-left', // NO I18N
                    displayvalue: '<span class="zctoolleftalignicon"></span>', // NO I18N
                    i18n: 'zc.editor.text.align.left' // NO I18N
                },
                {
                    class: 'zc-ta-center', // NO I18N
                    displayvalue: '<span class="zctoolmiddlealignicon"></span>', // NO I18N
                    i18n: 'zc.editor.text.align.center' // NO I18N
                },
                {
                    class: 'zc-ta-right', // NO I18N
                    displayvalue: '<span class="zctoolrightalignicon"></span>', // NO I18N
                    i18n: 'zc.editor.text.align.right' // NO I18N
                }
            ]
        });


        tools.addtool({
            toolname: 'uppercase', // NO I18N
            container: '#uppercasetool', // NO I18N
            selected: '<span class="zctooluppercaseicon"></span>', // NO I18N
            defaultselected: '<span class="zctooluppercaseicon"></span>', // NO I18N
            actiontype: 'actionclasslist', // NO I18N
            actionproperty: [], // NO I18N
            availableclass: ['zcanvasuppercase','zcanvaslowercase'], //NO I18N
            type: 'list', // NO I18N
            revert: true,
            removeclass:'zcanvasuppercase_removed', // NO I18N
            basecontainer: '#uppercasetool',  // NO I18N
            list: [
                {
                    class: 'zcanvasuppercase', // NO I18N
                    displayvalue: '<span class="zctooluppercaseicon"></span>', // NO I18N
                    i18n: 'crm.canvas.builder.uppercase' // NO I18N
                },
                {
                    class: 'zcanvaslowercase', // NO I18N
                    displayvalue: '<span class="zctoollowercaseicon"></span>', // NO I18N
                    i18n: 'crm.canvas.builder.lowercase' // NO I18N
                }
            ],
            prepopulatehandler: prepopulatehandler
        });

        tools.addtool({
            toolname: 'uppercasetab', // NO I18N
            container: '#uppercasetooltab', // NO I18N
            selected: '<span class="zctooluppercaseicon"></span>', // NO I18N
            defaultselected: '<span class="zctooluppercaseicon"></span>', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: ['text-transform'], // NO I18N
            type: 'list', // NO I18N
            revert: true,
            basecontainer: '#uppercasetooltab',  // NO I18N
            revertobj: { style: { 'text-transform':''}}, // NO I18N
            list: [
                {
                    selectvalue: '<span class="zctooluppercaseicon"></span>', // NO I18N
                    displayvalue: '<span class="zctooluppercaseicon"></span>', // NO I18N
                    style: {
                        'text-transform':'uppercase' // NO I18N
                    },
                    i18n: 'crm.canvas.builder.uppercase' // NO I18N
                },{
                    selectvalue: '<span class="zctoollowercaseicon"></span>', // NO I18N
                    displayvalue: '<span class="zctoollowercaseicon"></span>', // NO I18N
                    style: {
                        'text-transform':'lowercase' // NO I18N
                    },
                    i18n: 'crm.canvas.builder.lowercase' // NO I18N 
                }
            ]
        });


        

        tools.addtool({
            toolname: 'italic', // NO I18N
            container: '#italictool', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zctoolsitalicicon"></span>', // NO I18N
            actiontype: 'classaction', // NO I18N
            actionclass: 'zcanvasitalic' // NO I18N
        });


        tools.addtool({
            toolname: 'linethrough', // NO I18N
            container: '#linethroughtool', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zctoollinethroughicon"></span>', // NO I18N
            actiontype: 'classaction', // NO I18N
            actionclass: 'zcanvaslinethrough', // NO I18N
            basecontainer: '#linethroughtool', // NO I18N
            removeclass: 'zcanvaslinethrough_removed', // NO I18N
            prepopulatehandler: prepopulatehandler
        });

        tools.addtool({
            toolname: 'linethroughtab', // NO I18N
            container: '#linethroughtooltab', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zctoollinethroughicon"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            actionproperty: ['text-decoration'], // NO I18N
            basecontainer: '#linethroughtooltab', // NO I18N
            actioncondition: function(element ){
                var $st = element.css('text-decoration'); // NO I18N
                return $st.indexOf('line-through') > -1 ? true : false; // NO I18N
            },
            onChange: function(flag){
                var $el = $('#linethroughtooltab');
                flag ? $el.addClass('zcanvas-tool-toggle-selected') : $el.removeClass('zcanvas-tool-toggle-selected'); // NO I18N
                var $config = {
                    actiontype: 'action' // NO I18N
                }
                var $style = {
                    style: {
                        'text-decoration' : flag ? 'line-through' : 'unset' // NO I18N
                    }
                }

                this.main.changehandler($config , $style);
            }
        });

        tools.addtool({
            toolname: 'marginslider', // NO I18N
            container: '#marginslider',  // NO I18N
            type: 'slider', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'margin', // NO I18N
            measurement: "px", //NO I18N
            i18n: 'crm.canvas.builder.margin', // NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true, // NO I18N
            sync: '#margininput' // NO I18N
        });

        tools.addtool({
            toolname: 'margininput', // NO I18N
            container: '#margininput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'margin', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.margin', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true,
            sync: '#marginslider' // NO I18N
        })

        tools.addtool({
            toolname: 'marginleftinput', // NO I18N
            container: '#marginleftinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'margin-left', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.margin', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({ // NO I18N
            toolname: 'margintopinput', // NO I18N
            container: '#margintopinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'margin-top', // NO I18N
            i18n: 'crm.canvas.builder.margin', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'marginrightinput', // NO I18N
            container: '#marginrightinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'margin-right', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.margin', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'marginbottominput', // NO I18N
            container: '#marginbottominput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'margin-bottom', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.margin', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })


        tools.addtool({
            toolname: 'marginswitch', // NO I18N
            container: '#marginswitch', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            basecontainer: '.zc-margin-tool', // NO I18N
            metadata: {
                single: ['marginslider' , 'margininput'], // NO I18N
                multiple: ['marginleftinput','marginrightinput','margintopinput','marginbottominput'] // NO I18N
            },
            multiselecthandler: switchhandler,
            handlertype: 'margin', // NO I18N
            actioncondition: function(element, config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                if(!obj.margin && (obj['margin-left'] || obj['margin-top'] || obj['margin-bottom'] || obj['margin-right'] ||
                themestyle['margin-left'] || themestyle['margin-top'] || themestyle['margin-bottom'] || themestyle['margin-right'])){ // NO I18N
                    switchhandler.bind(this)(config , false);
                    return false;
                }
                switchhandler.bind(this)(config , true);
                return true;
            },
            onChange: spacehandler
        });

        // padding

        tools.addtool({
            toolname: 'paddingslider', // NO I18N
            container: '#paddingslider',  // NO I18N
            type: 'slider', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'padding', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.padding', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true,
            sync: '#paddinginput' // NO I18N
        });

        tools.addtool({
            toolname: 'paddinginput', // NO I18N
            container: '#paddinginput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'padding', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.padding', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true,
            sync: '#paddingslider' // NO I18N
        })

        tools.addtool({
            toolname: 'paddingleftinput', // NO I18N
            container: '#paddingleftinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'padding-left', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.padding', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'paddingtopinput', // NO I18N
            container: '#paddingtopinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'padding-top', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.padding', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'paddingrightinput', // NO I18N
            container: '#paddingrightinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'padding-right', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.padding', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'paddingbottominput', // NO I18N
            container: '#paddingbottominput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'padding-bottom', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.builder.padding', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })


        tools.addtool({
            toolname: 'paddingswitch', // NO I18N
            container: '#paddingswitch', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            basecontainer: '.zc-padding-tool', // NO I18N
            metadata: {
                single: ['paddingslider' , 'paddinginput'], // NO I18N
                multiple: ['paddingleftinput','paddingrightinput','paddingtopinput','paddingbottominput'] // NO I18N
            },
            handlertype: 'padding', // NO I18N
            multiselecthandler: switchhandler,
            actioncondition: function(element , config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {};
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                var staticstyle = {};
                var staticstyleconfig = this.config.staticstyles;
                if(staticstyleconfig && staticstyleconfig[type]){
                	var len = staticstyleconfig[type].length;
                	for(var i = 0 ; i < len ; i++) {
                		var currentstaticstyle = staticstyleconfig[type][i];
                		// eslint-disable-next-line zstandard/no-duplicate-null-check
                		if( typeof obj.padding === 'undefined' && typeof themestyle.padding === 'undefined' && currentstaticstyle && currentstaticstyle.selector && element.is(currentstaticstyle.selector)){
                			staticstyle = currentstaticstyle.style.default;
                		}
                	}
                }
                if(!obj.padding && (obj['padding-left'] || obj['padding-top'] || obj['padding-bottom'] || obj['padding-right'] ||
                staticstyle['padding-left'] || staticstyle['padding-top'] || staticstyle['padding-bottom'] || staticstyle['padding-right'] || // NO I18N
                themestyle['padding-left'] || themestyle['padding-top'] || themestyle['padding-bottom'] || themestyle['padding-right'])){ // NO I18N
                    switchhandler.bind(this)(config , false);
                    return false;
                }
                switchhandler.bind(this)(config , true);
                return true;
            },
            onChange: spacehandler
        });

        // Radius


         tools.addtool({
            toolname: 'radiusslider', // NO I18N
            container: '#radiusslider',  // NO I18N
            type: 'slider', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-radius', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true,
            sync: '#radiusinput' // NO I18N
        });

        tools.addtool({
            toolname: 'radiusinput', // NO I18N
            container: '#radiusinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-radius', // NO I18N
            measurement: "px", //NO I18N
            min: '0',
            max: '99',
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true,
            sync: '#radiusslider' // NO I18N
        })

        tools.addtool({
            toolname: 'radiusleftinput', // NO I18N
            container: '#radiusleftinput', // NO I18N // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-top-left-radius', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'radiustopinput', // NO I18N
            container: '#radiustopinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-top-right-radius', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'radiusrightinput', // NO I18N
            container: '#radiusrightinput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-bottom-right-radius', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'radiusbottominput', // NO I18N
            container: '#radiusbottominput', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-bottom-left-radius', // NO I18N
            measurement: "px", //NO I18N
            min: '0', // NO I18N
            max: '99', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 500,
            mousewheel: true
        })


        tools.addtool({
            toolname: 'radiusswitch', // NO I18N
            container: '#radiusswitch', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            basecontainer: '.zc-radius-tool', // NO I18N
            metadata: {
                single: ['radiusslider' , 'radiusinput'], // NO I18N
                multiple: ['radiusleftinput','radiusrightinput','radiustopinput','radiusbottominput'] // NO I18N
            },
            multiselecthandler: switchhandler,
            handlertype: 'radius', // NO I18N
            actioncondition: function(element , config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var objh = this.getstylebyselector(selector).default || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                if(!obj['border-radius'] && (obj['border-top-left-radius'] || obj['border-top-right-radius'] || obj['border-bottom-left-radius'] || obj['border-bottom-right-radius'] || // NO I18N
                objh['border-top-left-radius'] || objh['border-top-right-radius'] || objh['border-bottom-left-radius'] || objh['border-bottom-right-radius'] || // NO I18N
                themestyle['border-top-left-radius'] || themestyle['border-top-right-radius'] || themestyle['border-bottom-left-radius'] || themestyle['border-bottom-right-radius'])){ // NO I18N
                    switchhandler.bind(this)(config , false);
                    return false;
                }
                switchhandler.bind(this)(config , true);
                return true;
            },
            onChange: spacehandler
        });


        // box shadow

        tools.addtool({
            toolname: 'boxshadow', // NO I18N
            container: '#shadowtool', // NO I18N
            type: 'combinations', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'box-shadow', // NO I18N
            basecontainer: '.zc-shadow-tool', // NO I18N
            tools: [
                {
                    toolname: 'shadowX', // NO I18N
                    container: '#shadowx', // NO I18N
                    type: 'input', // NO I18N
                    min: '-20', // NO I18N
                    max: '20', // NO I18N
                    hasnegative: true,
                    i18n: 'crm.canvas.builder.x', // NO I18N
                    actualmin:-20,
                    actualmax:20,
                    selected: '0', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'box-shadowx', // NO I18N
                    measurement: "px", //NO I18N
                    mousewheel: true,
                    parent: 'boxshadow', // NO I18N
                    preprocess: shadowprocess
                },
                {
                    toolname: 'shadowY', // NO I18N
                    container: '#shadowy', // NO I18N
                    i18n: 'crm.canvas.builder.y', // NO I18N
                    type: 'input', // NO I18N
                    min: '-20', // NO I18N
                    max: '20', // NO I18N
                    hasnegative: true,
                    actualmin:-20,
                    actualmax:20,
                    selected: '0', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'box-shadowy', // NO I18N
                    measurement: "px", //NO I18N
                    mousewheel: true,
                    parent: 'boxshadow', // NO I18N
                    preprocess: shadowprocess
                },
                {
                    toolname: 'shadowblur', // NO I18N
                    container: '#shadowblur', // NO I18N
                    type: 'input', // NO I18N
                    min: '-20', // NO I18N
                    max: '20', // NO I18N
                    hasnegative: true,
                    i18n: 'crm.canvas.builder.blur', // NO I18N
                    actualmin:-20,
                    actualmax:20,
                    selected: '0', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'box-shadowblur', // NO I18N
                    measurement: "px", //NO I18N
                    mousewheel: true,
                    parent: 'boxshadow', // NO I18N
                    preprocess: shadowprocess
                },
                {
                    toolname: 'shadowspread', // NO I18N
                    container: '#shadowspread', // NO I18N
                    type: 'input', // NO I18N
                    min: '-20', // NO I18N
                    max: '20', // NO I18N
                    hasnegative: true,
                    i18n: 'crm.canvas.builder.spread', // NO I18N
                    actualmin:-20,
                    actualmax:20,
                    selected: '0', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'box-shadowspread', // NO I18N
                    measurement: "px", //NO I18N
                    mousewheel: true,
                    parent: 'boxshadow', // NO I18N
                    preprocess: shadowprocess
                },
                {
                    toolname: 'shdowcolor',  // NO I18N
                    container: '#shdowcolor', // NO I18N
                    type: 'colorpicker', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'box-shadowcolor', // NO I18N
                    el: 'elementshadowcolor', // NO I18N
                    parent: 'boxshadow', // NO I18N
                    preprocess: shadowprocess
                }
            ],
            population: function(obj){
                var value = obj['box-shadow'] || ''; // NO I18N
                var rawcolor = value.match(/(rgba?.*?\))/g);
                // eslint-disable-next-line no-useless-escape
                var color = rawcolor && rawcolor.length ? rawcolor[0].match(/[\d\.]+/g) : [];
                color = color && color.length ? color : [0,0,0,.12];
                value = value.replace(/(rgba?.*?\))/g,'').trim();
                var prevval = value && value !== 'none' ? value.split(" ") : [0,0,0,0];
                return {
                    'box-shadowx': prevval[0], // NO I18N
                    'box-shadowy': prevval[1], // NO I18N
                    'box-shadowblur': prevval[2], // NO I18N
                    'box-shadowspread': prevval[3], // NO I18N
                    'box-shadowcolor': color // NO I18N
                }
            }
        })


        // Advanced background


        tools.addtool({
            toolname: 'bgadvanced', // NO I18N
            container: '#bgadvanced', // NO I18N
            type: 'combinations', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'background-image', // NO I18N
            population: function(obj){
                var value = obj['background-image'] || ''; // NO I18N
                if(canvasObjUtils._.isEmpty(value)){
                    value = '';
                }
                $('.zc-bg-tool').data('zcprev', {'background-image': value}); // NO I18N
                var urlregex = /url\((.*?)\)/;
                var url = value.match(urlregex);
                var imageurl = '';
                var degree = 0;
                var gradient = '';
                if(url && url.length){
                    imageurl = url[1];
                    value = value.replace(url[0],'').trim();
                    if(value[0] === ','){
                        value = value.substring(1,value.length).trim();
                    }
                }

                if(value){
                    gradient = value.replace(/^(linear-gradient)\(/,'').replace(/\)$/,'').trim();
                    if(gradient.length){
                        var result;
                        result = gradient.split( /,(?![^(]*\))(?![^"']*["'](?:[^"']*["'][^"']*["'])*[^"']*$)/ );
                        if(result && result.length){
                            degree = result[0];
                            result.splice(0,1);
                            gradient = result;
                        }
                    }
                    
                }

                

                return {
                    bgurl: imageurl,
                    bgdegree: parseInt(degree),
                    bggradient: gradient
                }
            },
            tools: [ 
                {
                    toolname: 'bgimage', // NO I18N
                    container: '#bgimage', // NO I18N
                    datacontainer: '.zc-bg-tool', // NO I18N
                    type: 'textarea', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'bgurl', // NO I18N
                    parent: 'bgadvanced', // NO I18N
                    preprocess: bgprocess,
                    sanitizeinput: function(value , callback){
                        var img = new Image();
                        var inst = this;
                        img.onload = function(){
                        	if(value && (value.indexOf('data:image') > -1 || value.length > 6000)){
                        		inst.main.config.errorcallback && inst.main.config.errorcallback();
                        		return;
                        	}
                            callback.bind(inst)(inst.result);
                        }
                        img.onerror = function(){
                            inst.main.config.errorcallback && inst.main.config.errorcallback();
                        }
                        img.src = value;
                    }
                },
                {
                    toolname: 'bgdegree', // NO I18N
                    container: '#bgdegree', // NO I18N
                    datacontainer: '.zc-bg-tool', // NO I18N
                    type: 'degree', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'bgdegree', // NO I18N
                    parent: 'bgadvanced', // NO I18N
                    preprocess: bgprocess
                },
                {
                    toolname: 'bggradient', // NO I18N
                    container: '#bggradient', // NO I18N
                    datacontainer: '.zc-bg-tool', // NO I18N
                    type: 'gradient', // NO I18N
                    actiontype: 'action', // NO I18N
                    actionproperty: 'bggradient', // NO I18N
                    parent: 'bgadvanced', // NO I18N
                    preprocess: bgprocess
                }
            ]
        });


        // Advanced Background switch

        tools.addtool({
            toolname: 'bgimagecontd', // NO I18N
            container: '#bgimagecontd', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            metadata: {
                el: '#bgimagetool' // NO I18N
            },
            actioncondition: function(element , config){
                var el = $(config.metadata.el);
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                if(obj['background-image']){
                    var value = obj['background-image'] || ''; // NO I18N
                    var urlregex = /url\((.*?)\)/;
                    var url = value.match(urlregex);
                    if(url && url.length){
                        el.show();
                        return true;
                    }
                    el.hide();
                    return false;
                }
            },
            onChange: function(flag){
                var el = $(this.config.metadata.el);
                var selector = this.main.getSelectorByElement(this.main.selectedfields , 'default'); // NO I18N
                var styleselector = this.main.getSelectorByElement(this.main.selectedfields);
                var obj = this.main.getstylebyselector(selector)[this.main.state] || {};
                if(flag){
                    el.show();
                }else{
                    el.hide();
                    el.find('.zcanvastoolinput').val(''); // NO I18N
                    obj['background-size'] && delete obj['background-size']; // NO I18N
                    obj['background-repeat'] && delete obj['background-repeat']; // NO I18N
                    if(obj['background-image']){ // NO I18N
                        var value = obj['background-image'] || ''; // NO I18N
                        var urlregex = /url\((.*?)\)/;
                        var url = value.match(urlregex);
                        if(url && url.length){
                            value = value.replace(url[0],'').trim();
                            if(value[0] === ','){
                                value = value.substring(1,value.length).trim();
                            }
                            obj['background-image'] = value; // NO I18N
                        }
                        this.main.updatestyle(this.config , styleselector , obj);
                    }
                }
            }
        });

        tools.addtool({
            toolname: 'bggradcontd', // NO I18N
            container: '#bggradcontd', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            basecontainer: '.zc-bg-adv-tool', // NO I18N
            metadata: {
                el: '#bggradtool', // NO I18N
                gradient: '#bggradient', // NO I18N
                degree: '#bgdegree' // NO I18N
            },
            actioncondition: function(element , config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var el = $(config.metadata.el);
                var themestyle = getthemestyle.bind(this)(element);
                if(obj['background-image'] || themestyle['background-image']){
                    var value = obj['background-image'] || themestyle['background-image'] || ''; // NO I18N
                    if(value && value.indexOf('linear-gradient') > -1){ // NO I18N
                        el.show();
                        return true;
                    }
                    el.hide();
                    return false;
                }
            },
            onChange: function(flag){
                var el = $(this.config.metadata.el);
                var selector = this.main.getSelectorByElement(this.main.selectedfields , 'default'); // NO I18N
                var styleselector = this.main.getSelectorByElement(this.main.selectedfields); // NO I18N
                var obj = this.main.getstylebyselector(selector)[this.main.state] || {};
                var themestyle = getthemestyle.bind(this.main)(this.main.selectedfields);
                var inst = $(this.config.metadata.gradient).data('zgradient');
                if(flag){
                    // Prefill here
                    var dinst = $(this.config.metadata.degree).data('zcdegree');
                    var color1 = obj['background-color'] ? obj['background-color'] + ' 0%' : 'rgba(255,255,255,1) 0%'; // NO I18N
                    var color2 = 'rgba(255,255,255,1) 100%'; // NO I18N
                    inst.setvalue([color1 , color2]);
                    dinst.setvalue(120);
                    el.show();
                }else{
                    el.hide();
                    if(obj['background-image'] || themestyle['background-image']){ // NO I18N
                        var value = obj['background-image'] || themestyle['background-image'] || ''; // NO I18N
                        if(value){
                            var urlregex = /url\((.*?)\)/;
                            var url = value.match(urlregex);
                            var imageurl = '';
                            if(url && url.length){
                                imageurl = url[0];
                            }
                            obj['background-image'] = imageurl ? imageurl :  themestyle['background-image'] ? 'none' : '' ; // NO I18N
                            if(!obj['background-image'] || obj['background-image'] === 'none'){
                                inst.setvalue([]);
                            }
                        }
                        this.main.updatestyle(this.config , styleselector , obj);
                    }
                }
            }
        });


        tools.addtool({
            toolname: 'bgimagecover', // NO I18N
            container: '#imagesize', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'background-size', // NO I18N
            type: 'list', // NO I18N
            list: [
                {
                    selectvalue: 'Contain', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.contain'), // NO I18N
                    style: {
                        'background-size':'contain' // NO I18N
                    }
                },
                {
                    selectvalue: 'Original', // NO I18N
                    displayvalue: I18n.getMsg('zc.editor.original'), // NO I18N
                    style: {
                        'background-size':'auto' // NO I18N
                    }
                },
                {
                    selectvalue: 'Cover', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.cover'), // NO I18N
                    style: {
                        'background-size':'cover' // NO I18N
                    }
                }
                
            ]
        });

        tools.addtool({
            toolname: 'bgimagerepeat', // NO I18N
            container: '#imagerepeat', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'background-repeat', // NO I18N
            type: 'list', // NO I18N
            list: [
                {
                    selectvalue: 'No Repeat', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.norepeat'), // NO I18N
                    style: {
                        'background-repeat':'no-repeat' // NO I18N
                    }
                },
                {
                    selectvalue: 'X', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.x'), // NO I18N
                    style: {
                        'background-repeat':'repeat-x' // NO I18N
                    }
                },
                {
                    selectvalue: 'Y', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.y'), // NO I18N
                    style: {
                        'background-repeat':'repeat-y' // NO I18N
                    }
                },
                {
                    selectvalue: 'Both', // NO I18N
                    displayvalue: I18n.getMsg('Both'), // NO I18N
                    style: {
                        'background-repeat':'repeat' // NO I18N
                    }
                }
                
            ]
        });


       // Border tools

       tools.addtool({
        toolname: 'border', // NO I18N
        container: '#bordertemp', // NO I18N
        type: 'combinations', // NO I18N
        actiontype: 'action', // NO I18N
        actionproperty: 'border', // NO I18N
        basecontainer: '.zc-border-tool', // NO I18N
        tools: [
            
            {
                toolname: 'bstyle', // NO I18N
                container: '#bstyle', // NO I18N
                type: 'select', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bstyle', // NO I18N
                defaultselected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                selected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                list: [
                    {
                        style: { 'bstyle': 'solid' }, //NO I18N
                        displayvalue: '<span class="zctoolsolidbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'bstyle': 'dashed' }, //NO I18N
                        displayvalue: '<span class="zctooldashedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'bstyle': 'dotted' }, //NO I18N
                        displayvalue: '<span class="zctooldottedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'bstyle': 'double' }, //NO I18N
                        displayvalue: '<span class="zctooldoublebordericon"></span>' // NO I18N
                    }
                ],
                parent: 'border', // NO I18N
                preprocess: borderprocess
            },
            {
                toolname: 'bcolor',  // NO I18N
                container: '#bcolor', // NO I18N
                type: 'colorpicker', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bcolor', // NO I18N
                el: 'elementbcolor', // NO I18N
                preprocess: borderprocess,
                parent: 'border', // NO I18N
                sync: '#bhex' // NO I18N
            },
            {
                toolname: 'bhexcolor',  // NO I18N
                container: '#bhex', // NO I18N
                type: 'hexinput', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bcolor', // NO I18N
                preprocess: borderprocess, // NO I18N
                parent: 'border', // NO I18N
                sync: '#bcolor', // NO I18N
                noprocess: true
            },
            
            {
                toolname: 'bwidth', // NO I18N
                container: '#bwidth', // NO I18N
                type: 'input', // NO I18N
                min: '0',
                max: '20',
                i18n: 'zc.editor.border', // NO I18N
                actualmin:0,
                actualmax:100,
                selected: '0', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bwidth', // NO I18N
                measurement: "px", //NO I18N
                mousewheel: true,
                parent: 'border', // NO I18N
                preprocess: borderprocess,
                sync: '#bslide' // NO I18N
            },
            {
                toolname: 'bslide', // NO I18N
                container: '#bslide', // NO I18N
                type: 'slider', // NO I18N
                min: '0',
                max: '20',
                i18n: 'zc.editor.border', // NO I18N
                actualmin:0,
                actualmax:100,
                selected: '0', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bwidth', // NO I18N
                measurement: "px", //NO I18N
                mousewheel: true,
                parent: 'border', // NO I18N
                preprocess: borderprocess,
                sync: '#bwidth', // NO I18N
                noprocess: true
            }
        ],
        population: function(obj){
            var value = obj.border || ''; // NO I18N
            var rawcolor = value.match(/(rgba?.*?\))/g);
            var color = rawcolor && rawcolor.length ? rawcolor[0] : 'rgba(0,0,0,1)';
            var prevval = value && value !== 'none' ? value.split(" ") : [0,'solid', 'rgba(0,0,0,1)'] // NO I18N
            return {
                bwidth: prevval[0], bstyle: prevval[1] , bcolor: color
            }
        }
    });

    tools.addtool({
        toolname: 'bordert', // NO I18N
        container: '#bordertoptemp', // NO I18N
        type: 'combinations', // NO I18N
        actiontype: 'action', // NO I18N
        actionproperty: 'border-top', // NO I18N
        tools: [
            
            {
                toolname: 'btstyle', // NO I18N
                container: '#btstyle', // NO I18N
                type: 'select', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'btstyle', // NO I18N
                defaultselected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                selected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                list: [
                    {
                        style: { 'btstyle': 'solid' }, //NO I18N
                        displayvalue: '<span class="zctoolsolidbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'btstyle': 'dashed' }, //NO I18N
                        displayvalue: '<span class="zctooldashedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'btstyle': 'dotted' }, //NO I18N
                        displayvalue: '<span class="zctooldottedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'btstyle': 'double' }, //NO I18N
                        displayvalue: '<span class="zctooldoublebordericon"></span>' // NO I18N
                    }
                ],
                parent: 'bordert', // NO I18N
                preprocess: bordertprocess
            },
            {
                toolname: 'btcolor',  // NO I18N
                container: '#btcolor', // NO I18N
                type: 'colorpicker', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'btcolor', // NO I18N
                el: 'elementbtcolor', // NO I18N
                preprocess: bordertprocess,
                parent: 'bordert', // NO I18N
                sync: '#bthex' // NO I18N
            },
            {
                toolname: 'bthexcolor',  // NO I18N
                container: '#bthex', // NO I18N
                type: 'hexinput', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'btcolor', // NO I18N
                parent: 'bordert', // NO I18N
                preprocess: bordertprocess, // NO I18N
                sync: '#btcolor', // NO I18N
                noprocess: true
            },
            {
                toolname: 'btwidth', // NO I18N
                container: '#btwidth', // NO I18N
                type: 'input', // NO I18N
                min: '0', // NO I18N
                max: '20', // NO I18N
                i18n: 'zc.editor.border', // NO I18N
                actualmin:0,
                actualmax:100,
                selected: '0', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'btwidth', // NO I18N
                measurement: "px", //NO I18N
                mousewheel: true,
                preprocess: bordertprocess,
                parent: 'bordert', // NO I18N
                meta: { class: 'canvas-border-top' }, // NO I18N
                onfocus: bordersideswitch
            }
        ],
        population: function(obj){
            var value = obj['border-top'] || ''; // NO I18N
            var rawcolor = value.match(/(rgba?.*?\))/g);
            var color = rawcolor && rawcolor.length ? rawcolor[0] : 'rgba(0,0,0,1)';
            var prevval = value && value !== 'none' ? value.split(" ") : [0,'solid', 'rgba(0,0,0,1)'] // NO I18N
            return {
                btwidth: prevval[0], btstyle: prevval[1] , btcolor: color
            }
        }
    });

    tools.addtool({
        toolname: 'borderr', // NO I18N
        container: '#borderrighttemp', // NO I18N
        type: 'combinations', // NO I18N
        actiontype: 'action', // NO I18N
        actionproperty: 'border-right', // NO I18N
        tools: [
           
            {
                toolname: 'brstyle', // NO I18N
                container: '#brstyle', // NO I18N
                type: 'select', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'brstyle', // NO I18N
                defaultselected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                selected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                list: [
                    {
                        style: { 'brstyle': 'solid' }, //NO I18N
                        displayvalue: '<span class="zctoolsolidbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'brstyle': 'dashed' }, //NO I18N
                        displayvalue: '<span class="zctooldashedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'brstyle': 'dotted' }, //NO I18N
                        displayvalue: '<span class="zctooldottedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'brstyle': 'double' }, //NO I18N
                        displayvalue: '<span class="zctooldoublebordericon"></span>' // NO I18N
                    }
                ],
                parent: 'borderr', // NO I18N
                preprocess: borderrprocess
            },
            {
                toolname: 'brcolor',  // NO I18N
                container: '#brcolor', // NO I18N
                type: 'colorpicker', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'brcolor', // NO I18N
                el: 'elementbrcolor', // NO I18N
                parent: 'borderr', // NO I18N
                preprocess: borderrprocess,
                sync: '#brhex' // NO I18N
            },
            {
                toolname: 'brhexcolor',  // NO I18N
                container: '#brhex', // NO I18N
                type: 'hexinput', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'brcolor', // NO I18N
                parent: 'borderr', // NO I18N
                preprocess: borderrprocess, // NO I18N
                sync: '#brcolor', // NO I18N
                noprocess: true
            }, 
            {
                toolname: 'brwidth', // NO I18N
                container: '#brwidth', // NO I18N
                type: 'input', // NO I18N
                min: '0', // NO I18N
                max: '20', // NO I18N
                i18n: 'zc.editor.border', // NO I18N
                actualmin:0,
                actualmax:100,
                selected: '0', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'brwidth', // NO I18N
                measurement: "px", //NO I18N
                mousewheel: true,
                parent: 'borderr', // NO I18N
                preprocess: borderrprocess,
                meta: { class: 'canvas-border-right' }, // NO I18N
                onfocus: bordersideswitch
            }
        ],
        population: function(obj){
            var value = obj['border-right'] || ''; // NO I18N
            var rawcolor = value.match(/(rgba?.*?\))/g);
            var color = rawcolor && rawcolor.length ? rawcolor[0] : 'rgba(0,0,0,1)';
            var prevval = value && value !== 'none' ? value.split(" ") : [0,'solid', 'rgba(0,0,0,1)'] // NO I18N
            return {
                brwidth: prevval[0], brstyle: prevval[1] , brcolor: color
            }
        }
    });

    tools.addtool({
        toolname: 'borderb', // NO I18N
        container: '#borderbottomtemp', // NO I18N
        type: 'combinations', // NO I18N
        actiontype: 'action', // NO I18N
        actionproperty: 'border-bottom', // NO I18N
        tools: [
            
            {
                toolname: 'bbstyle', // NO I18N
                container: '#bbstyle', // NO I18N
                type: 'select', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bbstyle', // NO I18N
                defaultselected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                selected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                list: [
                    {
                        style: { 'bbstyle': 'solid' }, //NO I18N
                        displayvalue: '<span class="zctoolsolidbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'bbstyle': 'dashed' }, //NO I18N
                        displayvalue: '<span class="zctooldashedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'bbstyle': 'dotted' }, //NO I18N
                        displayvalue: '<span class="zctooldottedbordericon"></span>' // NO I18N
                    },
                    {
                        style: { 'bbstyle': 'double' }, //NO I18N
                        displayvalue: '<span class="zctooldoublebordericon"></span>' // NO I18N
                    }
                ],
                parent: 'borderb', // NO I18N
                preprocess: borderbprocess
            },
            {
                toolname: 'bbcolor',  // NO I18N
                container: '#bbcolor', // NO I18N
                type: 'colorpicker', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bbcolor', // NO I18N
                el: 'elementbbcolor', // NO I18N
                parent: 'borderb', // NO I18N
                preprocess: borderbprocess,
                sync: '#bbhex' // NO I18N
            },
            {
                toolname: 'bbhexcolor',  // NO I18N
                container: '#bbhex', // NO I18N
                type: 'hexinput', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bbcolor', // NO I18N
                preprocess: borderbprocess, // NO I18N
                parent: 'borderb', // NO I18N
                sync: '#bbcolor', // NO I18N
                noprocess: true
            },
            {
                toolname: 'bbwidth', // NO I18N
                container: '#bbwidth', // NO I18N
                type: 'input', // NO I18N
                min: '0', // NO I18N
                max: '20', // NO I18N
                i18n: 'zc.editor.border', // NO I18N
                actualmin:0,
                actualmax:100,
                selected: '0', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'bbwidth', // NO I18N
                measurement: "px", //NO I18N
                mousewheel: true,
                meta: { class: 'canvas-border-bottom' }, // NO I18N
                parent: 'borderb', // NO I18N
                preprocess: borderbprocess,
                onfocus: bordersideswitch
            }
        ],
        population: function(obj){
            var value = obj['border-bottom'] || ''; // NO I18N 
            var rawcolor = value.match(/(rgba?.*?\))/g);
            var color = rawcolor && rawcolor.length ? rawcolor[0] : 'rgba(0,0,0,1)';
            var prevval = value && value !== 'none' ? value.split(" ") : [0,'solid', 'rgba(0,0,0,1)'] // NO I18N
            return {
                bbwidth: prevval[0], bbstyle: prevval[1] , bbcolor: color
            }
        }
    });

    tools.addtool({
        toolname: 'borderl', // NO I18N
        container: '#borderlefttemp', // NO I18N
        type: 'combinations', // NO I18N
        actiontype: 'action', // NO I18N
        actionproperty: 'border-left', // NO I18N
        tools: [
            
            {
                toolname: 'blstyle', // NO I18N
                container: '#blstyle', // NO I18N
                type: 'select', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'blstyle', // NO I18N
                defaultselected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                selected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
                list: [
                    {
                        style: { 'blstyle': 'solid' }, //NO I18N
                        displayvalue: '<span class="zctoolsolidbordericon"></span>'
                    },
                    {
                        style: { 'blstyle': 'dashed' }, //NO I18N
                        displayvalue: '<span class="zctooldashedbordericon"></span>'
                    },
                    {
                        style: { 'blstyle': 'dotted' }, //NO I18N
                        displayvalue: '<span class="zctooldottedbordericon"></span>'
                    },
                    {
                        style: { 'blstyle': 'double' }, //NO I18N
                        displayvalue: '<span class="zctooldoublebordericon"></span>'
                    }
                ],
                preprocess: borderlprocess,
                parent: 'borderl' // NO I18N
            },
            {
                toolname: 'blcolor',  // NO I18N
                container: '#blcolor', // NO I18N
                type: 'colorpicker', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'blcolor', // NO I18N
                el: 'elementblcolor', // NO I18N
                preprocess: borderlprocess,
                parent: 'borderl', // NO I18N
                sync: '#blhex' // NO I18N
            },
            {
                toolname: 'blhexcolor',  // NO I18N
                container: '#blhex', // NO I18N
                type: 'hexinput', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'blcolor', // NO I18N
                preprocess: borderlprocess, // NO I18N
                parent: 'borderl', // NO I18N
                sync: '#blcolor', // NO I18N
                noprocess: true
            },
            {
                toolname: 'blwidth', // NO I18N
                container: '#blwidth', // NO I18N
                type: 'input', // NO I18N
                min: '0', // NO I18N
                max: '20', // NO I18N
                i18n: 'zc.editor.border', // NO I18N
                actualmin:0,
                actualmax:100,
                selected: '0', // NO I18N
                actiontype: 'action', // NO I18N
                actionproperty: 'blwidth', // NO I18N
                measurement: "px", //NO I18N
                mousewheel: true,
                meta: { class: 'canvas-border-left' }, // NO I18N
                preprocess: borderlprocess,
                parent: 'borderl', // NO I18N
                onfocus: bordersideswitch
            }
        ],
        population: function(obj){
            var value = obj['border-left'] || ''; // NO I18N 
            var rawcolor = value.match(/(rgba?.*?\))/g);
            var color = rawcolor && rawcolor.length ? rawcolor[0] : 'rgba(0,0,0,1)';
            var prevval = value && value !== 'none' ? value.split(" ") : [0,'solid', 'rgba(0,0,0,1)']   // NO I18N
            return {
                blwidth: prevval[0], blstyle: prevval[1] , blcolor: color
            }
        }
    });

    tools.addtool({
        toolname: 'borderswitch', // NO I18N
        container: '#borderswitch', // NO I18N
        type: 'toggle', // NO I18N
        displayvalue: '<span class="zc_checkbox"></span>', // NO I18N
        actiontype: 'condition', // NO I18N
        basecontainer: '.zc-border-tool', // NO I18N
        metadata: {
            single: ['border'], // NO I18N
            multiple: ['borderl','bordert','borderb','borderr'] // NO I18N
        },
        handlertype: 'border', // NO I18N
        actioncondition: function(element){
            var selector = this.getSelectorByElement(element, 'default'); // NO I18N
            var obj = this.getstylebyselector(selector)[this.state] || {};
            var $single = $('.canvas-box-single');
            var $multi =  $('.canvas-tool-multiple')
            var zctype = this.config.gettype(element);
            var type = zctype.zctype;
            var themestyle = {}
            if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                if(this.config.theme.currenttheme[type][this.state]){
                    themestyle = this.config.theme.currenttheme[type][this.state]
                }else{
                    themestyle = this.config.theme.currenttheme[type].default;
                }
            }
            if( !obj.border && (obj['border-left'] || obj['border-top'] || obj['border-bottom'] || obj['border-right'] ||  // NO I18N
                themestyle['border-left'] || themestyle['border-top'] || themestyle['border-bottom'] || themestyle['border-right']) ) {// NO I18N
                $single.addClass('zc-sep-hide');
                $multi.removeClass('zc-sep-hide');
                return false;
            }
            $single.removeClass('zc-sep-hide');
            $multi.addClass('zc-sep-hide');
            return true;
        },
        onChange: borderhandler
    });




        // Radius Percentage


          tools.addtool({
            toolname: 'radiussliderp', // NO I18N
            container: '#radiussliderp',  // NO I18N
            type: 'slider', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-radius', // NO I18N
            measurement: "%", //NO I18N
            min: '0', // NO I18N
            max: '50', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 50,
            mousewheel: true,
            sync: '#radiusinputp' // NO I18N
        });

        tools.addtool({
            toolname: 'radiusinputp', // NO I18N
            container: '#radiusinputp', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-radius', // NO I18N
            measurement: "%", //NO I18N
            min: '0',
            max: '50',
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 50,
            mousewheel: true,
            sync: '#radiussliderp' // NO I18N
        })

        tools.addtool({
            toolname: 'radiusleftinputp', // NO I18N
            container: '#radiusleftinputp', // NO I18N // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-top-left-radius', // NO I18N
            measurement: "%", //NO I18N
            min: '0', // NO I18N
            max: '50', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 50,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'radiustopinputp', // NO I18N
            container: '#radiustopinputp', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-top-right-radius', // NO I18N
            measurement: "%", //NO I18N
            min: '0', // NO I18N
            max: '50', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 50,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'radiusrightinputp', // NO I18N
            container: '#radiusrightinputp', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-bottom-right-radius', // NO I18N
            measurement: "%", //NO I18N
            min: '0', // NO I18N
            max: '50', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 50,
            mousewheel: true
        })

        tools.addtool({
            toolname: 'radiusbottominputp', // NO I18N
            container: '#radiusbottominputp', // NO I18N
            type: 'input', // NO I18N
            selected: '0', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-bottom-left-radius', // NO I18N
            measurement: "%", //NO I18N
            min: '0', // NO I18N
            max: '50', // NO I18N
            i18n: 'crm.canvas.editor.radius', // NO I18N
            actualmin: 0,
            actualmax: 50,
            mousewheel: true
        })


        tools.addtool({
            toolname: 'radiusswitchp', // NO I18N
            container: '#radiusswitchp', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            basecontainer: '.zc-radiusp-tool', // NO I18N
            metadata: {
                single: ['radiussliderp' , 'radiusinputp'], // NO I18N
                multiple: ['radiusleftinputp','radiusrightinputp','radiustopinputp','radiusbottominputp'] // NO I18N
            },
            multiselecthandler: switchhandler,
            handlertype: 'radiusp', // NO I18N
            actioncondition: function(element , config ){
                var selector = this.getSelectorByElement(element, 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var objh = this.getstylebyselector(selector).default || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                if(!obj['border-radius'] && (obj['border-top-left-radius'] || obj['border-top-right-radius'] || obj['border-bottom-left-radius'] || obj['border-bottom-right-radius'] || // NO I18N
                objh['border-top-left-radius'] || objh['border-top-right-radius'] || objh['border-bottom-left-radius'] || objh['border-bottom-right-radius'] || // NO I18N
                themestyle['border-top-left-radius'] || themestyle['border-top-right-radius'] || themestyle['border-bottom-left-radius'] || themestyle['border-bottom-right-radius'])){ // NO I18N
                    switchhandler.bind(this)(config , false);
                    return false;
                }
                switchhandler.bind(this)(config , true);
                return true;
            },
            onChange: spacehandler
        });


        // Line tool

        tools.addtool({
            toolname: 'thickslide', // NO I18N
            container: '#thickslide', // NO I18N
            type: 'slider', // NO I18N
            min: '1',
            max: '20',
            i18n: 'crm.canvas.builder.thickness', // NO I18N
            actualmin:0,
            actualmax:100,
            selected: '1', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-width', // NO I18N
            measurement: "px", //NO I18N
            mousewheel: true,
            sync: '#thickwidth', // NO I18N
            basecontainer: '.zc-thickness-tool', // NO I18N
            noimportant: true
        });

        tools.addtool({
            toolname: 'thickwidth', // NO I18N
            container: '#thickwidth', // NO I18N
            type: 'input', // NO I18N
            min: '1',
            max: '20',
            i18n: 'crm.canvas.builder.thickness', // NO I18N
            actualmin:0,
            actualmax:100,
            selected: '1', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-width', // NO I18N
            measurement: "px", //NO I18N
            mousewheel: true,
            sync: '#thickslide', // NO I18N
            noimportant: true
        });

        tools.addtool({
            toolname: 'thickstyle', // NO I18N
            container: '#thickstyle', // NO I18N
            type: 'select', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-style', // NO I18N
            defaultselected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
            selected: '<span class="zctoolsolidbordericon"></span>', // NO I18N
            noimportant: true,
            list: [
                {
                    style: { 'border-style': 'solid' }, //NO I18N
                    displayvalue: '<span class="zctoolsolidbordericon"></span>' // NO I18N
                },
                {
                    style: { 'border-style': 'dashed' }, //NO I18N
                    displayvalue: '<span class="zctooldashedbordericon"></span>' // NO I18N
                },
                {
                    style: { 'border-style': 'dotted' }, //NO I18N
                    displayvalue: '<span class="zctooldottedbordericon"></span>' // NO I18N
                },
                {
                    style: { 'border-style': 'double' }, //NO I18N
                    displayvalue: '<span class="zctooldoublebordericon"></span>' // NO I18N
                }
            ]
        });

        tools.addtool({
            toolname: 'thickcolor',  // NO I18N
            container: '#thickcolor', // NO I18N
            type: 'colorpicker', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-color', // NO I18N
            el: 'elementtcolor', // NO I18N
            sync: '#thickhex', // NO I18N
            noimportant: true
        });

        tools.addtool({
            toolname: 'thickhex',  // NO I18N
            container: '#thickhex', // NO I18N
            type: 'hexinput', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'border-color', // NO I18N
            sync: '#thickcolor', // NO I18N
            noimportant: true
        })



        tools.addtool({
            toolname: 'linemodeswitch', // NO I18N
            container: '#linemodeswitch', // NO I18N
            selected: '', // NO I18N
            defaultselected: '', // NO I18N
            actiontype: 'actionclasslist', // NO I18N
            actionproperty: [], // NO I18N
            availableclass: ['zc-hr-line','zc-vr-line'], //NO I18N
            type: 'list', // NO I18N
            list: [
                {
                    class: 'zc-hr-line', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.horizontal') // NO I18N
                },
                {
                    class: 'zc-vr-line', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.vertical') // NO I18N
                }
            ],
            preprocess: function(component , result, undoarray, undo){
                if(undo.previous && undo.previous.class !== undo.current.class ){
                    var $parent = component.parent();
                    var parentrect = { width : $parent.width() , height : $parent.height() };
                    var prerect = component.position();
                    prerect.width = component.width();
                    prerect.height = component.height();
    
                    if(result.class === 'zc-vr-line'){ // NO I18N
                        component.css('transform','rotate(90deg)'); // NO I18N
                        // eslint-disable-next-line webperf/layout-thrashing
                        var linerect = component.position();
                        // eslint-disable-next-line webperf/layout-thrashing
                        linerect.width = component.width();
                        // eslint-disable-next-line webperf/layout-thrashing
                        linerect.height = component.height();
        
                        if(linerect.top < 0) {
                            linerect.top = 0;
                        }
        
                        if(linerect.height > parentrect.height) {
                            linerect.height = parentrect.height - linerect.top;
                        }
                    }else if(result.class === 'zc-hr-line'){ // NO I18N
                        component.css('transform','rotate(90deg)'); // NO I18N
                        // eslint-disable-next-line webperf/layout-thrashing
                        var linerect = component.position();
                        // eslint-disable-next-line webperf/layout-thrashing
                        linerect.width = component.width();
                        // eslint-disable-next-line webperf/layout-thrashing
                        linerect.height = component.height();
                        component.attr('data-mode','horizontal').removeClass('zcverticaldivider'); // NO I18N
                        if(linerect.left < 0) {
                            linerect.left = 0;
                        }
    
                        if(linerect.width > parentrect.width) {
                            linerect.width = parentrect.width - linerect.left;
                        }
                    }
                    var undoobj = {
                        node: component,
                        action: 'resize', // NO I18N
                        previous: prerect,
                        current: linerect,
                        editor: '#' + $parent.attr('id')
                    }
                    undoarray.push(undoobj);
                    component.css('transform','none').css(linerect); // NO I18N
                }
            }
                
        });


        // Conditions

        var hasproperty =  function(obj , props){
            var proplen = props.length;
            for(var i = 0 ; i < proplen; i++){
                if(obj[props[i]]){
                    return true;
                }
            }
            return false;
        }

        var switchstylesave = function(previous , current, element, state, selector , flag , undoarray){
            var undoobj = {
                node: selector.actual,
                stylenode: selector.style,
                state: state,
                previous: previous,
                current: current, 
                action: 'switchaction' // NO I18N
            }
            if(this.main.config && this.main.config.postprocess){
            	this.main.config.postprocess.bind(this.main)(element , current , this.config , undoarray);
            }
            if(flag){
            	return undoobj;
            }
            this.main.savecanvasaction(undoobj,element)
        }

        tools.addtool({
            toolname: 'shadowhideswt', // NO I18N
            container: '#shadowhideswt', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox zc_line_style"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            noprop: true,
            maintool: 'boxshadow', // NO I18N
            multiselecthandler: multihandlerswitch,
            metadata: {
                container: '.canvas-shadow-container', // NO I18N
                base: '.zc-shadow-tool' // NO I18N
            },
            actioncondition: function(element, config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                var $helement = $(config.metadata.container);
                var $basec = $(config.metadata.base);
                if(  !obj['box-shadow'] && !themestyle['box-shadow']  ||  // NO I18N
                    obj['box-shadow']  && obj['box-shadow'] === 'none'){  // NO I18N
                    $helement.hide();
                     $basec.addClass('zctool-hidden');
                    return false;
                }
                $helement.show();
                $basec.removeClass('zctool-hidden');
                return true;
            },
            onChange: function(flag){
            	var selfields = this.main.selectedfields || $('');
            	var sellen = selfields.length;
                var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
                var helem = $(this.config.metadata.container);
                var baselem = $(this.config.metadata.base);
            	for(var i = 0 ; i < sellen ; i++){
            		 var selector = this.main.getSelectorByElement(selfields.eq(i), 'default'); // NO I18N
                     var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
                     var mobj = this.main.getstylebyselector(selector, true);
                     var obj = mobj[this.main.state];
                     if(!obj && mobj){
                         obj = mobj[this.main.state] = {};
                     }
                     var previous =  zutils.zcopyobj2(obj);
                     if(flag){
                        if(obj['box-shadow'] === 'none'){
                            delete obj['box-shadow']; // NO I18N
                        }else{
                            obj['box-shadow'] = "0px 0px 10px 0px rgba(0, 0, 0, 0.12)" ; // NO I18N
                        }
                        helem.show();
                        baselem.removeClass('zctool-hidden'); 
                     }else{
                         obj['box-shadow'] = 'none'; // NO I18N
                         helem.hide();
                         baselem.addClass('zctool-hidden'); 
                     }
                     
                     var current =  zutils.zcopyobj2(obj);
                     this.main.updatestyle(this.config , styleselector , obj);
                     var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true,undoobj.actionarray);
                     undoobj.actionarray.push(undo);
            	}
               this.main.savecanvasaction(undoobj,selfields);
                if(this.main.availabletools && this.main.availabletools[this.config.maintool]){
                	this.main.setcurrentvalue(this.main.availabletools[this.config.maintool]);
                }
            }
        });

        tools.addtool({
            toolname: 'borderhideswt', // NO I18N
            container: '#borderhideswt', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox zc_line_style"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            noprop: true,
            multiselecthandler: multihandlerswitch,
            metadata: {
                container: '.canvas-border-container', // NO I18N
                props: ['border-left' , 'border-bottom' , 'border-right' , 'border-top' , 'border'], // NO I18N
                base: '.zc-border-tool' // NO I18N
            },
            maintool: ['border' , 'borderb' , 'borderl' , 'borderr' , 'borderswitch' , 'bordert'], // NO I18N
            actioncondition: function(element, config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var objh = this.getstylebyselector(selector).default || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                var $helement = $(config.metadata.container);
                var $basec = $(config.metadata.base);
                 // eslint-disable-next-line no-extra-parens
                if( ( !hasproperty(obj , config.metadata.props) && !hasproperty(objh , config.metadata.props) && !hasproperty(themestyle , config.metadata.props) ) || 
                    obj.border  && obj.border === 'none'){ // NO I18N
                    $helement.hide();
                    $basec.addClass('zctool-hidden');
                    return false;
                }
                $helement.show();
                $basec.removeClass('zctool-hidden');
                return true;
            },
            onChange: function(flag){
            	var selfields = this.main.selectedfields || $('');
            	var sellen = selfields.length;
                var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
                var helem = $(this.config.metadata.container);
	            var baselem = $(this.config.metadata.base);
            	for(var i = 0 ; i < sellen ; i++){
	                var selector = this.main.getSelectorByElement(selfields.eq(i), 'default'); // NO I18N
	                var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
	                var mobj = this.main.getstylebyselector(selector, true);
	                var obj = mobj[this.main.state];
	                if(!obj && mobj){
	                    obj = mobj[this.main.state] = {};
	                }
	                var previous = zutils.zcopyobj2(obj);
	                var metalen = this.config.metadata.props.length;
	                for(var it = 0; it < metalen; it++){
	                    delete obj[this.config.metadata.props[it]];
	                }
	                if(flag){
	                    helem.show();
	                    baselem.removeClass('zctool-hidden'); 
	                }else{
	                    obj.border = 'none'; // NO I18N
	                    helem.hide();
	                    baselem.addClass('zctool-hidden'); 
	                }
	                var current = zutils.zcopyobj2(obj);
	                this.main.updatestyle(this.config , styleselector , obj);
	                var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true,undoobj.actionarray);
                    undoobj.actionarray.push(undo);
            	}
            	this.main.savecanvasaction(undoobj,selfields);
                if(this.config.maintool){
            		var mainlen = this.config.maintool.length;
            		for(var i = 0 ; i < mainlen ; i++){
            			if(this.main.availabletools && this.main.availabletools[this.config.maintool[i]]){
                        	this.main.setcurrentvalue(this.main.availabletools[this.config.maintool[i]]);
                        }
            		}
            	}
            }
        });

        tools.addtool({
            toolname: 'radiusphideswt', // NO I18N
            container: '#radiusphideswt', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox zc_line_style"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            noprop: true,
            multiselecthandler: multihandlerswitch,
            metadata: {
                container: '.canvas-radiusp-tool', // NO I18N
                props: ['border-top-left-radius' , 'border-top-right-radius' , 'border-bottom-right-radius' , 'border-bottom-left-radius' , 'border-radius'], // NO I18N
                base: '.zc-radiusp-tool', // NO I18N
                inputs: ['radiussliderp','radiusinputp','radiusleftinputp','radiustopinputp','radiusrightinputp','radiusbottominputp','radiusswitchp']  // NO I18N
            },
            actioncondition: function(element, config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var objh = this.getstylebyselector(selector).default || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                var $helement = $(config.metadata.container);
                var $basec = $(config.metadata.base);
                
                // eslint-disable-next-line no-extra-parens
                if( ( !hasproperty(obj , config.metadata.props) &&  !hasproperty(objh , config.metadata.props) && !hasproperty(themestyle , config.metadata.props) ) || 
                    obj['border-radius']  && obj['border-radius'] === '0'){ // NO I18N
                    $helement.hide();
                    $basec.addClass('zctool-hidden');
                    return false;
                }
                $helement.show();
                $basec.removeClass('zctool-hidden');
                return true;
            },
            onChange: function(flag){
            	var selfields = this.main.selectedfields || $('');
            	var sellen = selfields.length;
                var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
                var helem = $(this.config.metadata.container);
	            var baselem = $(this.config.metadata.base);
            	for(var i = 0 ; i < sellen ; i++){
	                var selector = this.main.getSelectorByElement(selfields.eq(i), 'default'); // NO I18N
	                var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
	                var mobj = this.main.getstylebyselector(selector, true);
	                var obj = mobj[this.main.state];
	                if(!obj && mobj){
	                    obj = mobj[this.main.state] = {};
	                }
	                var previous = zutils.zcopyobj2(obj);
	                var metalen = this.config.metadata.props.length;
	                for(var it = 0; it < metalen; it++){
	                    delete obj[this.config.metadata.props[it]];
	                }
	                if(flag){
	                    delete obj['border-radius']; // NO I18N
	                    helem.show();
	                    baselem.removeClass('zctool-hidden'); 
	                }else{
	                    obj['border-radius']  = '0'; // NO I18N
	                    helem.hide();
	                    baselem.addClass('zctool-hidden'); 
	                }
	                var current = zutils.zcopyobj2(obj);
	                this.main.updatestyle(this.config , styleselector , obj);
	                var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true,undoobj.actionarray);
                    undoobj.actionarray.push(undo);
            	}
            	this.main.savecanvasaction(undoobj,selfields);
                var tools_ = this.config.metadata.inputs;
                var toollen = tools_.length;
                for(var i = 0 ; i < toollen ; i ++){
                    this.main.setcurrentvalue(this.main.availabletools[tools_[i]]);
                }
            }
        });

        tools.addtool({
            toolname: 'radiushideswt', // NO I18N
            container: '#radiushideswt', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox zc_line_style"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            noprop: true,
            multiselecthandler: multihandlerswitch,
            metadata: {
                container: '.canvas-radius-tool', // NO I18N
                props: ['border-top-left-radius' , 'border-top-right-radius' , 'border-bottom-right-radius' , 'border-bottom-left-radius' , 'border-radius'], // NO I18N
                base: '.zc-radius-tool', // NO I18N
                inputs: ['radiusslider','radiusinput','radiusleftinput','radiustopinput','radiusrightinput','radiusbottominput','radiusswitch'] // NO I18N
            },
            actioncondition: function(element, config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var objh = this.getstylebyselector(selector).default || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                var $helement = $(config.metadata.container);
                var $basec = $(config.metadata.base);
                
                if(  !hasproperty(obj , config.metadata.props) && !hasproperty(themestyle , config.metadata.props) && !hasproperty(objh , config.metadata.props)  || 
                    obj['border-radius']  && obj['border-radius'] === '0'){ // NO I18N
                    $helement.hide();
                    $basec.addClass('zctool-hidden');
                    return false;
                }
                $helement.show();
                $basec.removeClass('zctool-hidden');
                return true;
            },
            onChange: function(flag){
            	var selfields = this.main.selectedfields || $('');
            	var sellen = selfields.length;
                var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
                var helem = $(this.config.metadata.container);
	            var baselem = $(this.config.metadata.base);
            	for(var i = 0 ; i < sellen ; i++){
	                var selector = this.main.getSelectorByElement(selfields.eq(i), 'default'); // NO I18N
	                var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
	                var mobj = this.main.getstylebyselector(selector, true);
	                var obj = mobj[this.main.state];
	                if(!obj && mobj){
	                    obj = mobj[this.main.state] = {};
	                }
	                var previous = zutils.zcopyobj2(obj);
	                var metalen = this.config.metadata.props.length;
	                for(var it = 0; it < metalen; it++){
	                    delete obj[this.config.metadata.props[it]];
	                }
	                if(flag){
	                    delete obj['border-radius']; // NO I18N
	                    helem.show();
	                    baselem.removeClass('zctool-hidden'); 
	                }else{
	                    obj['border-radius']  = '0'; // NO I18N
	                    helem.hide();
	                    baselem.addClass('zctool-hidden'); 
	                }
	                var current = zutils.zcopyobj2(obj);
	                this.main.updatestyle(this.config , styleselector , obj);
	                var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true,undoobj.actionarray);
                    undoobj.actionarray.push(undo);
            	}
            	this.main.savecanvasaction(undoobj,selfields);
                var tools_ = this.config.metadata.inputs;
                var toollen = tools_.length;
                for(var i = 0 ; i < toollen ; i ++){
                    this.main.setcurrentvalue(this.main.availabletools[tools_[i]]);
                }
            }
        });

        tools.addtool({
            toolname: 'paddinghideswt', // NO I18N
            container: '#paddinghideswt', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox zc_line_style"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            noprop: true,
            multiselecthandler: multihandlerswitch,
            metadata: {
                container: '.canvas-padding-tool', // NO I18N
                emptyprop: 'padding', // NO I18N
                props: ['padding-left','padding-right','padding-top','padding-bottom','padding'], // NO I18N
                base: '.zc-padding-tool', // NO I18N
                inputs: ['paddingslider','paddinginput','paddingleftinput','paddingtopinput','paddingrightinput','paddingbottominput','paddingswitch'] // NO I18N
            },
            actioncondition: function(element, config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var objh = this.getstylebyselector(selector).default || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                var staticstyle = {};
                var staticstyleconfig = this.config.staticstyles;
                if(staticstyleconfig && staticstyleconfig[type]){
                	var len = staticstyleconfig[type].length;
                	for(var i = 0 ; i < len ; i++) {
                		var currentstaticstyle = staticstyleconfig[type][i];
                		if(currentstaticstyle && currentstaticstyle.selector && element.is(currentstaticstyle.selector)){
                			staticstyle = currentstaticstyle.style.default;
                		}
                	}
                }
                var $helement = $(config.metadata.container);
                var $basec = $(config.metadata.base);
                
                if(  !hasproperty(staticstyle , config.metadata.props) && !hasproperty(obj , config.metadata.props) && !hasproperty(objh , config.metadata.props) && !hasproperty(themestyle , config.metadata.props)  || 
                    obj.padding  && obj.padding === '0'){ // NO I18N
                    $helement.hide();
                    $basec.addClass('zctool-hidden');
                    return false;
                }
                $helement.show();
                $basec.removeClass('zctool-hidden');
                return true;
            },
            onChange: function(flag){
            	var selfields = this.main.selectedfields || $('');
            	var sellen = selfields.length;
                var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
                var helem = $(this.config.metadata.container);
	            var baselem = $(this.config.metadata.base);
            	for(var i = 0 ; i < sellen ; i++){
	                var selector = this.main.getSelectorByElement(selfields.eq(i), 'default'); // NO I18N
	                var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
	                var mobj = this.main.getstylebyselector(selector, true);
	                var obj = mobj[this.main.state];
	                if(!obj && mobj){
	                    obj = mobj[this.main.state] = {};
	                }
	                var previous = zutils.zcopyobj2(obj);
	                var metalen = this.config.metadata.props.length;
	                for(var it = 0; it < metalen; it++){
	                    delete obj[this.config.metadata.props[it]];
	                }
	                if(flag){
	                    delete obj[this.config.metadata.emptyprop];
	                    helem.show();
	                    baselem.removeClass('zctool-hidden'); 
	                }else{
	                    obj.padding  = '0'; // NO I18N
	                    helem.hide();
	                    baselem.addClass('zctool-hidden'); 
	                }
	                var current = zutils.zcopyobj2(obj);
	                this.main.updatestyle(this.config , styleselector , obj);
	                var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true,undoobj.actionarray);
                    undoobj.actionarray.push(undo);
            	}
            	this.main.savecanvasaction(undoobj,selfields);
                var tools_ = this.config.metadata.inputs;
                var toollen = tools_.length;
                for(var i = 0 ; i < toollen ; i ++){
                    this.main.setcurrentvalue(this.main.availabletools[tools_[i]]);
                }
            }
        });

        tools.addtool({
            toolname: 'marginhideswt', // NO I18N
            container: '#marginhideswt', // NO I18N
            type: 'toggle', // NO I18N
            displayvalue: '<span class="zc_checkbox zc_line_style"></span>', // NO I18N
            actiontype: 'condition', // NO I18N
            noprop: true,
            multiselecthandler: multihandlerswitch,
            metadata: {
                emptyprop: 'margin', // NO I18N
                container: '.canvas-margin-tool', // NO I18N
                props: ['margin-left','margin-right','margin-top','margin-bottom','margin'], // NO I18N
                base: '.zc-margin-tool', // NO I18N
                inputs: ['marginslider','margininput','marginleftinput','margintopinput','marginrightinput','marginbottominput','marginswitch'] // NO I18N
            },
            actioncondition: function(element, config){
                var selector = this.getSelectorByElement(element , 'default'); // NO I18N
                var obj = this.getstylebyselector(selector)[this.state] || {};
                var objh = this.getstylebyselector(selector).default || {};
                var zctype = this.config.gettype(element);
                var type = zctype.zctype;
                var themestyle = {}
                if(this.config.theme.currenttheme[type] && !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default)){
                    if(this.config.theme.currenttheme[type][this.state]){
                        themestyle = this.config.theme.currenttheme[type][this.state]
                    }else{
                        themestyle = this.config.theme.currenttheme[type].default;
                    }
                }
                var $helement = $(config.metadata.container);
                var $basec = $(config.metadata.base);
                
                if(  !hasproperty(obj , config.metadata.props) && !hasproperty(objh , config.metadata.props) && !hasproperty(themestyle , config.metadata.props)  || 
                    obj.margin  && obj.margin === '0'){ // NO I18N
                    $helement.hide();
                    $basec.addClass('zctool-hidden');
                    return false;
                }
                $helement.show();
                $basec.removeClass('zctool-hidden');
                return true;
            },
            onChange: function(flag){
            	var selfields = this.main.selectedfields || $('');
            	var sellen = selfields.length;
                var undoobj = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
                var helem = $(this.config.metadata.container);
	            var baselem = $(this.config.metadata.base);
            	for(var i = 0 ; i < sellen ; i++){
	                var selector = this.main.getSelectorByElement(selfields.eq(i), 'default'); // NO I18N
	                var styleselector = this.main.getSelectorByElement(selfields.eq(i)); // NO I18N
	                var mobj = this.main.getstylebyselector(selector, true);
	                var obj = mobj[this.main.state];
	                if(!obj && mobj){
	                    obj = mobj[this.main.state] = {};
	                }
	                var previous = zutils.zcopyobj2(obj);
	                var metalen = this.config.metadata.props.length;
	                for(var it = 0; it < metalen; it++){
	                    delete obj[this.config.metadata.props[it]];
	                }
	                if(flag){
	                    delete obj[this.config.metadata.emptyprop];
	                    helem.show();
	                    baselem.removeClass('zctool-hidden'); 
	                }else{
	                    obj.margin  = '0'; // NO I18N
	                    helem.hide();
	                    baselem.addClass('zctool-hidden'); 
	                }
	                var current = zutils.zcopyobj2(obj);
	                this.main.updatestyle(this.config , styleselector , obj);
	                var undo = switchstylesave.bind(this)(previous,current,selfields.eq(i),this.main.state,{style :styleselector,actual : selector},true,undoobj.actionarray);
	                undoobj.actionarray.push(undo);
            	}
            	this.main.savecanvasaction(undoobj,selfields);
                var tools_ = this.config.metadata.inputs;
                var toollen = tools_.length;
                for(var i = 0 ; i < toollen ; i ++){
                    this.main.setcurrentvalue(this.main.availabletools[tools_[i]]);
                }
            }
        });


        // Depth Tool

        tools.addtool({
            toolname: 'depthforward', // NO I18N
            container: '#depthforward',  // NO I18N
            type: 'button', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'z-index', // NO I18N
            actiontext: '<span class="zc-depth-icon canvasicon"></span>', // NO I18N
            basecontainer: '.zc-depth-tool', // NO I18N
            changehandler: function(){
                var el = this.main.selectedfields;
                var isTab = el.closest('.zclayout'); // NO I18N
                if(isTab.length){
                    el = isTab;
                }

                var zin = el.css('z-index'); // NO I18N
                var prevalue = zin;
                if(isNaN(parseInt(zin))){
                    zin = 1;
                }
                var newzin = parseInt(zin) + 1;
                el.css('z-index',newzin); // NO I18N
                
                zutils.reinitarrange(el);
                var undoobj = {
                    action: 'callback', // NO I18N
                    previous: prevalue,
                    current: newzin,
                    node: el,
                    callback: function(data, method , node){
                        if(method === 'undo'){ // NO I18N 
                            node.css('z-index', data.previous); // NO I18N
                        }else{
                            node.css('z-index', data.current); // NO I18N
                        }
                        zutils.reinitarrange(node);
                        
                    }
                }
                var undoref = this.main.savecanvasaction(undoobj, el);
                zutils.adjustoverlap(el , undoref , newzin , 'forward'); // NO I18N
                this.main.availabletools.depthbackward.populate( null ,{'z-index': newzin} , el ); // NO I18N
            }
        });

        tools.addtool({
            toolname: 'depthbackward', // NO I18N
            container: '#depthbackward',  // NO I18N
            type: 'button', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'z-index', // NO I18N
            actiontext: '<span class="zc-depth-icon-back canvasicon"></span>', // NO I18N
            basecontainer: '.zc-depth-tool', // NO I18N
            populate: function(config , value , selectedelement , overlapnodes){
                var overlaps = overlapnodes || zutils.getOverlappedNodes(selectedelement);
                var $forward = $('#depthforward'); // NO I18N
                var $backward = $('#depthbackward'); // NO I18N

                $forward.addClass('zcanvas-tool-disable');
                $backward.addClass('zcanvas-tool-disable');
              
                var currentIndex =  parseInt(value['z-index']) || 1; // NO I18N
                overlaps = canvasObjUtils._.sortBy(overlaps , function(d){ return d.style.zIndex; });
                var overlaplen = overlaps.length;
                var minIndex = 1; var maxIndex = 1
                for(var i = 0 ; i < overlaplen ; i ++){
                    var $node = $(overlaps[i])
                    var $currentnodeindex = parseInt( $node[0].style.zIndex ); //NO I18N
                    if($currentnodeindex > 1){
                        var secondlab = zutils.getOverlappedNodes($node);
                        if(secondlab && secondlab.length){
                            if(minIndex > $currentnodeindex){
                            	minIndex = $currentnodeindex;
                            }else if(maxIndex < $currentnodeindex){
                            	maxIndex = $currentnodeindex;
                            }
                        }
                    }
                }
              

                if(currentIndex > minIndex){
                    $backward.removeClass('zcanvas-tool-disable');
                }
                if(currentIndex < maxIndex){
                    $forward.removeClass('zcanvas-tool-disable');
                }
                // if(overlaps && overlaps.length){
                //     if(overlaps.length + 1 >= currentIndex && currentIndex != 1){
                //         $backward.removeClass('zcanvas-tool-disable');
                //     }
                //     if(currentIndex != overlaps.length + 1){
                //         $forward.removeClass('zcanvas-tool-disable');
                //     }
                // }


            },
            changehandler: function(){
                var el = this.main.selectedfields;
                var isTab = el.closest('.zclayout'); // NO I18N
                if(isTab.length){
                    el = isTab;
                }
                var zin = el.css('z-index'); // NO I18N
                var prevalue = zin;
                if(isNaN(parseInt(zin))){
                    zin = 1;
                }
                var newzin = parseInt(zin) - 1;
                newzin = newzin < 0 ? 0 : newzin;
                el.css('z-index',newzin); // NO I18N
                zutils.reinitarrange(el);
                
                var undoobj = {
                    action: 'callback', // NO I18N
                    previous: prevalue,
                    current: newzin,
                    node: el,
                    callback: function(data, method , node){
                        if(method === 'undo'){ // NO I18N 
                            node.css('z-index', data.previous); // NO I18N
                        }else{
                            node.css('z-index', data.current); // NO I18N
                        }
                        zutils.reinitarrange(node);
                    }
                }
                var undoref = this.main.savecanvasaction(undoobj, el);
                zutils.adjustoverlap(el , undoref , newzin ,'backward'); // NO I18N
                this.config.populate(this.config , {'z-index': newzin} , el); // NO I18N
            }
        });



        tools.addtool({
            toolname: 'labelalign', // NO I18N
            container: '#labelaligntool', // NO I18N
            type: 'list', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'flex-direction', // NO I18N
            basecontainer: '.zc-labelalign-tool', // NO I18N
            list: [
                {
                    selectvalue: 'Top', // NO I18N
                    displayvalue: I18n.getMsg('ze.editor.top'), // NO I18N
                    style: {
                        'flex-direction':'column' // NO I18N
                    }
                },
                {
                    selectvalue: 'Left', // NO I18N
                    displayvalue: I18n.getMsg('zc.editor.left'), // NO I18N
                    style: {
                        'flex-direction':'row' // NO I18N
                    }
                },
                {
                    selectvalue: 'Bottom', // NO I18N
                    displayvalue: I18n.getMsg('ze.editor.bottom'), // NO I18N
                    style: {
                        'flex-direction':'column-reverse' // NO I18N
                    }
                },
                {
                    selectvalue: 'Right', // NO I18N
                    displayvalue: I18n.getMsg('zc.editor.right'), // NO I18N
                    style: {
                        'flex-direction':'row-reverse' // NO I18N
                    }
                }
                
            ],
            conditionalopen: function(config){
                var selectedel = this.selectedfields.closest('.zcanvas-field'); // NO I18N
                var labelNodesCount = selectedel.find('.zcanvas-label').length;
                var dataNodeCount = selectedel.find('.zcanvas-data-node').length;
                if(dataNodeCount === labelNodesCount){
                    config.basecontainer && $(config.basecontainer).show();
                }
            },
            populate: function(config){
                var holder = this.selectedfields.closest('.zcanvas-field').children('.zcanvas-holder'); // NO I18N
                var $label = holder.css('flex-direction'); // NO I18N
                var conlen = config.list.length;
                var selected = {};
                for(var i = 0 ; i < conlen ; i++){
                    if(config.list[i].style['flex-direction'] === $label){
                        selected = config.list[i];
                    }
                }
                this.tools.populate.list(config, selected.style);
            },
            onChange: function(config, item){
                this.main.labellefttop(false , item.style['flex-direction']); // NO I18N
            }
        })

        tools.addtool({
            toolname: 'tableverticalalign', // NO I18N
            container: '#tableverticalaligntool', // NO I18N
            actiontype: 'action', // NO I18N
            actionproperty: 'vertical-align', // NO I18N
            basecontainer: '.zc-verticalalign-tool', // NO I18N
            type: 'list', // NO I18N
            showcondition: function(){
                if(this.selectedfields){
                    var result = true;
                    var selectedfieldlen = this.selectedfields.length;
                    for(var i = 0 ; i < selectedfieldlen ; i++){
                        var cellelment = this.selectedfields[i].parentElement.parentElement.parentElement;
                        if(!cellelment.classList.contains('zc-table-cell')){
                            return false;
                        }
                    }
                    return result;
                }
                return false;
            },
            list: [
                {
                    selectvalue: 'Top', // NO I18N
                    displayvalue: I18n.getMsg('ze.editor.top'), // NO I18N
                    style: {
                        'vertical-align':'top' // NO I18N
                    }
                },
                {
                    selectvalue: 'Middle', // NO I18N
                    displayvalue: I18n.getMsg('crm.canvas.builder.middle'), // NO I18N
                    style: {
                        'vertical-align':'middle' // NO I18N
                    }
                },
                {
                    selectvalue: 'Bottom', // NO I18N
                    displayvalue: I18n.getMsg('ze.editor.bottom'), // NO I18N
                    style: {
                        'vertical-align':'bottom' // NO I18N
                    }
                }
            ]
        });

    }
    window.zcconfig = zcconfig;
})();;(function(){
    var zcanvastools = function(config){
        this.config = config;
        this.zcstyles = {};
        this.availabletools = {};
        this.selectedfields = {};
        this.classaction = [];
        this.sheet = {};
        this.state = 'default'; // NO I18N
        this.changestate = function(state, flag){
            this.state = state;
            flag || this.selectfield(this.selectedfields,true, true);
            if(this.config.onstatechange){
                this.config.onstatechange.bind(this)(state);
            }
        }
        this.init = function(){
            var base = $(this.config.baseeditor);
            var $style = base.find('.zc-core-style');
            if(!$style.length){
                var style = document.createElement('style'); // NO I18N
                style.setAttribute('class','zc-core-style'); // NO I18N
                base.append(style);
                $style = [style];
            }
            var segregatedsheet = null;
            if(this.config.segregatedstyle){
                var segregatedstylessheet = base.find('.' + this.config.segregatedstyle);
                if(!segregatedstylessheet.length){
                    var sstyle = document.createElement('style'); // NO I18N
                    sstyle.setAttribute('class',this.config.segregatedstyle); // NO I18N
                    base.append(sstyle);
                    segregatedstylessheet = [sstyle];
                }
                segregatedsheet = segregatedstylessheet[0].sheet;
            }
            this.themestylesheet = $style[0].sheet;
            this.sheet = segregatedsheet ? segregatedsheet : $style[0].sheet;
            this.config.nocompile || this.compiletheme();
        }
        this.addtool = function(toolconfig){
            this.availabletools[toolconfig.toolname] = toolconfig;
            if(this.tools.handler[toolconfig.type]){
                this.tools.handler[toolconfig.type].bind(this)(toolconfig);
            }else{
                toolconfig.handler.bind(this)(toolconfig);
            }
        }

        this.hoverfield = function(event , flag){
            $('.zcanvas-hover-element').removeClass('zcanvas-hover-element'); // NO I18N
            if(flag){
                $(event.currentTarget).addClass('zcanvas-hover-element'); // NO I18N
            }
            event.stopPropagation();
        }

        this.selectfield = function(event,flag,force,meta){
            if(event.type === 'click' && (event.shiftKey || this.stopPropogate)){ // NO I18N
                var $selected = $(this.selectedfields).not('.zcanvas-editor-outer');
                if(event.target && !$selected.has(event.target).length){
                    var $target = $(event.target);
                    $target = $target.closest('.zcanvas:not(.zcanvas-ignore)');  // NO I18N
                    var target = $target.not('.zcanvas-editor-outer'); // NO I18N
                    if(target.hasClass('zc-no-parentselect')){
                        target = target.closest('.zclayout'); // NO I18N
                    }
                    var islabel = $target.is('.zcanvas-inner-component'); // NO I18N
                    if(!$selected.length || target.parent().is($selected.parent()) || islabel){
                        $selected = $selected.add(target);  
                        if($selected.length === 0){
                            this.selectfield($target);
                        }else if($selected.length > 1){
                            $selected.addClass('zcanvas-multiselect');
                            if(!islabel){
                                this.multiselect(null , null ,false , true);
                            }else{
                                var lables = $selected.filter('.zcanvas-inner-component'); // NO I18N
                                $selected.not(lables).removeClass('zcanvas-selected-element . zcanvas-multiselect');
                                this.multiselect(null , null, true);
                            }
                            
                        }else{
                            $selected.addClass('zcanvas-selected-element');
                            this.selectfield($selected);
                        }
                    }
                    
                }
                return;
            }
         // eslint-disable-next-line webperf/no-multipleDOMLookup
            var selectedfields = event.target ? this.getselectedfields($(event.target)) : event;
            selectedfields = selectedfields ? selectedfields.not('.zcanvas-ignore') : selectedfields; // NO I18N
            if(selectedfields && !selectedfields.length){
            	return;
            }
            $('.zcanvas-selectbox').remove();
            $('.zcanvas-selected-element').removeClass('zcanvas-selected-element'); //NO I18N
            $('.zcanvas-multiselect').removeClass('zcanvas-multiselect'); //NO I18N
            if(selectedfields && selectedfields.is && selectedfields.is(this.selectedfields) && this.selectedfields && this.selectedfields.length === 1  && !force && event.target){
                selectedfields.addClass('zcanvas-selected-element'); //NO I18N
                return;
            }
            this.selectedfields = selectedfields;
            selectedfields.addClass('zcanvas-selected-element'); //NO I18N
            if(zcanvasrelatedList){
                zcanvasrelatedList.switchmenu(selectedfields);
            }
            var selecteddata = this.config.gettype ? this.config.gettype(selectedfields) : this.gettypefromelement(selectedfields);
            var toolstypes = [];
            toolstypes = toolstypes.concat([selecteddata.zctype]);
            if(this.config && this.config.onBeforeSelection && !flag){
                this.config.onBeforeSelection.bind(this)(toolstypes , null , meta)
            }
            this.executetools(toolstypes,flag,meta);
        }

        this.getselectedfields = function(el){
            var selectedfields = el;
            var closestsubselection = selectedfields.closest('.zc-rl-sub-selectable'); // NO I18N
            var closesttab = selectedfields.closest('.tab'); // NO I18N
            if(el.hasClass('zcanvas-non-selectable')){
                return;
            }else if(closesttab.length){ 
                selectedfields = closesttab;
            }else if(el.hasClass('zc-rl-sub-selectable') || closestsubselection.length){ // NO I18N
                selectedfields = el.closest('.zc-rl-sub-selectable'); // NO I18N
            }else if(el.hasClass('zcanvas-skip-selection')){ // NO I18N
                selectedfields = el.parent('.zcanvas'); // NO I18N
            }else if(el.hasClass('zcanvas-next-selection')){ // NO I18N
                selectedfields = el.find(el.attr('data-nextselect'));
            } else if(el.hasClass('zcanvas-holder')){ // NO I18N
                selectedfields = el.closest('.zcanvas-field'); // NO I18N
            } else if(el.hasClass('zcanvas')){ // NO I18N
                selectedfields = el;
            }else if(el.is(this.config.baseeditor)){
                selectedfields = $(this.config.baseeditor);
            }else{
                selectedfields = el.closest('.zcanvas'); //No I18N
            }
            return selectedfields;
        }   

        this.gettypefromelement = function(selectedfields){
            var selecteddata = {};
            var staticparent = selectedfields.parents('.zcanvas-static-editor'); // NO I18N
            // add condition below staticparent.length
            if(selectedfields.hasClass('zcanvas-static-editor')){ // NO I18N 
                selectedfields = staticparent.length ? staticparent : selectedfields;
                selecteddata = {zctype: 'editor'}; // NO I18N
            }else if(selectedfields.hasClass('zc-rl-sub-selectable')){ // NO I18N
                selecteddata = {zctype: 'subtype'}; // NO I18N
            }else if(selectedfields.hasClass('zclayout')){ // NO I18N    
                var layoutname = selectedfields.attr('data-layoutname'); // NO i18N
                selecteddata = {zctype: layoutname}
            }else if(selectedfields.hasClass('zclayoutselectable')){ // NO i18N
                selecteddata = { zctype: selectedfields.attr('data-layout-selctabletype') }; // NO i18N
            }else if(selectedfields.hasClass('zcanvas-editor') || selectedfields.hasClass('zcanvas-editor-outer')){ //NO I18N
                selecteddata = { zctype: 'editor' }; // NO I18N
            }else if(selectedfields.hasClass('zcanvas-field')){ // NO I18N
                selecteddata = zutils.getdatafromelement(selectedfields);
            }else if(selectedfields.hasClass('zcanvas-seperator')){ // NO I18N
                selecteddata = { zctype: 'seperator' }; // NO I18N
            }else if(selectedfields.hasClass('zcanvas-selectable')){ // NO I18N
                selecteddata = { zctype: selectedfields.attr('data-zcanvastooltype') } // NO i18N
            }else{
                selecteddata = zutils.getdatafromelement(selectedfields.parents('.zcanvas-field')); //NO I18N
            }
            return selecteddata;
        }

        this.executetools = function(type, flag , meta){
            var toollist = this.getTools(type , this.config) || [];
            var toollistlen = toollist.length;
            var toolelements = $(this.config.toolcommon);
            toolelements.hide();
            var basenodes = [];
            for(var i = 0 ; i < toollistlen ; i ++){
                var toolconfig = this.availabletools[toollist[i]];
                var base = this.showtools(toolconfig);
                base && basenodes.push(base);
            }
            if(this.config.onSelection && !flag){
                this.config.onSelection.bind(this)(type,meta,basenodes);
            }
            $(basenodes.join(',')).show();
        }
        this.getTools = function(type,config){
            var toolsList = [];
            if(!config.tools[type]){
                toolsList = config.tools.zcdefault; 
            }else{
                toolsList = config.tools[type];
            }
            return toolsList;
        }

        this.showtools = function(config){
            var basenode;
            if(config.conditionalopen){
                config.conditionalopen.bind(this)(config);
            }else if(config.basecontainer){
                 basenode = config.basecontainer;
                 if(config.showcondition && !config.showcondition.bind(this)(config)){
                     basenode = null;
                 }
            }
            this.setcurrentvalue(config);
            return basenode ? basenode  : null;
        }

        this.getstylebyselector = function(selector , flag , compressed){
            var obj = {};
            if(this.zcstyles[selector]){
                obj = this.zcstyles[selector] || {};
            }else if(canvasObjUtils._.isEmpty(obj) && flag){
                obj = this.zcstyles[selector] = {};
            }
            if(compressed){
            	var newobj = {};
                for(var key in obj){
                    var statestyle = obj[key];
                    var newstyle = {};
                    for(var k in statestyle){
                        var newkey = this.getCompressionMapping('stylekey' , k);  // NO I18N
                        var newval = this.getCompressionMapping('stylevalue' , statestyle[k]); // NO I18N
                        newstyle[newkey] = newval;
                    }
                    this.config && this.config.stylecompressioncallback && this.config.stylecompressioncallback(newstyle);
                    newobj[key] = newstyle;
                }
                return newobj;
            }else{
            	return obj;
            }
        }

        this.getcurrentstyle = function(config , selectedfield , zctype){
            var style = {};
            switch(config.actiontype) {
                case 'action':
                    var selector = this.getSelectorByElement(selectedfield , 'default'); // NO I18N
                       var type = zctype ? zctype.zctype : '';
                       var styleselector = this.getstylebyselector(selector , true);
                       var obj = styleselector[this.state] || {};
                       var mouseobj;
                       if(!obj[config.actionproperty] && this.state !== 'default'  && this.config.mousestateprefix && this.state.indexOf(this.config.mousestateprefix) > -1){
                           var _mousestate;
                           var _mousestateparent;
                           var mousestateparent = this.state.split(this.config.mousestateprefix) || [];
                           _mousestate = mousestateparent[1];
                           _mousestateparent = mousestateparent[0];
                           if(_mousestate && _mousestateparent && styleselector[_mousestate] && styleselector[_mousestate][config.actionproperty]){
                               mouseobj = styleselector[_mousestate][config.actionproperty];
                           }
                       }
                       if(obj[config.actionproperty]){
                           style[config.actionproperty] = obj[config.actionproperty];
                       }else if(mouseobj){
                           style[config.actionproperty] = mouseobj;
                       }else if(this.state !== 'default' && styleselector && styleselector.default && styleselector.default[config.actionproperty]){ // NO I18N
                       	style[config.actionproperty] = styleselector.default[config.actionproperty] // NO I18N
                       }else if(this.config.theme.currenttheme[type] && ( this.config.theme.currenttheme[type][this.state] && this.config.theme.currenttheme[type][this.state][config.actionproperty]  ||  !canvasObjUtils._.isEmpty(this.config.theme.currenttheme[type].default) &&  this.config.theme.currenttheme[type].default[config.actionproperty]   )){
                           var themestyle = {}
                           if(this.config.theme.currenttheme[type][this.state] && this.config.theme.currenttheme[type][this.state][config.actionproperty]){
                               themestyle = this.config.theme.currenttheme[type][this.state]
                           }else{
                               themestyle = this.config.theme.currenttheme[type].default;
                           }
                           style[config.actionproperty] = themestyle[config.actionproperty];
                       }else{ // NO I18N
                           style[config.actionproperty] = selectedfield.css(config.actionproperty);
                       }
                       break;
                case 'actionclasslist':
                   var filter ;
                   if(this.state !== 'default'){ // NO I18N
                	   filter =  config.list.filter(function(item){ 
                		   return this.el.hasClass(item.class + '_state_' + this.state)  // NO I18N
                		  }.bind({config: config , el: selectedfield , state:this.state})); // NO I18N
                	   if(!filter.length && config.revert && config.removeclass){
                		   if(selectedfield.hasClass(config.removeclass + '_state_' + this.state)){ // NO I18N
                			   filter = [{}];
                		   }
                	   }
                   }
                   if(!filter || !filter.length){
                	   filter =  config.list.filter(function(item){ return this.el.hasClass(item.class) }.bind({config: config , el: selectedfield})) 
                   }
                   style = filter && filter[0] ? filter[0] : {};
                   break;
                case 'classaction':
                	var tempflag;
                	if(this.state !== 'default'){ // No I18N
                		tempflag = selectedfield.hasClass(config.actionclass + '_state_' + this.state); // NO I18N
                		if(!tempflag && config.removeclass){
                			tempflag = selectedfield.hasClass(config.removeclass + '_state_' + this.state); // No I18N
                		}
                	}
                	if(!tempflag){
                		style.flag = selectedfield.hasClass(config.actionclass);
                	}else{
                		style.flag = true;
                	}
                    
                    break;
                case 'condition':
                    if(config.actioncondition){
                        style.flag = config.actioncondition.bind(this)(selectedfield, config);
                    }
                    break;
            }
            return style;
        }
        
        this.multiobject = function(config , obj , stringify){
            var objlen = obj.length;
            var isequal = true;
            for(var i = 1 ; i <= objlen - 1 ; i++){
                var src = obj[i];
                var dst = obj[i - 1];
                var result;

                if(!stringify){
                    result = zutils.objectEquals(src , dst)
                }else{
                    result =  JSON.stringify(src) === JSON.stringify(dst)  ? true : false ;
                }

                if(!result){
                    isequal = false;
                }
            }
            return isequal;
        }

        this.setcurrentvalue = function(config){
            if(this.selectedfields.length > 1){
                var sellen = this.selectedfields.length;
                var style = [];
                for(var i = 0 ; i < sellen ; i++){
                    var selectedfield = this.selectedfields.eq(i);
                    var zctype = this.config.gettype(selectedfield);
                    style.push( this.getcurrentstyle(config , selectedfield , zctype) );
                }
            }else{
                var selectedfield = this.selectedfields.eq(0);
                var zctype = this.config.gettype(selectedfield);
                var style = this.getcurrentstyle(config , selectedfield , zctype);
            }
           
            if(this.tools.populate[config.type] && !config.populate){
                if(config.prepopulatehandler){
            		style = config.prepopulatehandler.bind(this)(config , style , selectedfield);
            	}
                this.tools.populate[config.type].bind(this)(config , style , selectedfield);
            }else{
                config.populate.bind(this)(config, style , selectedfield);
            }
        }

        this.changehandler = function(config , result , flag, _previous, selectioncallback , selectedelement , stylecreationcallback){
            var selectedfield = selectedelement || this.selectedfields;
            var selectedfieldlen = selectedfield.length;
            var undoaction = {action: 'link', actionarray: [] , node : '#'}; // NO I18N
            var getactionclass = function(item){
            	if(this.inst.state === 'default'){ // NO I18N
            		if(this.el.hasClass(item)){
                        selectedfield.eq(i).removeClass(item).zremoveClass(item);
                        this.previous.class = item;
                    }
            	}else{
            		var itemclass = item + '_state_' + this.inst.state; // NO I18N
            		if(this.el.hasClass(itemclass)){
            			selectedfield.eq(i).removeClass(itemclass);
            			this.previous.class = itemclass;
            			if(this.objref){
                            var spliceindex = this.objref.indexOf(item);
                            if(spliceindex > -1){
                                this.objref.splice(spliceindex,1);
                            }
            			}
            		}
            		if(config.revert && config.removeclass && config.removeclass.indexOf(item) > -1){
            			var itemremoveclass = config.removeclass + '_state_' + this.inst.state; // NO I18N
                		if(this.el.hasClass(itemremoveclass)){
                			selectedfield.eq(i).removeClass(itemremoveclass);
                			this.previous.class = itemremoveclass;
                			if(this.objref){
                                var spliceindex = this.objref.indexOf(config.removeclass);
                                if(spliceindex > -1){
                                    this.objref.splice(spliceindex ,1);
                                }
                			}
                		}
            		}
            	}
                
            }
            
            for(var i = 0 ; i < selectedfieldlen ; i++){
                var ismultiresult = result.length ? true : false;
                if(this.config.preprocess){
                    if(this.config.preprocess(selectedfield.eq(i) ,config , ismultiresult ? result[i] : result , flag, undoaction)){
                        return;
                    }
                }
                if(this.config.integritycheck && !this.config.integritycheck.bind(this)(selectedfield.eq(i) , config)){
                	continue;
                }
                var undo = {};
                if(selectioncallback){
                    selectedfield = selectioncallback(selectedfield);
                }
                var selector = this.getSelectorByElement(selectedfield.eq(i) , 'default'); // NO I18N
                var styleselector = this.getSelectorByElement(selectedfield.eq(i));
                var styles = this.getstylebyselector(selector, true);
                if(!styles[this.state]){
                    this.zcstyles[selector][this.state] = {};
                    stylecreationcallback && stylecreationcallback(this.zcstyles[selector][this.state]);
                }
                switch(config.actiontype) {
                    case 'action':
                        undo.action = 'action'; // NO I18N
                        undo.node = selector; 

                        // FIXME:: this check should be generic call back

                        if(selector.indexOf('.tab') > -1){
                            undo.actualnode = this.getSelectorByElement(selectedfield.eq(i) , 'default', true); // NO I18N
                        }
                        var previous = {};
                        if(!_previous){
                            for(var key in ismultiresult ? result[i].style : result.style){
                                var currentst = this.zcstyles[selector][this.state][key];
                                previous[key] = zutils.zcopyobj2( currentst ? currentst : '' );
                            }
                        }else{
                            previous = zutils.zcopyobj2( _previous.length ? _previous[i].style : _previous  || {});
                        }
                        canvasObjUtils._.extend(this.zcstyles[selector][this.state] , ismultiresult ? result[i].style : result.style);
                        
                        undo.noimportant = config.noimportant;
                        this.updatestyle(config , styleselector , this.zcstyles[selector][this.state], config.noimportant);
                        undo.state = this.state;
                        undo.previous = previous;
                        undo.current = zutils.zcopyobj2( ismultiresult ? result[i].style : result.style  || {});
                        if(this.config.postprocess){
                            this.config.postprocess.bind(this)(selectedfield.eq(i) , ismultiresult ? result[i].style : result.style , config , undoaction.actionarray, flag , null , styles);
                        }
                        break;
                    case 'classaction':
                        undo.node = selectedfield.eq(i);
                        undo.action = 'classaction'; // NO I18N
                        undo.className = config.actionclass;
                        if(this.state !== 'default' && this.zcstyles[selector][this.state] && !this.zcstyles[selector][this.state]._classstyle_){
                        	this.zcstyles[selector][this.state]._classstyle_ = [];
                        }
                        if(this.state !== 'default'){
                        	undo.classstate = this.state;
                       	 	undo.selector = selector;
                       	 	undo.removeclass = config.removeclass;
                       	 	undo.styleselector = styleselector;
                       	 	undo.noimp = config.noimportant;
                        }
                        if(result){
                    		 undo.previous = false;
                             undo.current = true;
                             if(this.state !== 'default'){
                            	 undo.hasremove =  selectedfield.eq(i).hasClass(config.removeclass + '_state_' + this.state); // NO I18N
                            	 selectedfield.eq(i).removeClass(config.removeclass + '_state_' + this.state); // NO I18N
                                 var spliceindex = this.zcstyles[selector][this.state]._classstyle_.indexOf(config.removeclass + '_state_' + this.state);
                                 if(spliceindex > -1){
                                    this.zcstyles[selector][this.state]._classstyle_.splice(spliceindex ,1);
                                 }
                            	 this.zcstyles[selector][this.state]._classstyle_.push(config.actionclass + '_state_' + this.state);
                             	selectedfield.eq(i).addClass(config.actionclass + '_state_' + this.state); // NO I18N
                             	this.updatestyle(config , styleselector , this.zcstyles[selector][this.state], config.noimportant);
                             }else{
                            	 selectedfield.eq(i).addClass(config.actionclass).zaddClass(config.actionclass);              
                            }
                            
                        }else{
                    		undo.previous = true;
                            undo.current = false;
                            if(this.state !== 'default'){
                            	 undo.hasaction = selectedfield.eq(i).hasClass(config.actionclass + '_state_' + this.state); // NO I18N
                            	 selectedfield.eq(i).removeClass(config.actionclass + '_state_' + this.state); // NO I18N
                                 var spliceindex = this.zcstyles[selector][this.state]._classstyle_.indexOf(config.actionclass + '_state_' + this.state); // NO I18N
                                 if(spliceindex > -1){
                                    this.zcstyles[selector][this.state]._classstyle_.splice(spliceindex ,1);
                                 }
                            	this.zcstyles[selector][this.state]._classstyle_.push(config.removeclass + '_state_' + this.state);
                            	selectedfield.eq(i).addClass(config.removeclass + '_state_' + this.state); // NO I18N
                            	this.updatestyle(config , styleselector , this.zcstyles[selector][this.state], config.noimportant);
                            }else{
                            	selectedfield.eq(i).removeClass(config.actionclass).zremoveClass(config.actionclass);
                            }
                        }
                        if(this.config.postprocess && !selectedelement){
                            this.config.postprocess.bind(this)(selectedfield.eq(i) , result,config, undoaction.actionarray, flag,undo,styles);
                        }
                        break;
                    case 'actionclasslist':
                        undo.node = selectedfield.eq(i);
                        undo.action = 'actionclasslist'; // NO I18N
                        undo.current = result;
                        var previous = { class: '' };
                        config.availableclass.map(getactionclass.bind({el: selectedfield.eq(i) , previous: previous , inst: this , objref: this.zcstyles[selector][this.state]._classstyle_}))
                        undo.previous = previous;
                        if(config.preprocess){
                            config.preprocess(selectedfield.eq(i) , result, undoaction.actionarray, undo);
                        }
                        var resultclass = result.class;
                        if(this.state !== 'default'){
                        	undo.classstate = this.state;
                        	undo.selector = selector;
                    	 	undo.styleselector = styleselector;
                    	 	undo.noimp = config.noimportant;
                        	if(this.zcstyles[selector][this.state] && !this.zcstyles[selector][this.state]._classstyle_){
                        		this.zcstyles[selector][this.state]._classstyle_ = [];
                        	}
                        	if(resultclass || config.removeclass){
                        		config.hasremove = !resultclass || config.removeclass;
                                var classtoadd = resultclass ? resultclass + '_state_' + this.state : config.removeclass + '_state_' + this.state; // NO I18N
                                var classloadindex = this.zcstyles[selector][this.state]._classstyle_.indexOf(classtoadd);
                                if(classloadindex > -1){
                                    this.zcstyles[selector][this.state]._classstyle_.splice(classloadindex , 1);
                                }
                        		this.zcstyles[selector][this.state]._classstyle_.push(classtoadd);
                            	selectedfield.eq(i).addClass(resultclass ? resultclass + '_state_' + this.state : config.removeclass + '_state_' + this.state); // NO I18N
                        	}
                        	this.updatestyle(config , styleselector , this.zcstyles[selector][this.state], config.noimportant);
                        }else{
                        	selectedfield.eq(i).addClass(resultclass).zaddClass(resultclass);
                        }
                        if(config.postprocess){
                            config.postprocess(selectedfield.eq(i) , result, undoaction.actionarray, undo);
                        }
                        if(this.config.postprocess && !selectedelement){
                            this.config.postprocess.bind(this)(selectedfield.eq(i) , result,config, undoaction.actionarray, flag,undo,styles);
                        }
                        break;
                }
                !canvasObjUtils._.isEmpty(undo) && undoaction.actionarray.push(undo);
            }

            !flag && undoaction.actionarray.length && this.savecanvasaction(undoaction);

            return undoaction;
        }


        this.updatestyle = function(config , selector , obj, noimportant){
            var resultstyle =  zutils.zcopyobj(obj);
            if(config.process){
                resultstyle = config.process(config , resultstyle);
            }
            this.addrule(selector , resultstyle, noimportant);
        }

        this.classstylehandling = function(selector , styles){
        	if(this.config.classstyles){
        		var stlen = styles.length;
        		for(var i = 0 ; i < stlen ; i++){
        			var stname = styles[i].split('_state_')[0]; // NO I18N
        			var sel = this.config.classstyles[stname];
        			if(sel){
        				var selec = sel.selector;
        				var seleclen = selec.length;
        				var mainselector = '';
        				if(this.config.classselector){
        					selector = this.config.classselector(selector);
        				}
        				for(var j = 0 ; j < seleclen ; j++){
        					mainselector += selector + selec[j];
        					if(seleclen - 1 !== j){
        						mainselector += ',';
        					}
        				}
        				mainselector = mainselector.replace(new RegExp(stname, 'g'), styles[i].trim());
        				this.addrule(mainselector , sel.style , sel.noimportant);
        			}
        		}
        	}
        }

        this.addrule = function(selector , obj, noimportant , flag , themecreation , customsheet){
            var rules = '';
            var sheet = customsheet ? customsheet : this.sheet;
            var nostyleimp = ['width','height']; // NO I18N
            var restricted = ['_name_' , '_classstyle_' , '_order' , '_inherited']; // NO I18N
            if(this.config.stylepriority){
            	noimportant = this.config.stylepriority(selector , noimportant);
            }
            if(obj._classstyle_){
            	this.classstylehandling(selector, obj._classstyle_);
            }
            for(style in  obj){
            	if(restricted.indexOf(style) > -1){
            		continue;
            	}
                if(this.config.stylecreationcallback && !themecreation){
                    this.config.stylecreationcallback(style , obj[style]);
                }
                rules += this.getReverseCompressionMapping('stylekey' , style)  + ' : ' + this.getReverseCompressionMapping('stylevalue' , obj[style]) +  (!noimportant && obj[style] && !(nostyleimp.indexOf(style) > -1) ? ' !important ; ' : ';');  // NO I18N
            }
            this.deleterule(selector);
            if("insertRule" in sheet) {
                sheet.insertRule(selector + "{" + rules + "}", sheet.cssRules.length);
            }
            else if("addRule" in sheet) {
                sheet.addRule(selector, rules, sheet.cssRules.length);
            }
            if(this.config.poststylecreate && !flag){
            	this.config.poststylecreate.bind(this)(selector , obj , noimportant);
            }
        }
        
        this.adjustSelector = function(selector){
        	if(!selector){
        		return;
        	}
        	// TODO: this should be config in future
        	var parentSelectorIndex = selector.indexOf('.zc-tablist-container');
        	if(parentSelectorIndex > -1) {
        		var match = selector.match(/\S>/); // NO I18N
        		if(match) {
        			var index = match.index + 1;
        			selector = selector.slice(0, index) + " " + selector.slice(index);
        		}
        		// normalize selector
        		//selector = selector.replace('> ', ' > ');
        	}
        	return selector
        }

        this.deleterule =  function(selector){
            var sheet = this.sheet;
            var rules = sheet.cssRules;
            var rulelen = rules.length;
            var deletables = [];
            var adjustedselector = this.adjustSelector(selector);
            for(var i = 0 ; i < rulelen ; i++){
                if(rules[i].selectorText === adjustedselector){
                   deletables.push(i);
                }
            }
            var deletableslen = deletables.length;
            for(var i = 0 ; i < deletableslen ; i++){
                sheet.deleteRule(deletables[i]);
            }
        }


        this.compiletheme = function(){
            var themeconfig = this.config.theme;
            if(!themeconfig){
                return;
            }
            var obj = themeconfig.currenttheme;
            for(key in obj){
                for(state in obj[key]){
                    var selector = themeconfig.selector[key][state];
                    this.deleterule(selector);
                    this.addrule(selector , obj[key][state] , state === 'default' ? true : false , null , true , this.themestylesheet);
                }
                
            }
            if(this.config.classstyles){
            	var classtheme = this.config.classstyles;
            	for(var key in classtheme){
            		if(!classtheme[key].nodefault){
            			var sellen = classtheme[key].selector.length;
            			var selec = ''; // NO I18N
            			for(var i = 0 ; i < sellen ; i++){
            				selec += classtheme[key].selector[i];
            				if(sellen - 1 !== i){
            					selec += ','; // NO I18N
            				}
            			}
            			this.addrule(selec , classtheme[key].style , classtheme[key].noimportant , null, null , this.themestylesheet);
            		}
            	}
            }
        }

        this.getSelectorByElement = function(element , state, exact, specialcondtn){
            var selector;
            if(canvasObjUtils._.isString(element)){
                selector = element;
                element = $(element);
            }else{
                selector = zutils.getSelectorByElement(element);
            }

             
            var closefield = zutils.getClosefield(element[0]);
            var isimagefield = false;
            if(closefield && closefield.classList.contains('zcbdrbox')){
                isimagefield = true;
                var elnode = closefield.querySelector('.zcanvas-data-node'); // NO I18N
                var zcanid = elnode ? elnode.getAttribute('data-zcanvasid') : undefined;
                selector = '.' + zcanid + ' .zcanvas-value-container img';
            }
           /* var isImage = element.closest('.zcbdrbox'); // NO I18N
            if(isImage.length){
                var elnode = isImage.find('.zcanvas-data-node'); // NO I18N
                selector = '.' + elnode.attr('data-zcanvasid') + ' .zcanvas-value-container img';
            } */


            // FIXME: MUSTFIX::::: move this handling to cofig

           /* var isTag = element.children('crm-tag'); // NO I18N
            if(isTag.length){
                selector += ' crm-tag ul li:not(.lyteMultiselectInput)'; // NO I18N
            } */

            var type = this.config && this.config.gettype && this.config.gettype(element);

             if(type && type.zctype === 'field' && !specialcondtn && !isimagefield){ // NO I18N
                 selector = zutils.getSelectorByElement(element.children('.zcanvas-data-node')); // NO I18N
             }

             if(type && type.zctype === 'MERGEFIELD'){
                 selector += ' .zcanvas-merge-container'; // NO I18N
             }

            if(element.hasClass('zcstaticicon')){ // NO I18N
                selector += ' .zciconcontainer'; // NO I18N
            }




            //  These things should done using a config

            if(!selector && element.hasClass('zc-tabs')){ // NO I18N
                var zid = element.closest('.zclayout').attr('id'); // NO I18N
                selector = '#' + zid + '> .zc-tablist-container .zc-tabs';
            }else if(!selector && element.hasClass('tab')){ // NO I18N
                var zid = element.closest('.zclayout').attr('id'); // NO I18N
                selector = '#' + zid + '> .zc-tablist-container > .zc-tabs li.tab';
                if(exact){
                    selector += '[data-tab="' + element.attr('data-tab') + '"]'; // NO I18N
                }
            }else if(!selector && element.hasClass('zc-tab-container')){ // NO I18N
                var zid = element.closest('.zclayout').attr('id'); // NO I18N
                selector = '#' + zid + '> .zc-tab-container';
            }

            if(element.hasClass('zcdivider')){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var zid = element.closest('.zclayout').attr('id'); // NO I18N
                selector = '#' + zid + ' .zc-divider-line';
            }
            

            if(state === 'default'){
                return selector;
            }
            // End of config
            if(this.state === 'hover' || state === 'hover'){
                selector += ':hover'; // NO I18N
            }else if(this.state === 'active' || state === 'active'){ // NO I18N
                selector += '.active'; // NO I18N
            }else if(this.config.customstate && (state !== 'default' || this.state !== 'default')){ // NO I18N
                selector = this.config.customstate(state || this.state , selector , element);
            }

            
            return selector;
        }

        this.applyjsontostyle = function(element , json, allowempty, noimportant, decompress , noprop , selectorflag){
            if(!json){
        		return;
        	}
            var selector = this.getSelectorByElement(element , 'default'); // NO I18N
            if(json && decompress){
                for(var key in json){
                    var statestyle = json[key];
                    var newstyle = {};
                    for(var k in statestyle){
                        var newkey = this.getReverseCompressionMapping('stylekey' , k); // NO I18N
                        var newval = this.getReverseCompressionMapping('stylevalue' , statestyle[k]); // NO I18N
                        newstyle[newkey] = newval;
                    }
                    this.config && this.config.styledecompressioncallback && this.config.styledecompressioncallback(newstyle);
                    json[key] = newstyle;
                }
            }
            this.zcstyles[selector] = json;

            for(key in json){
                switch (key) {
                    case 'default':
                        (json.default || allowempty) && this.addrule(selector , json.default || {} , noimportant);
                        break;
                    case 'hover':
                        var $selector = this.getSelectorByElement(element , 'hover'); // NO I18N
                        (json.hover || allowempty) && this.addrule($selector , json.hover || {}, noimportant);
                        break;
                    case 'active':
                        var $selector = this.getSelectorByElement(element , 'active'); // NO I18N
                        (json.active || allowempty) && this.addrule($selector , json.active || {}, noimportant);
                        break;
                    default:
                        // FIXME: shouldbe handled outside
                        if(key && key.indexOf('zcanvas_') !== 0){
                            continue;
                        }
                    	var _mousekey = '_mousestate_'; // NO I18N
                		var _mousestate = key.indexOf('_mousestate_'); // NO I18N
                    	var _key = key;
                    	if(_mousestate > -1){
                    		_key = _key.slice(0 , _mousestate);
                    	}
                        var $selector =  element && element.hasClass('zcanvas-non-delete') ? '.' + _key + selector : '.' + _key + ' ' + selector; // NO I18N
                        if(selectorflag && this.config && this.config.customstate){
                        	$selector = this.config.customstate(_key , selector , element , json);
                        }
                    	var originalmousestate = '';
                    	if(_mousestate > -1){
                    		var stlen = key.length;
                    		var mouselen = _mousekey.length;
                    		originalmousestate = key.slice(_mousestate + mouselen , stlen);
                    		(json[key] || allowempty) && this.addrule($selector + ( originalmousestate === 'hover' ? ':hover' :  originalmousestate === 'active' ? '.active' : ''   ) , json[key] || {}, noimportant); // NO I18N
                    		key = _key;
                    	}else{
                    		(json[key] || allowempty) && this.addrule($selector , json[key] || {}, noimportant);
                        }
                        
                        // Class list handling
                        // FIXME: should be handled in config
                        if(json[key] && json[key]._classstyle_ && json[key]._classstyle_.length){
                            var rselement = element.hasClass('zcanvas-holder') ? element.parent('.zcanvas-field') : element; // NO I18N
                            rselement.addClass(json[key]._classstyle_.join(' '));
                        }

                        break;
                }
            }
            if(element && !noprop){
                var zdcond = Object.keys(json).filter(function(jstate){
                	return jstate.indexOf('zcanvas') > -1 && !json[jstate]._inherited && jstate !== 'default' && jstate !== 'active' && jstate !== 'hover'; // NO I18N
                }).sort(function(a,b){return (json[a]._order || 0) - (json[b]._order || 0)});
                zdcond = zdcond.map(function(jstate){
                	if(jstate && jstate.indexOf('_mousestate_') > -1){ // NO I18N
                		jstate = jstate.slice(0,jstate.indexOf('_mousestate_'));
                	}
                	return jstate;
                })
                if(zdcond && zdcond.length){
                	element.data('zccustomstate' , canvasObjUtils._.uniq(zdcond)); // NO I18N
                }
                
            }
           
        }

        this.getCompressionMapping = function(compressionkey , key){
            var mapping = this.config.compressionmap;
            if(mapping && mapping[compressionkey] && mapping[compressionkey][key]){
                key = mapping[compressionkey][key];
            }
            return key;
        }

        this.getReverseCompressionMapping = function(compressionkey , key){
            var mapping = this.config.compressionmap;
             if(mapping && mapping[compressionkey]){
                var map = mapping[compressionkey];
                for(var i in map){
                    if(map[i] === key){
                        key = i;
                        break;
                    }
                }
             }
             return key;
        }

        this.savecanvasaction = function(obj , el){
            var basecanvas = {};
            var element = el || this.selectedfields;
            if(element.length > 1){
                element = element.eq(0);
            }
            if(element.is('.zcanvas-editor') && !element.hasClass('zclayout') || element.is('.zcanvas-editor-outer')){
                basecanvas = element;
            }else{
                var $elparent = element.parents('.zcanvas-editor:not(.zclayout)'); // NO I18N
                if($elparent.length){ 
                    basecanvas = $elparent;
                }else{
                    $elparent = element.parents('.zcanvas-editor-outer'); // NO I18N
                    basecanvas = $elparent;
                }
            }
            if(basecanvas.length){
                var inst = basecanvas.data('zcanvas'); // NO I18N
                inst.savecanvasaction(this.selectedfields , obj ? obj.action : null , null , null , null , null , obj);
            }

            return obj;
            
        }

        this.init();
    }
    window.zcanvastools = zcanvastools;
})();;(function(){
    zcanvastools.prototype.tools = {
        templates: {
            select: '<span class="zcanvas-tools-dropdown">\
                        <span class="tool-selected-value"></span>\
                            <span class="tool-open-icon">\
                                <span class="zctoolopenicon"></span>\
                            </span>\
                        </span>\
                    <div class="zcanvas-tools-dropdown-values">\
                        <ul class="dropdown-container-list">\
                        </ul>\
                    </div>',
            list: '<ul class="zcanvas-tools-list-select"></ul>',
            input: '<span class="zcanvas-tools-input">\
            <input type="number"  onkeypress=\'return event.charCode >= 48 && event.charCode <= 57\' class="zcanvastoolinput"/>\
                        <span class="zcanvas-tool-input-param"></span>\
                    </span>',
            slider: '<span class="zcanvas-tools-slider">\
                        <span class="zcanvassliderfill"></span>\
                        <input type="range" class="zcanvastoolslider"/>\
                    </span>'
        },
        handler: {
            select: function(config){
                var toolel = $(config.container);
                var template = this.tools.templates.select;
                var el = $($.parseHTML(template));
                var container = el.find('.dropdown-container-list');
                var selected = el.find('.tool-selected-value');
                var listcontainer = el.closest('.zcanvas-tools-dropdown-values'); // NO I18N
                var selectinput = '<input type="number"  onkeypress=\'return event.charCode >= 48 && event.charCode <= 57\' maxlength="2" class="zcselectinput" />'; // NO I18N
                if (config.multirow) {
                    container.addClass('zcanvas-multirow-dropdown')
                }
                if(config.extravalue){
                    var inel = $(selectinput).val(config.selected);
                    selected.html(inel);
                    selected.append('<span class="zc_measure">px</span>'); // NO I18N
                    var selinput = selected.find('.zcselectinput'); // NO I18N
                    selinput.attr({min: config.min , max: config.max});
                    var validate = function(e){
                        var value = e.target.value;
                        if(value && value % 1 !== 0){
                        	value = Math.floor(value);
                        	e.target.value = value;
                        }
                        var isvalidMin = true;
                        var isvalidMax = true;
                        if(config.actualmin || config.actualmin === 0){
                            isvalidMin = config.actualmin <= parseInt(value);
                        }
                        if(config.actualmax || config.actualmax === 0){
                            isvalidMax = config.actualmax >= parseInt(value);
                        }
                        

                        if(isvalidMin && isvalidMax){
                            el.removeClass('zc-non-valid-input');
                            return true;
                        }else{
                        	if(this && this.main && this.main.config && this.main.config.validationerror){
                        		if(value === ""){
                        			if(e.target.validity && e.target.validity.badInput){
                        				this.main.config && this.main.config.validationerror('badinput'); // NO I18N
                        			}else{
                        				this.main.config && this.main.config.validationerror('empty'); // NO I18N
                        			}
                        		}else{
                        			!isvalidMin && this.main.config && this.main.config.validationerror('minerror' , config.actualmin , config.i18n , config.measurement); // NO I18N
                            		!isvalidMax && this.main.config && this.main.config.validationerror('maxerror' , config.actualmax , config.i18n , config.measurement); // NO I18N
                        		}
                        		
                        	}
                            el.addClass('zc-non-valid-input');
                        }
                    }
                    var inputchangeHandler = function(e){
                    	if(!validate.bind(this)(e)){
                            return false;
                        }
                        var target = $(e.target);
                        var val = target.val();
                        var item = {
                            displayvalue: val,
                            selectvalue: val,
                            style: {
                                
                            }
                        }
                        item.style[config.actionproperty] = val + 'px';

                        if(this.config.onChange){
                            this.config.onChange.bind(this)(this.config , item);
                        }else{
                            this.main.changehandler(this.config , item);
                        }
                    }
                    inel.change(inputchangeHandler.bind({main: this , config: config}));
                }else{
                    selected.html(config.selected ? config.selected : '');
                }
                var keymoment = function(e){
                    var $target = $(e.target);
                    if(e.keyCode === 38	){
                        $target.prev().focus();
                    }else if(e.keyCode === 40){
                        $target.next().focus();
                    }else if(e.keyCode === 13 && !$target.is('input')){ // NO I18N
                        clickhandler.bind(this)(e);
                    }
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    e.stopPropagation(); 
                }
                config.list.forEach(function (item) {
                    var li = $('<li/>',{class: 'zc-keymoment'});
                    li.attr('tabindex','-1'); // NO I18N
                    li.css(item.style || {}).html(item.selectvalue || item.displayvalue).data('zcanvas-tool',item); // NO I18N
                    container.append(li);
                    li.keydown(keymoment.bind(this))
                }.bind({main: this , config: config}));
                toolel.append(el);
        
                var closedropdown = function(){
                    var dropdownobj = listcontainer.prev();
                    listcontainer.toggle();
                    if(dropdownobj.length){
                    	var _position = {};
                        var position = _position = dropdownobj.offset();
                        var offheight = dropdownobj[0].offsetHeight;
                        position.top = position.top + offheight + 1;
                        var child = listcontainer.children();
                        position.width = child.outerWidth();
                        position.height = child.outerHeight(); 
                        if(_position.top + position.height + 30 > window.innerHeight){
                        	position.top = _position.top - offheight - position.height;
                        }
                        listcontainer.css(position);
                    }
                    
                    if(listcontainer.is(':visible')){
                    	if(this.config.openeddropdown &&  !listcontainer.is(this.config.openeddropdown) && this.config.openeddropdown.is(':visible')){ // NO I18N
                        	this.config.openeddropdown.hide();
                        	var dropdownobjold = this.config.openeddropdown.prev();
                            dropdownobjold.removeClass('zcanvas-opened-dropdown');
                        }
                        var list = listcontainer.find('.zc-keymoment.zc-selected-selectitem');
                        if(!list.length){
                            list = listcontainer.find('.zc-keymoment').eq(0);
                        }
                        list.focus();
                        dropdownobj.addClass('zcanvas-opened-dropdown');
                        this.config.openeddropdown = listcontainer;
                        this.config && this.config.tooldropdownopen && this.config.tooldropdownopen(listcontainer , true);
                    }else{
                    	this.config && this.config.tooldropdownopen && this.config.tooldropdownopen(listcontainer , false);
                        dropdownobj.removeClass('zcanvas-opened-dropdown');
                    }
                }
                var clickhandler = function (e) {
                    var target = $(e.target).closest('li');
                    var item = target.data('zcanvasTool'); // NO I18N
                    if (target.is('li')) {

                        var targetdata = target.data('zcanvas-tool'); // NO I18N
                        var displayvalue = targetdata.displayvalue;
                        if(config.extravalue){
                            selected.find('input').val(displayvalue); // NO I18N
                        }else{
                            selected.html(displayvalue);
                        }
                        $(this.config.container).removeClass('zc-non-filled'); // NO I18N
                        item = this.main.tools.preprocesshandler.bind(this)(item);
                        if(this.config.onChange){
                            this.config.onChange.bind(this)(this.config , item);
                        }else{
                            this.main.changehandler(this.config , item);
                        }

                        toolel.find('.zc-selected-selectitem').removeClass('zc-selected-selectitem'); // NO I18N
                        target.addClass('zc-selected-selectitem'); // NO I18N
                    
                    }
                    closedropdown.bind(this.main)();
                }
                el.click(clickhandler.bind({main: this , config: config}));
                var dropdownhandler = function (e) {
                    var _lcontainer =  listcontainer.prev();
                    if (!el.has($(e.target)).length && !e.target.classList.contains('zcanvas-tools-dropdown') && _lcontainer.hasClass('zcanvas-opened-dropdown')) {
                        listcontainer.hide();
                        if(listcontainer.is(this.config.openeddropdown)){
                        	this.config && this.config.tooldropdownopen && this.config.tooldropdownopen(listcontainer , false);
                        }
                        //this.config && this.config.tooldropdownopen && this.config.tooldropdownopen(listcontainer , false);
                        var dropdownobj = _lcontainer;
                        dropdownobj.removeClass('zcanvas-opened-dropdown');
                    }
                }
                $(window).on('click.zcanvasdropdown', dropdownhandler.bind(this));


                this.tools.metaformation.bind({main: this , config: config})(el);
                

            },
            list: function(config){
                var toolel = $(config.container);
                var template = this.tools.templates.list;
                var el = $($.parseHTML(template));
                var container = el.closest('.zcanvas-tools-list-select'); // NO I18N
                var listclickhandler = function (e) {
                    var $li =  $(e.target).closest('li');
                    if(this.config.revert && $li.hasClass('zcanvas-tools-list-selected')){
                        var targetdata = {class: ''};
                        if(this.config.revertobj){
                            targetdata = this.config.revertobj;
                        }
                        $li.removeClass('zcanvas-tools-list-selected');
                    }else{
                        el.find('.zcanvas-tools-list-selected').removeClass('zcanvas-tools-list-selected');
                        var target = $li.addClass('zcanvas-tools-list-selected');
                        var targetdata = target.data('zcanvas-tool'); // NO I18N
                    }
                    if(this.config.onselectbeforeapply){
                        targetdata = this.config.onselectbeforeapply(targetdata);
                    }
                    if(this.config.onChange){
                        this.config.onChange.bind(this)(this.config , targetdata);
                    }else{
                        this.main.changehandler(this.config , targetdata);
                    }
                    
                }
                config.list.forEach(function (item) {
                    var li = $('<li/>');
                    li.html(item.displayvalue).data('zcanvas-tool',item); // NO I18N
                    container.append(li);
                    this.config && this.config.toolcreatecallback && this.config.toolcreatecallback(config , li , item)
                    li.click(listclickhandler.bind({main: this , config: config}));
                    if(item.class){
                    	this.classaction && this.classaction.push(item.class);
                    }
                }.bind(this))
                toolel.append(container);

                this.tools.metaformation.bind({main: this , config: config})(el);
            },
            multilist: function(config){
                var toolel = $(config.container);
                var template = this.tools.templates.list;
                var el = $($.parseHTML(template));
                var container = el.closest('.zcanvas-tools-list-select'); // NO I18N
                var listclickhandler = function (e) {
                    var listitem = $(e.target).closest('li');
                    var targetdata = [];
                    if(!this.config.selecthandler){
                        if(listitem.hasClass('zcanvas-tools-list-selected')) {
                            listitem.removeClass('zcanvas-tools-list-selected');
                        } else{
                            listitem.addClass('zcanvas-tools-list-selected');
                        }
                        el.find('.zcanvas-tools-list-selected').each(function(){
                            targetdata.push($(this).data('zcanvas-tool'));
                        })
                        if(config.onselectbeforeapply){
                            targetdata = this.config.onselectbeforeapply(targetdata, el, listitem);
                        }
                    }else{
                        targetdata = this.config.selecthandler(targetdata, listitem);
                    }

                    this.main.changehandler(this.config , targetdata);
                }
                config.list.forEach(function (item) {
                    var li = $('<li/>');
                    li.html(item.displayvalue).data('zcanvas-tool',item); // NO I18N
                    container.append(li);
                    li.click(listclickhandler.bind({main: this , config: config}));
                })
                toolel.append(container);

                this.tools.metaformation.bind({main: this , config: config})(el);
            },
            input: function(config){
                var toolel = $(config.container);
                var template = this.tools.templates.input;
                var $el = $($.parseHTML(template));
                var $inputel = $el.find('.zcanvastoolinput');
                if(config.hasnegative){
                	$inputel.attr('onkeypress' , 'return event.charCode == 45 || (event.charCode >= 48 && event.charCode <= 57)'); // NO I18N
                }
                var $paramEl = $el.find('.zcanvas-tool-input-param'); //NO I18N
                if(config.measurement){
                    $paramEl.html(config.measurement);
                }else{
                    $paramEl.remove();
                }

                var inputchangeHandler = function(e){
                    if(!validate.bind(this)(e)){
                        return false;
                    }
                    var result = {style: {}};
                    result.style[this.config.actionproperty] = this.main.tools.preprocessinput(e.target.value , config);
                    $(this.config.container).removeClass('zc-non-filled');
                    result = this.main.tools.preprocesshandler.bind(this)(result);
                    if(this.config.onChange){
                        this.config.onChange.bind(this)(this.config , result);
                    }else{
                        this.main.changehandler(this.config , result, this.nocatch);
                    }
                    
                    e.stopImmediatePropagation();
                    if(this.config.sync){
                        var percent = this.main.tools.calculatewidth(e.target , config);
                        var $slide = $(this.config.sync);
                        $slide.find('.zcanvastoolslider').val(e.target.value);
                        $slide.find('.zcanvassliderfill').width(percent);
                        $slide.removeClass('zc-non-filled');
                    }
                    return result;
                }


                if(config.mousewheel){
                    $inputel[0].addEventListener('mousewheel' , inputchangeHandler.bind({main: this , config: config , nocatch: true}));
                   // $inputel.on('mousewheel',inputchangeHandler.bind({main: this , config: config , nocatch: true}));
                }
                $inputel.attr({min: config.min , max: config.max});
                if(config.format === 'float'){
                	$inputel.removeAttr('onkeypress'); // NO I18N
                }
                toolel.html($el);
                // eslint-disable-next-line jQuery-chaining
                $inputel.val(config.selected);

                var validate = function(e){
                    var value = e.target.value;
                    if(config.format !== 'float' && value && value % 1 !== 0){ // NO I18N
                    	value = Math.floor(value);
                    	e.target.value = value;
                    }else if(config.format === 'float' && value && config.fixedpos){ // NO I18N
                    	value = Number(value).toFixed(config.fixedpos);
                    	e.target.value = value;
                    }
                    var isvalidMin = true;
                    var isvalidMax = true;
                    if(config.actualmin || config.actualmin === 0){
                        isvalidMin = config.actualmin <= parseInt(value);
                    }
                    if(config.actualmax || config.actualmax === 0){
                        isvalidMax = config.actualmax >= parseInt(value);
                    }
                    

                    if(isvalidMin && isvalidMax){
                        $el.removeClass('zc-non-valid-input');
                        return true;
                    }else{
                        if(this && this.main && this.main.config && this.main.config.validationerror){
                    		if(value === ""){
                    			if(e.target.validity && e.target.validity.badInput){
                    				this.main.config && this.main.config.validationerror('badinput'); // NO I18N
                    			}else{
                    				this.main.config && this.main.config.validationerror('empty'); // NO I18N
                    			}
                    		}else{
                    			!isvalidMin && this.main.config && this.main.config.validationerror('minerror' , config.actualmin , config.i18n , config.measurement); // NO I18N
                        		!isvalidMax && this.main.config && this.main.config.validationerror('maxerror' , config.actualmax , config.i18n , config.measurement); // NO I18N
                    		}
                    		
                    	}
                        $el.addClass('zc-non-valid-input');
                    }
                }

                

                var inputhandler = function(e){
                    this.nocatch = true;
                    var result = inputchangeHandler.bind(this)(e);
                    if(!result){
                        return;
                    }
                    var prev = this.el.data('zcprev'); // NO I18N
                    if(this.config.onChange){
                        this.config.onChange.bind(this)(this.config , result, false, prev.length ? prev : prev.style)   
                    }else{
                        this.main.changehandler(this.config , result, false, prev.length ? prev : prev.style); // NO I18N
                    }
                    
                    this.el.data('zcprev', result); // NO I18N
                    e.stopImmediatePropagation();
                }

                $inputel.change(inputhandler.bind({main: this , config: config, el: $inputel}));

                if(config.onfocus){
                    $inputel.focus(config.onfocus.bind({config: config}));
                }
                if(this.config && this.config.toolonfocus){
                	$inputel.focus(this.config.toolonfocus);
                }
                if(this.config && this.config.toolonblur){
                	$inputel.blur(this.config.toolonblur);
                }
                this.tools.metaformation.bind({main: this , config: config})($el);
                
            },
            toggle: function(config){
                var toolel = $(config.container);
                toolel.html(config.displayvalue);
                var toggleclickhandler = function(){
                    var el = $(config.container);
                    el.toggleClass('zcanvas-tool-toggle-selected'); // NO I18N
                    var toggle = el.hasClass('zcanvas-tool-toggle-selected'); // NO I18N // NO I18N
                    this.main.changehandler(this.config, toggle , this.config.noprop); // NO I18N
                    if(this.config.onChange){
                        this.config.onChange.bind(this)(toggle);
                    }
                }
                toolel.click(toggleclickhandler.bind({main: this , config: config}));
                if(config.actionclass){
                	this.classaction && this.classaction.push(config.actionclass);
                }
                this.tools.metaformation.bind({main: this , config: config})(toolel);
            },
            slider: function(config){
                var toolel = $(config.container);
                var template = this.tools.templates.slider;
                var $el = $($.parseHTML(template));
                var $inputel = $el.find('.zcanvastoolslider');
                $inputel.attr({min: config.min , max: config.max});
                if(config.step){
                    $inputel.attr('step', config.step);  // NO I18N
                }
                toolel.html($el);
                // eslint-disable-next-line jQuery-chaining
                $inputel.val(config.selected);

                var inputchangeHandler = function(e){
                    var result = { style: {} };
                    result.style[this.config.actionproperty] = this.main.tools.preprocessinput(e.target.value , config);
                    var $slide = $(this.config.container)
                    $slide.removeClass('zc-non-filled');
                    result = this.main.tools.preprocesshandler.bind(this)(result);

                     this.main.changehandler(this.config , result, this.nocatch);
                    e.stopImmediatePropagation();
                    var percent = this.main.tools.calculatewidth(e.target , config);
                    $slide.find('.zcanvassliderfill').width(percent);
                    if(this.config.sync){
                        var $ip = $(this.config.sync);
                        $ip.find('.zcanvastoolinput').val(e.target.value);
                        $ip.removeClass('zc-non-filled');
                    }
                    return result;
                }

                var inputhandler = function(e){
                    this.nocatch = true;
                    var result = inputchangeHandler.bind(this)(e, true);
                    var prev = zutils.zcopyobj( this.el.data('zcprev') ); // NO I18N
                    this.main.changehandler(this.config , result, false, prev.length ? prev : prev.style); // NO I18N
                    this.el.data('zcprev',zutils.zcopyobj(result)); // NO I18N
                    e.stopImmediatePropagation();
                }

                $inputel.change(inputhandler.bind({main: this , config: config, el: $inputel}));
                if(config.mousewheel){
                    $inputel.on('input',inputchangeHandler.bind({main: this , config: config, nocatch: true}));
                }

                this.tools.metaformation.bind({main: this , config: config})($el);
            },
            combinations: function(config){
                var toolelen = config.tools.length;
                for(var i = 0 ; i < toolelen ; i ++){
                    var itemconfig = config.tools[i];
                    this.tools.handler[itemconfig.type].bind(this)(itemconfig);
                }
            }
        },
        populate: {
            select: function(config , obj){
                var isNotFilled = false;
                if(obj.length){
                    var multi = this.multiobject(config , obj);
                    if(!multi){
                        obj = {}
                        obj[config.actionproperty] = '';
                        isNotFilled = true;
                    }else{
                        obj = obj[0];
                    }
                }
                
                var value = obj;
                var toolel = $(config.container);
                var toolmain = toolel.find('.zcanvas-tools-dropdown'); // NO I18N
                var selected = toolmain.find('.tool-selected-value'); 
                var selecteddrop = toolel.find('.zc-selected-selectitem'); // NO I18N
                var droplist = toolel.find('.dropdown-container-list li'); // NO I18N
                var selectedindex = 0;
                if(config.nolabelchange){
                    selected.html(config.selected);
                    return;
                }
                var displayvalue = value;
                if(config.replace){
                    config.list.map(function(item , index){
                        if(item && item.displayvalue && value && item.displayvalue === value.value){
                            displayvalue = value.value;
                            selectedindex = index;
                        }
                    })
                }else{
                    config.list.map(function(item , index){
                        if(item && item.style && value && zutils.objectEquals(item.style,value)){
                            displayvalue = item.displayvalue;
                            selectedindex = index;
                        }else if(item && item.class && value && value.class && item.class === value.class){
                            displayvalue = item.displayvalue;
                            selectedindex = index;
                        }
                    })
                }

                if(canvasObjUtils._.isEmpty(value)){
                    displayvalue = config.defaultselected;
                }else if(config.checkdefaultcondition && config.checkdefaultcondition(value)){
                    displayvalue = config.defaultselected;
                }

                selecteddrop.removeClass('zc-selected-selectitem'); // NO I18N
                if(config.extravalue){
                    displayvalue = value ? value[config.actionproperty] : null;
                    if(!displayvalue){
                        displayvalue = config.defaultselected;
                    }
                    selected.find('input').val( parseInt(displayvalue) );
                }else{
                    selected.html(displayvalue);
                }
                droplist.eq(selectedindex).addClass('zc-selected-selectitem'); // NO I18N

                if(isNotFilled){
                    toolel.addClass('zc-non-filled')
                }else{
                    toolel.removeClass('zc-non-filled');
                }
                toolmain.removeClass('zc-non-valid-input'); // NO I18N
            },
            list: function(config , obj){
                if(obj && obj.length){
                    var multi = this.multiobject(config , obj);
                    if(!multi){
                        obj = {}
                        if(config.availableclass){
                            obj.class = '';
                        }else{
                            obj[config.actionproperty] = '';
                        }
                    }else{
                        obj = obj[0];
                    }
                }
                var value = obj;
                var el = $(config.container).find('.zcanvas-tools-list-select'); // NO I18N
                var container = el.closest('.zcanvas-tools-list-select'); // NO I18N
                var listcount = config.list.length;
                var selectedelement = $(value);
                var containerchild = container.children('li'); // NO I18N
                if(config.availableclass && config.availableclass.length){
                    value.class = value.class ? value.class : '';
                    for(var i = 0 ; i < listcount ; i++){
                        if(value && config.list[i] && config.list[i].class === value.class){
                            selectedelement = containerchild.eq(i); // NO I18N
                        }
                    }
                }else{
                    for(var i = 0 ; i < listcount ; i++){
                        if(value && config.list[i] && zutils.objectEquals(config.list[i].style,value)){
                            selectedelement = containerchild.eq(i); // NO I18N
                        }
                    }
                }
                el.find('.zcanvas-tools-list-selected').removeClass('zcanvas-tools-list-selected');
                selectedelement.addClass('zcanvas-tools-list-selected');
               
            },
            multilist: function(config , obj){
                if(obj.length){
                    var multi = this.multiobject(config , obj);
                    if(!multi){
                        obj = {}
                        if(config.availableclass){
                            obj.class = '';
                        }else{
                            obj[config.actionproperty] = '';
                        }
                    }else{
                        obj = obj[0];
                    }
                }
                var value = obj;
                var el = $(config.container).find('.zcanvas-tools-list-select'); // NO I18N
                var container = el.closest('.zcanvas-tools-list-select'); // NO I18N
                var listcount = config.list.length;
                var selectedelement;
                var containerchild = container.children('li'); // NO I18N
                for(var i = 0 ; i < listcount ; i++){
                    if(value && config.list[i] && objectEquals(config.list[i].style,value)){
                        selectedelement = containerchild.eq(i); // NO I18N
                    }
                    selectedelement = $(value);
                }
                el.find('.zcanvas-tools-list-selected').removeClass('zcanvas-tools-list-selected');
                selectedelement.addClass('zcanvas-tools-list-selected');
            },
            input: function(config , obj){
                var emptyinput = false;
                var isNotFilled = false;
                if(obj.length){
                    var multi = this.multiobject(config , obj);
                    if(!multi){
                        obj = {}
                        if(config.availableclass){
                            obj.class = '';
                        }else{
                            obj[config.actionproperty] = '';
                            emptyinput = true;
                            isNotFilled = true;
                        }
                    }else{
                        obj = obj[0];
                    }
                }
                var styleproperty = config.actionproperty
                var val;
                var value = obj;
                var prevalue = {};
                var $toolel = $(config.container);
                var $el = $toolel.find('.zcanvas-tools-input'); // NO I18N
                var $inputel = $el.find('.zcanvastoolinput');
                var $toolsync = $(config.sync);
                val = value[styleproperty];
                prevalue[styleproperty] = val;
                
                if(val) {
                    var split = val.toString().split(" ");
                    if(split.length > 1){
                        val = canvasObjUtils._.max(split , function(i) { return config.format === 'float' ?  parseFloat(i || 0) : parseInt(i || 0); }); // NO I18N
                    }
                }
                $inputel.val(!emptyinput ?  config.format === 'float' ? parseFloat(val || 0) : parseInt(val || 0)  : ''); // NO I18N
                $el.removeClass('zc-non-valid-input'); // NO I18N
                if(isNotFilled){
                    $toolel.add($toolsync).addClass('zc-non-filled')
                }else{
                    $toolel.add($toolsync).removeClass('zc-non-filled');
                }
                if(config.mousewheel){
                    if(isNotFilled){
                        var result = this.tools.getPrevValue.bind({main: this , config: config})(config);
                    }else{
                        var result = {style: prevalue};
                        if(config.preprocess){
                            result = config.preprocess.bind({main: this , config: config})(result);
                        }
                    }
                    $inputel.data('zcprev',result); // NO I18N
                }
                

               
            },
            toggle: function(config , obj){
                if(obj.length){
                    var multi = this.multiobject(config , obj);
                    if(!multi){
                       config && config.multiselecthandler && config.multiselecthandler.bind(this)(config , true);
                    }else{
                        obj = obj[0];
                    }
                }
                var el = $(config.container);
                var value = obj;
                if(value.flag){
                    el.addClass('zcanvas-tool-toggle-selected');
                }else{
                    el.removeClass('zcanvas-tool-toggle-selected');
                }
            },
            slider: function(config , obj){
                var isNotFilled = false;
                if(obj.length){
                    var multi = this.multiobject(config , obj);
                    if(!multi){
                        obj = {}
                        if(config.availableclass){
                            obj.class = '';
                        }else{
                            obj[config.actionproperty] = '';
                            isNotFilled = true;
                        }
                    }else{
                        obj = obj[0];
                    }
                }
                 
                var styleproperty = config.actionproperty;
                var val;
                var value = obj;
                var prevalue = {};
                var $toolel = $(config.container);
                var $el = $toolel.find('.zcanvas-tools-slider'); // NO I18N
                var $fill = $el.find('.zcanvassliderfill'); // NO I18N
                var $inputel = $el.find('.zcanvastoolslider');
                var toolsync = $(config.sync);
                val = value[styleproperty];
                prevalue[styleproperty] = val;
                if(val) {
                    var split = val.toString().split(" ");
                    if(split.length > 1){
                        val = canvasObjUtils._.max(split , function(i) { return config.format === 'float' ? parseFloat(i || 0) : parseInt(i || 0); }); // NO I18N
                    }
                }
                $inputel.val( config.format === 'float' ? parseFloat(val || 0) : parseInt(val || 0)); // NO I18N
                var percent = this.tools.calculatewidth($inputel.get(0) , config);
                $fill.width(percent);
                if(isNotFilled){
                    $toolel.add(toolsync).addClass('zc-non-filled')
                }else{
                    $toolel.add(toolsync).removeClass('zc-non-filled');
                }
                if(config.mousewheel){
                    if(isNotFilled){
                        var result = this.tools.getPrevValue.bind( {main: this , config: config})(config);
                    }else{
                        var result = {style: prevalue};
                        if(config.preprocess){
                            result = config.preprocess.bind({main: this , config: config})(result);
                        }
                    }
                    
                    $inputel.data('zcprev',result); // NO I18N
                }
            },
            combinations: function(config, obj){
                var toolelen = config.tools.length;
                var shadow;
                if(obj.length){
                    shadow = [];
                    var objlen = obj.length;
                    for(var i = 0 ; i < objlen ; i++){
                        shadow.push( config.population(obj[i]) );
                    }
                }else{
                    shadow = config.population(obj);
                }
                for(var i = 0 ; i < toolelen ; i ++){
                    var itemconfig = config.tools[i];
                    if(shadow.length){
                        var result = [];
                        var shadlen = shadow.length;
                        for(var j = 0 ; j < shadlen ; j ++){
                            var sobj = {};
                            sobj[itemconfig.actionproperty] = shadow[j][itemconfig.actionproperty];
                            result.push(sobj);
                        }
                    }else{
                        var result = {};
                        result[itemconfig.actionproperty] = shadow[itemconfig.actionproperty];
                    }
               //     if(itemconfig.type == 'select'){
                        this.tools.populate[itemconfig.type].bind(this)(itemconfig, result);
                //    }else{
                //        this.tools.populate[itemconfig.type].bind(this)(itemconfig, shadow);
                //    }
                }
            }
        },
        helpers: {
            formation: {
                margin: function(obj){
                    if(!obj.margin){
                        obj.margin = '';  // NO I18N
                    }
                    obj.margin = (obj['margin-top'] || '0px') + ' ' +  (obj['margin-right'] || '0px') + ' ' + (obj['margin-bottom'] || '0px') + ' ' + ( obj['margin-left']  || '0px' ); // NO I18N
                    delete obj['margin-left']; // NO I18N
                    delete obj['margin-right']; // NO I18N
                    delete obj['margin-top']; // NO I18N
                    delete obj['margin-bottom']; // NO I18N
                },
                padding: function(obj){
                    if(!obj.padding){
                        obj.padding = ''; // NO I18N
                    }
                    obj.padding = (obj['padding-top'] || '0px') + ' ' +  (obj['padding-right'] || '0px') + ' ' + (obj['padding-bottom'] || '0px') + ' ' + ( obj['padding-left']  || '0px' ); // NO I18N
                    delete obj['padding-left']; // NO I18N
                    delete obj['padding-right']; // NO I18N
                    delete obj['padding-top']; // NO I18N
                    delete obj['padding-bottom']; // NO I18N
                },
                radius: function(obj){
                    if(!obj['border-radius']){ // NO I18N
                        obj['border-radius'] = ''; // NO I18N
                    }
                    obj['border-radius'] = (obj['border-top-left-radius'] || '0px') + ' ' +  (obj['border-top-right-radius'] || '0px') + ' ' + (obj['border-bottom-left-radius'] || '0px') + ' ' + ( obj['border-bottom-right-radius']  || '0px' ); // NO I18N
                    delete obj['border-top-left-radius']; // NO I18N
                    delete obj['border-top-right-radius']; // NO I18N
                    delete obj['border-bottom-left-radius']; // NO I18N
                    delete obj['border-bottom-right-radius']; // NO I18N
                },
                radiusp: function(obj){
                    if(!obj['border-radius']){ // NO I18N
                        obj['border-radius'] = ''; // NO I18N
                    }
                    obj['border-radius'] = (obj['border-top-left-radius'] || '0%') + ' ' +  (obj['border-top-right-radius'] || '0%') + ' ' + (obj['border-bottom-left-radius'] || '0%') + ' ' + ( obj['border-bottom-right-radius']  || '0%' ); // NO I18N
                    delete obj['border-top-left-radius']; // NO I18N
                    delete obj['border-top-right-radius']; // NO I18N
                    delete obj['border-bottom-left-radius']; // NO I18N
                    delete obj['border-bottom-right-radius']; // NO I18N
                }
            },
            deformation:  {
                margin: function(obj){
                    if(obj.margin){
                        var result = obj.margin.split(" ");
                        if(result.length > 1){
                            obj['margin-top'] = result[0]; // NO I18N
                            obj['margin-right'] = result[1]; // NO I18N
                            obj['margin-bottom'] = result[2]; // NO I18N
                            obj['margin-left'] = result[3]; // NO I18N
                        }else{
                            obj['margin-top'] = obj['margin-right'] = obj['margin-bottom'] = obj['margin-left'] = result[0]; // NO I18N
                        }
                       
                        delete obj.margin;
                    }
                },
                padding: function(obj){
                    if(obj.padding){
                        var result = obj.padding.split(" ");
                        if(result.length > 1){
                            obj['padding-top'] = result[0]; // NO I18N
                            obj['padding-right'] = result[1]; // NO I18N
                            obj['padding-bottom'] = result[2]; // NO I18N
                            obj['padding-left'] = result[3]; // NO I18N
                        }else{
                            obj['padding-top'] = obj['padding-right'] = obj['padding-bottom'] = obj['padding-left'] = result[0]; // NO I18N
                        }
                       
                        delete obj.padding;
                    }
                },
                radius: function(obj){
                    if(obj['border-radius']){
                        var result = obj['border-radius'].split(" "); // NO I18N
                        if(result.length > 1){
                            obj['border-top-left-radius'] = result[0]; // NO I18N
                            obj['border-top-right-radius'] = result[1]; // NO I18N
                            obj['border-bottom-left-radius'] = result[2]; // NO I18N
                            obj['border-bottom-right-radius'] = result[3]; // NO I18N
                        }else{
                            obj['border-top-left-radius'] = obj['border-top-right-radius'] = obj['border-bottom-left-radius'] = obj['border-bottom-right-radius'] = result[0]; // NO I18N
                        }
                       
                        delete obj['border-radius']; // NO I18N
                    }
                },
                radiusp: function(obj){
                    if(obj['border-radius']){
                        var result = obj['border-radius'].split(" "); // NO I18N
                        if(result.length > 1){
                            obj['border-top-left-radius'] = result[0]; // NO I18N
                            obj['border-top-right-radius'] = result[1]; // NO I18N
                            obj['border-bottom-left-radius'] = result[2]; // NO I18N
                            obj['border-bottom-right-radius'] = result[3]; // NO I18N
                        }else{
                            obj['border-top-left-radius'] = obj['border-top-right-radius'] = obj['border-bottom-left-radius'] = obj['border-bottom-right-radius'] = result[0]; // NO I18N
                        }
                       
                        delete obj['border-radius']; // NO I18N
                    }
                }
            }
        },
        getvalue: {
            input: function(config , selectedIndex){
                var $container = $(config.container);
                if(selectedIndex !== undefined && $container.hasClass('zc-non-filled')){
                   var val = this.main.tools.extractvalue.bind(this)(config , selectedIndex);
                }else{
                    var val = $container.find('.zcanvastoolinput').val(); // NO I18N
                }
                return parseInt(val);
            },
            select: function(config , selectedIndex){ 
                var $container = $(config.container);
                if(selectedIndex !== undefined && $container.hasClass('zc-non-filled')){
                    this.main.tools.extractvalue.bind(this)(config , selectedIndex);
                }
                var value = $container.find('.tool-selected-value').html(); // NO I18N
                var listlen = config.list.length;
                for(var i = 0 ; i < listlen ; i ++){
                    if(config.list[i].displayvalue === value ){
                        return config.list[i].style[config.actionproperty];
                    }
                }
            }
        },
        preprocesshandler: function(item){
            if(this.config.preprocess){
                var selfieldlen = this.main.selectedfields ? this.main.selectedfields.length : 0;
                if(selfieldlen > 1){
                    var itemcopy = zutils.zcopyobj2(item);
                    item = [];
                    for(var i = 0 ; i < selfieldlen; i ++){
                        item.push(this.config.preprocess.bind(this)(zutils.zcopyobj2( itemcopy ), i));
                    }
                }else{
                    item = this.config.preprocess.bind(this)(item);
                }
            }
            return item;
        },
        extractvalue: function(config , selectedIndex){
            var element = this.main.selectedfields.eq(selectedIndex);
            var selector = this.main.getSelectorByElement(element , 'default'); // NO I18N
            var styles = this.main.getstylebyselector(selector, true);
            if(config.parent){
                styles = styles && styles[this.main.state] ? styles[this.main.state] : {};
                var popval = this.main.availabletools[config.parent].population(styles);
                return popval &&  popval[config.actionproperty];
            }
        },
        getPrevValue: function(config){
            var elements = this.main.selectedfields;
            var result = [];
            var ellen = elements.length;
            for(var i = 0 ; i < ellen ; i++){
                var element = this.main.selectedfields.eq(i);
                var selector = this.main.getSelectorByElement(element , 'default'); // NO I18N
                var styles = this.main.getstylebyselector(selector , true);
                var style = styles && styles[this.main.state] ? styles[this.main.state] : {};
                var restyle = {};
                restyle[config.actionproperty] = style[config.actionproperty] || '';
                if(config.preprocess){
                    restyle = config.preprocess.bind(this)(restyle , i);
                }else{
                    restyle = {style : restyle};
                }
                result.push(restyle);
            }
            return result;
        },
        metaformation: function(el){
            if(this.main.config.preformattr){
                var keyname = this.config[this.main.config.preformattr.key] || this.config[this.main.config.preformattr.key2];

                for(var key in this.main.config.preformattr.attr){
                    keyname && el.attr(key , this.main.config.preformattr.attr[key] + keyname);
                }
            }
        },
        calculatewidth: function(el , config){
            var value = config.format === 'float' ? parseFloat(el.value) : parseInt(el.value); // NO I18N
            var min = parseInt(el.min);
            var max = parseInt(el.max);
            var percent = Math.ceil((value - min) / (max - min) * 100);
            return  percent + '%';
        },
        preprocessinput: function(value , config){
            var input = value + config.measurement;
            var number = config.format === 'float' ? parseFloat(input) : parseInt(input); // NO I18N
            var output = isNaN(number) ? '' : number + (input.match(/px|%|em/) || 'px');
            if(config.nomeasurement){
                output = parseFloat(output);
            }
            return output;
        }
    }
})();;(function(){
    zcanvastools.prototype.copydata = {};
    zcanvastools.prototype.copyrldata = {};

    zcanvastools.prototype.revertpaste = function(data, method , node){
    	var element = node;
    	if(data.isfield){
    		element = node.closest('.zcanvas-field'); // NO I18N
    	}
        if(method === 'undo'){ // NO I18N
        	if(data.previousclass && data.previousclass.length || data.currentclass && data.currentclass.length){
        		element.removeClass(this.classaction.join(" "));
            	this.classaction.map(function(icl){ element.zremoveClass(icl);})
            	data.previousclass && data.previousclass.length && element.addClass(data.previousclass.join(" ")).zaddClass(data.previousclass);
            }
            if(data.previous && !data.previous.default){
                data.previous.default = {};
            }
            this.applyjsontostyle(data.node , data.previous , true);
        }else{
        	if(data.previousclass && data.previousclass.length || data.currentclass && data.currentclass.length){
        		element.removeClass(this.classaction.join(" "));
            	this.classaction.map(function(icl){ element.zremoveClass(icl);})
            	data.currentclass && data.currentclass.length && element.addClass(data.currentclass.join(" ")).zaddClass(data.currentclass);
            }
            if(data.current && !data.current.default){
                data.current.default = {};
            }
            this.applyjsontostyle(data.node , data.current, true);
        }
    }

    zcanvastools.prototype.getactionableclass = function(el){
    	var classes = el.attr('data-zcanvasclass') || ''; // NO I18N
    	if(classes){
    		classes = classes.split(" ");
    	}
    	return canvasObjUtils._.intersection(jsonCreation.toolinst.classaction, classes);
    }

    zcanvastools.prototype.copystyle = function(flag , istypeneeded){
        var element = flag || this.selectedfields;
        var type = this.config.gettype(element);
        if(type.zctype === 'field' || type.zctype === 'button' ){
            var style = {
                field: {},
                value: {},
                holder: {},
                label: {}
            }
            var selector = zutils.getSelectorByElement(element);
            style.field = zutils.zcopyobj2( this.getstylebyselector(selector) );
            var fieldclass = this.getactionableclass(element);
            if(fieldclass && fieldclass.length){
            	style.field.class = fieldclass;
            }
            var value_ = element.find('.zcanvas-value-container'); // NO I18N
            var vselector = zutils.getSelectorByElement(value_); // NO I18N
            style.value = zutils.zcopyobj2( this.getstylebyselector(vselector) );
            var valueclass = this.getactionableclass(value_);
            if(valueclass && valueclass.length){
            	style.value.class = valueclass;
            }
            var holder_ = element.find('.zcanvas-holder'); // NO I18N
            var hselector = zutils.getSelectorByElement(holder_); // NO I18N
            style.holder = zutils.zcopyobj2( this.getstylebyselector(hselector) );
            var holderclass = this.getactionableclass(holder_);
            if(holderclass && holderclass.length){
            	style.holder.class = holderclass;
            }
            var label_ = element.find('.zcanvas-label'); // NO I18N
            var lselector = zutils.getSelectorByElement(label_); // NO I18N
            style.label = zutils.zcopyobj2( this.getstylebyselector(lselector) );
            var labelclass = this.getactionableclass(label_);
            if(labelclass && labelclass.length){
            	style.label.class = labelclass;
            }
        } else{
            var style = {};
            var selector = this.getSelectorByElement(element,'default'); // NO I18N
            var lstyle = zutils.zcopyobj2( this.getstylebyselector(selector) );
            if(lstyle){
                for(var stkey in lstyle){
                    var restrictedstyles = this.config && this.config.copypasterestriction && this.config.copypasterestriction[type.zctype] ;
                    if(restrictedstyles){
                        var restlen = restrictedstyles.length;
                        for(var ri = 0 ; ri < restlen ; ri++){
                            if(lstyle[stkey] && lstyle[stkey][restrictedstyles[ri]]){
                                delete lstyle[stkey][restrictedstyles[ri]];
                            }
                        }
                    }
                }
            }
            var lclass = this.getactionableclass(element);
            if(lclass && lclass.length){
            	lstyle.class = lclass;
            }
            if(type.zctype === "value" || type.zctype === 'holder' || type.zctype === 'label'){
                var style = {};
                style[type.zctype] = lstyle;
                type.zctype = this.config.gettype(element.closest('.zcanvas-field')).zctype; // NO I18N
            }else{ 
                style = lstyle;
            }

        }
        
        if(flag){
            if(istypeneeded){
                var resultstyle = {};
                resultstyle.type = type.zctype;
                resultstyle.style = style;
                return resultstyle;
            }else{
                return style;
            }
            
        }
        this.copydata = {};
        this.copydata[type.zctype] = JSON.parse( JSON.stringify(style) );
    }

    zcanvastools.prototype.haspaste = function(flag){ 
        var element = flag || this.selectedfields;
        var type = this.config.gettype(element);
        var zctype = type.zctype;
        if(zctype === 'value' || zctype === 'holder' || zctype === 'label'){ // NO I18N
        	zctype = 'field'; // NO I18N
        }
        if(this.copydata[zctype]){
            return true;
        }
        return false;
    }

    zcanvastools.prototype.haspasterl = function(){
        if( ! canvasObjUtils._.isEmpty(this.copyrldata)){
            return true;
        }
        return false;
    }

    zcanvastools.prototype.haspastetable = function(){
        var target = $(event.target);
        var type = target.data('selection'); // NO I18N
        // eslint-disable-next-line no-extra-parens
        if(type && this.copydata && ((this.copydata.tablecolumnstyle && this.copydata.tablecolumnstyle[type]) || (this.copydata.field && this.copydata.field[type]))){
            return true;
        }
        return false;
     }
 

    zcanvastools.prototype.pastestyle = function( directdata , flag , noimportant, sendundo){
        var undoaction = {action:'link' , actionarray: [], node: '#'}; // NO I18N
        var element = flag || this.selectedfields;
        var ellen = element.length;
        for(var i = 0 ; i < ellen ; i++){
        	if(!this.haspaste(element.eq(i) , true) && !flag){
                continue;
            }
            var selector = this.getSelectorByElement(element.eq(i),'default'); // NO I18N
            var type = this.config.gettype(element.eq(i));
          
            var copydata = directdata || (this.copydata[type.zctype] || {});
            if(type.zctype === 'value' || type.zctype === 'holder' || type.zctype === 'label'){
                var subtype = this.config.gettype(element.eq(i).closest('.zcanvas-field')).zctype; // NO I18N
                copydata = directdata || ( this.copydata[subtype] && this.copydata[subtype][type.zctype] ? this.copydata[subtype][type.zctype] : {});
            }
            var undo = {action: 'callback', node: selector, previous: zutils.zcopyobj2(this.getstylebyselector(selector)) }; // NO I18N
            var actionableclass = this.getactionableclass(element.eq(i));
            if(actionableclass && actionableclass.length && undo.previous){
            	undo.previousclass = actionableclass;
            }
            if(type.zctype === 'field' || type.zctype === 'button'){ // NO I18N
            	// Ignored field styling since we apply changes to holder
            	var fieldkey = type.zctype === 'field' ? 'holder' : 'field'; // NO I18N
                this.pasteapply(selector , copydata[fieldkey] || {} , false , element.eq(i));
                fieldkey !== 'field' && this.pasteapply(selector , copydata.field || {} , false, element.eq(i) , true); // NO I18N
                undo.current = zutils.zcopyobj2(this.getstylebyselector(selector));
                undo.currentclass = this.getactionableclass(element.eq(i));
                undo.isfield = fieldkey !== 'field' ; // NO I18N
                
                var value_ = element.eq(i).find('.zcanvas-value-container'); // NO I18N
                var vselector = zutils.getSelectorByElement(value_); // NO I18N
                var undov = {action: 'callback', node: vselector, previous: zutils.zcopyobj2(this.getstylebyselector(vselector)) }; // NO I18N
                
    
                var holder_ = element.eq(i).find('.zcanvas-holder'); // NO I18N
                var hselector = zutils.getSelectorByElement(holder_); // NO I18N
                var undoh = {action: 'callback', node: hselector, previous: zutils.zcopyobj2(this.getstylebyselector(hselector)) }; // NO I18N
    
                var lable_ = element.eq(i).find('.zcanvas-label'); // NO I18N
                var lselector = zutils.getSelectorByElement(lable_); // NO I18N
                var undol = {action: 'callback', node: lselector, previous: zutils.zcopyobj2(this.getstylebyselector(lselector)) }; // NO I18N
    
                if(vselector){
                	var actionableclassv = this.getactionableclass(value_);
                    if(actionableclassv && actionableclassv.length && undov.previous){
                    	undov.previousclass = actionableclassv;
                    }
                	this.pasteapply(vselector , copydata.value || {} , false , value_);
                    undov.current = zutils.zcopyobj2(this.getstylebyselector(vselector));
                    undov.currentclass = this.getactionableclass(value_);
                    undov.callback = this.revertpaste.bind(this);
                    undoaction.actionarray.push(undov);
                }
                
                if(hselector){
                	var actionableclassh = this.getactionableclass(holder_);
                    if(actionableclassh && actionableclassh.length && undoh.previous){
                    	undoh.previousclass = actionableclassh;
                    }
                	this.pasteapply(hselector , copydata.holder || {} , false , holder_);
                    undoh.current = zutils.zcopyobj2(this.getstylebyselector(hselector));
                    undoh.currentclass = this.getactionableclass(holder_);
                    undoh.callback = this.revertpaste.bind(this);
                    undoaction.actionarray.push(undoh);
                }
                
                if(lselector){
					 var actionableclassl = this.getactionableclass(lable_);
					 if(actionableclassl && actionableclassl.length && undol.previous){
						undol.previousclass = actionableclassl;
					 }
                	 this.pasteapply(lselector , copydata.label || {} , false , lable_);
                     undol.current = zutils.zcopyobj2(this.getstylebyselector(lselector));
                     undol.currentclass = this.getactionableclass(lable_);
                     undol.callback = this.revertpaste.bind(this);
                     undoaction.actionarray.push(undol);
                }
               
            }else{
                this.pasteapply(selector , copydata , noimportant , element.eq(i));
                undo.current = zutils.zcopyobj2(this.getstylebyselector(selector));
                undo.currentclass = this.getactionableclass(element.eq(i));
            }
            if(!flag || !undoaction.actionarray.length || sendundo){
                undo.callback = this.revertpaste.bind(this);
                undoaction.actionarray.push(undo);
            }
        }
        if(!flag && undoaction.actionarray.length){
            this.savecanvasaction(undoaction);
            if(element){
            	element.length === 1 ? type && this.executetools(type.zctype) : this.executetools('multiple'); // NO I18N
            }
        }
        if(sendundo){
        	return undoaction;
        }
    }
    zcanvastools.prototype.pasteapply = function(selector,copydata,noimportant,element){ // onlyclass
        var currentstyle = this.getstylebyselector(selector, true);
        element.removeClass(this.classaction.join(" "));
    	this.classaction.map(function(icl){ element.zremoveClass(icl);})
        if(copydata.class && copydata.class.length){
        	element.addClass(copydata.class.join(" ")).zaddClass(copydata.class.join(" "));
        }
      /*  if(onlyclass){
        	return;
        } */
        if(copydata){
          //  currentstyle.default = canvasObjUtils._.extend(currentstyle.default || {} , copydata.default || {})
        	currentstyle.default = zutils.zcopyobj2(copydata.default || {});
            this.addrule(selector , currentstyle.default , noimportant);
        }
        if(copydata.hover){
          //  currentstyle.hover = canvasObjUtils._.extend(currentstyle.hover || {} , copydata.hover || {})
        	currentstyle.hover = zutils.zcopyobj2(copydata.hover || {});
            this.addrule(selector + ':hover' , currentstyle.hover , noimportant); // NO I18N
        }
        if(copydata.active){
          //  currentstyle.active = canvasObjUtils._.extend(currentstyle.active || {} , copydata.active || {})
        	currentstyle.active = zutils.zcopyobj2(copydata.active || {});
            this.addrule(selector + '.active' , currentstyle.active , noimportant); // NO I18N
        }
    }
    zcanvastools.prototype.copyrl = function(){
        var copydata = {};
        var element = this.selectedfields;
        var $element = $(element).closest('.zcanvas-static-editor'); // NO I18N
        var json = $element.data('zcanvas');  // NO I18N
        var titleel = $element.find('.zcanvas-title-editor');
        var titlejson = {};
        if(json){
            var data = jsonCreation.compress(json.data, ['zcanvasId','datatype','type','_type','ui','customComponent','theme','name'] , null , true);  // NO I18N
            copydata = data;
        }
        if(titleel.length){
            titlejson = canvasOutput.createJson(titleel);
        }
        this.copyrldata = {relatedlist: copydata , container:this.copystyle($element), title : titlejson};  // NO I18N
    }
    zcanvastools.prototype.pasterl = function(){
        var element = this.selectedfields;
        var $element = $(element).closest('.zcanvas-static-editor'); // NO I18N
        var previous = canvasOutput.createJson($element); // NO I18N
        
        var copydata = JSON.parse(JSON.stringify(this.copyrldata));  // NO I18N
        var elementdata = $element.data('zcanvas');  // NO I18N
        var $parenteditor = $element.parent();
        var parentinstance = $parenteditor.data('zcanvas'); // NO I18N
        if(parentinstance){
            var config = parentinstance.config;
            
            if(copydata.relatedlist.children.length && !$element.has('.zc-noneditable-rl').length){
                zcanvasrelatedList.cleareditors($element.find('.zcanvas-relatedlist-container'));
                elementdata.data = config.relatedlistdata(copydata.relatedlist,elementdata,elementdata.rellistdata[0]);
                zcanvasrelatedList.createeditors($element, config);
                var editors = $element.find('.zcanvas-non-delete.zcanvas-editor'); // NO I18N
                editors.each(function(){
                    zcanvasrelatedList.updatemenudata($(this), zcanvasrelatedList.currentmenu.opened.replace('#','')); // NO I18N
                })
            }
            this.pastestyle(copydata.container , $element);
            var titleel = $element.find('.zcanvas-title-editor');
            var titlerect = titleel.get(0).getBoundingClientRect();
            copydata.title && copydata.title.ui && titleel.addClass(copydata.title.ui.value.class);
            // titleel.css(copydata.title.ui.value.style)
            var styleObj = copydata.title.ui.value.style;
            titleel.zccss(styleObj);
            var btndata = [];
            titleel.find('.zccrlaction').each(function(){
                btndata.push($(this).data('zcanvas')); // NO I18N
            })
            $element.find('.zcanvas-title-editor .zcanvas').zremove();
            var titleinstance = titleel.data('zcanvas'); // NO I18N
            var btnlen = copydata.title.children.length;
            var $elcopy = JSON.parse(JSON.stringify(elementdata));
            var splicearray = [];
            var mappedbtnlen = 0;
            var reduceaction = function(action , index){
                if(action.id === btndata[mappedbtnlen].id){
                    $elcopy.actions.splice(index,1);
                }
            }
            for(var i = 0 ; i < btnlen; i++){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                if(copydata.title.children[i] && copydata.title.children[i].zctype === 'button'){
                    var zid = zutils.getRandomId();
                    // eslint-disable-next-line webperf/no-multipleDOMLookup
                    copydata.title.children[i].zcanvasId = zid;
                    if(btndata && btndata[mappedbtnlen] && $elcopy.actions){
                        // eslint-disable-next-line webperf/no-multipleDOMLookup
                        copydata.title.children[i] = canvasObjUtils._.extend(copydata.title.children[i] , btndata[mappedbtnlen]);
                        
                        $elcopy.actions.map(reduceaction);
                        mappedbtnlen++;
                    }else{
                       splicearray.push(i);
                    }
                } 
            }


            var splicelen = splicearray.length;
            for(var i = 0 ; i < splicelen ; i++){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                copydata.title.children.splice(splicearray[i] - i,1);
            }
            // eslint-disable-next-line webperf/no-multipleDOMLookup
            copydata.title.children.map(function(item){ if(item.datatype !== 'button'){ item.zcanvasId = zutils.getRandomId() } }) // NO I18N
            titleinstance.addElement(copydata.title.children);
            $element.find('.zcanvas-title-editor .zc_disabled .zctextcontent').html(elementdata.zclabel);
            var $titleel =  $element.find('.zcanvas-title-editor .ui-draggable');
            $titleel.draggable('option','scope',titleinstance.config.zcdropscope); // NO I18N
            var writeobj = [];
            $titleel.each(function(){
                var $this = $(this);
                $this.draggable('option','containment','parent'); // NO I18N
                var pos = $this.offset();
                var dim = $this.outerWidth();
                if(titlerect.left + titlerect.width < pos.left + dim){
                	writeobj.push({left : titlerect.width - dim });
                }else{
                	writeobj.push(null);
                }
            });
            
            var writelen = writeobj.length;
            for(var i = 0 ; i < writelen ; i++){
            	if(writeobj[i]){
            		$titleel.eq(i).css(writeobj[i]);
            	}
            }
            
            elementdata.template = !canvasObjUtils._.isEmpty(elementdata.data) && config.relatedlistcompile(elementdata.data,elementdata);
            var current = canvasOutput.createJson($element);
            parentinstance.rerender && parentinstance.rerender($element , previous, current);
        }
    }


    // Label

    zcanvastools.prototype.revertlabel = function(data , method){
        var rdata = data.data;
        var _field = zutils.getElementBySelector(data.node)
        var node = _field.find('.zcanvas-data-node');
        if(method === 'undo'){
           rdata.hideLabel = !data.flag;
        }else{
            rdata.hideLabel = data.flag;
        }
        node.replaceWith(zutils.getEditorView(rdata,true));
        var parentinst = $('#zcanvas-editor-outer').data('zcanvas'); // NO I18N
        parentinst && parentinst.config && parentinst.config.fieldrerender && parentinst.config.fieldrerender(_field);
        var labelel = _field.find('.zcanvas-label'); // NO I18N
        var valueel = _field.find('.zcanvas-value-container'); //NO I18N
        if(data.classlist){
        	if(data.classlist.label && data.classlist.label.length){
        		labelel.addClass(data.classlist.label.join(" ")).zaddClass(data.classlist.label.join(" "));
        	}
        	if(data.classlist.label && data.classlist.value.length){
        		valueel.addClass(data.classlist.value.join(" ")).zaddClass(data.classlist.value.join(" "));
        	}
        }
        zcanvastools.prototype.refreshStates(data.existingstates , _field , labelel , valueel);
        if(data.icon || data.previcon){
        	function removeExp(i,classname){
                return (classname.match(/(^|\s)icon-Icon_\S+/g) || []).join(' ');
            }
            var el = $(zutils.getElementBySelector(data.node));
            var labels = el.find('.zcanvas-label');
            if(labels.length){
            	labels.html('').removeClass(removeExp).addClass(data.previcon || data.icon).addClass('zcicon').attr('zc-icon',data.previcon || data.icon);
                el.addClass('zccbuttonicon').zaddClass('zccbuttonicon'); //NO I18N
            }else{
            	el.removeClass('zccbuttonicon').zremoveClass('zccbuttonicon'); //NO I18N
            }
            var parentdata = zutils.getParentData(el);
            parentdata && parentdata.bindlabelresize && parentdata.bindlabelresize(el);
        }
    }

    zcanvastools.prototype.togglelabel = function(flag , icon , previcon){
        var element = this.selectedfields;
        var ellen = element.length;
        var undoaction = {action: 'link', actionarray: [], node: '#'};  // NO I18N
        var parentinst = $('#zcanvas-editor-outer').data('zcanvas'); // NO I18N
        for(var i = 0 ; i < ellen ; i ++){
            var undo = {action: 'callback' , callback: this.revertlabel};  // NO I18N
            var field = element.eq(i).closest('.zcanvas-field')  // NO I18N
            var lebelelement = field.find('.zcanvas-data-node'); // NO I18N
            if(!lebelelement.length){
                continue;
            }
            var zdata = null;
            if(field.hasClass('zc-rl-field') || field.hasClass('zclayout')){ // NO I18N
            	zdata = field.data('zcanvas'); // NO I18N
            }
            if(!zdata){
            	zdata = lebelelement.zdata()[0];
            }
            undo.node = zutils.getSelectorByElement(field);
            undo.flag = flag;
            undo.data = zutils.zcopyobj( zdata );
            var data = zutils.zcopyobj( zdata );
            data.hideLabel = flag;
            undo.icon = icon; 
            if(previcon){
            	undo.previcon = lebelelement.children('.zcanvas-label').attr('zc-icon'); // NO I18N
            }

            if(!data.zcvalue){
                data.zcvalue = data.value;
            }

            if(!data.zclabel){
                data.zclabel = data.label;
            }
            
            var fieldlable = field.find('.zcanvas-label'); // NO I18N
            var fieldval = field.find('.zcanvas-value-container'); // NO I18N

            undo.classlist = {
            	label: this.getactionableclass(fieldlable), // NO I18N
            	value : this.getactionableclass(fieldval) // NO I18N
            }

            var existingstates = this.getStates(field , fieldlable , fieldval);

            undo.existingstates = existingstates;

            lebelelement.replaceWith(zutils.getEditorView(data,true));
         // eslint-disable-next-line webperf/no-multipleDOMLookup
            var labelel = field.find('.zcanvas-label'); // NO I18N
         // eslint-disable-next-line webperf/no-multipleDOMLookup 
            var valueel = field.find('.zcanvas-value-container'); // NO I18N
            
            if(undo.classlist.label && undo.classlist.label.length){
        		labelel.addClass(undo.classlist.label.join(" ")).zaddClass(undo.classlist.label.join(" "));
        	}
        	if(undo.classlist.label && undo.classlist.value.length){
        		valueel.addClass(undo.classlist.value.join(" ")).zaddClass(undo.classlist.value.join(" "));
        	}

            this.refreshStates(existingstates , field , labelel , valueel);
            parentinst && parentinst.config && parentinst.config.fieldrerender && parentinst.config.fieldrerender(field);
            undoaction.actionarray.push(undo);
        }
        this.savecanvasaction(undoaction, field);
    }

    zcanvastools.prototype.labellefttop = function(flag, style){ 
        this.changehandler( {actiontype: 'action'} , {style: {'flex-direction': style ? style :  flag ? 'column' : 'row' }} , null , null , function(field){  // NO I18N
            var field = field.closest('.zcanvas-field'); //NO I18N
            return field.find('.zcanvas-data-node'); // NO I18N
        });
    }

    zcanvastools.prototype.getStates = function(field , labelel , valueel){
        var resultobj = {}
        var datanode = field.children('.zcanvas-holder'); // NO I18N
        labelel = labelel || field.find('.zcanvas-label'); // NO I18N
        valueel = valueel || field.find('.zcanvas-value-container'); // NO I18N

        resultobj.datanode = datanode.data('zccustomstate'); // NO I18N
        resultobj.label = labelel.data('zccustomstate'); // NO I18N
        resultobj.value = valueel.data('zccustomstate'); // NO I18N

        return resultobj;
    }

    zcanvastools.prototype.refreshStates = function(existingstates , field , labelel , valueel){
        var datanode = field.children('.zcanvas-data-node'); // NO I18N
        if(existingstates.datanode){
            datanode.data('zccustomstate' , existingstates.datanode); // NO I18N
        }

        if(existingstates.label){
            labelel.data('zccustomstate' , existingstates.label); // NO I18N
        }

        if(existingstates.value){
            valueel.data('zccustomstate' , existingstates.value); // NO I18N
        }
    }




    // Multiselect

    zcanvastools.prototype.multiselect = function(config , undoredo, nobox , exec){
        var elements = $('.zcanvas-multiselect , .zcanvas-selected-element');
      //  var isField = $.map(elements, function(e) { return $(e).is('.zcanvas-field'); }).indexOf(false) == -1;
      if(!config && !nobox){
          config = zutils.getParentData(elements).config;
      }
        this.selectedfields = elements;
        var $oldselect = $('.zcanvas-selectbox');
      //  $('.zcanvas-selectbox').zremove();
        if(!nobox){
          //  var selector = config.editorcontainer + " > .zcanvas:not('.ui-draggable-dragging,.zcanvas-multiselect')";//NO I18N
          //  var selectorResizing = config.editorcontainer + " > .zcanvas:not('.ui-resizable-resizing,.zcanvas-multiselect')";//NO I18N
            var $editor = $(config.editorcontainer);
            var $edata = $editor.data('zcanvas'); // NO I18N
            var scope = $edata && $edata.config && $edata.config.zcdropscope ? $edata.config.zcdropscope : 'default'; // NO I18N
            if(elements.length > 1){
                var dimension = zutils.getBoxdimensions(elements);
                var $selectionbox = $('<div/>', {class: 'zcanvas-selectbox'});
                $selectionbox.css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: dimension.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: dimension.top,
                    height: dimension.elheight,
                    width: dimension.elwidth
                }).attr('data-canvas',config.editorcontainer); // NO I18N
                var islocked = false;
                if(exec){
                    var lockedel = elements.filter(function(){ return this.classList.contains('zcanvas-locked-element')  }); // NO I18N
                    islocked = lockedel && lockedel.length;
                     $selectionbox.draggable({
                        multimove:true,
                        zcGuide: true,
                        snapTolerance: 5,
                        appendGuideTo: config.editorcontainer,
                        containment: config.zdragcontainment || '.zcanvas-editor-outer', // NO I18N
                        scope: scope,
                        scroll: false
                    });
                    $selectionbox.resizable({
                        handles: 'e, s, se, w, sw , n , nw , ne', // NO I18N
                        containment: "parent",//NO I18N
                        zcGuide: true,
                        snapTolerance: 5,
                        appendGuideTo: config.editorcontainer,
                        //  zrestricteditor: true,
                        classes: {'ui-resizable-se':'zcanvas-resizable-se'}, // NO I18N
                        zalsoResize: '.zcanvas-multiselect:not(.zcbdrbox):not(.zccbutton) , .zcanvas-selected-element:not(.zcbdrbox):not(.zccbutton)', // NO I18N
                        start: function(e , ui){
                            var minmax = [];
                            elements.each(function(){
                                var $this = $(this);
                                var resultobj = zutils.setMinMaxDimension($this);
                                resultobj.width = $this.width();
                                resultobj.height = $this.height();
                                minmax.push(resultobj);
                            })
                            var maxwidthobj = canvasObjUtils._.min(minmax , function(i) { return  parseInt(i['max-width']) - i.width });  // NO I18N
                            var minwidthobj = canvasObjUtils._.min(minmax , function(i){ return  i.width - parseInt(i['min-width']) }); // NO I18N
                            var maxheightobj = canvasObjUtils._.min(minmax , function(i) { return  parseInt(i['max-height']) - i.height }); // NO I18N
                            var minheightobj = canvasObjUtils._.min(minmax , function(i){ return  i.height - parseInt(i['min-height']) }); // NO I18N
                            var obj = {
                                maxwidth: parseInt( maxwidthobj['max-width']) - maxwidthobj.width , // NO I18N
                                minwidth: minwidthobj.width - parseInt( minwidthobj['min-width'] ), // NO I18N
                                minheight: minheightobj.height - parseInt( minheightobj['min-height'] ), // NO I18N
                                maxheight: parseInt( maxheightobj['max-height']) - maxheightobj.height // NO I18N
                            }
    
                            var max = ui.size.width + obj.maxwidth;
                            var min = ui.size.width - obj.minwidth;
                            var hmax = ui.size.height + obj.maxheight;
                            var hmin = ui.size.height - obj.minheight;
                            var instance = ui.element && ui.element.data('uiResizable'); // NO I18N
                            if(instance && instance.axis && typeof instance.axis === 'string' && ( instance.axis.indexOf('w') > -1 || instance.axis.indexOf('n') > -1 )){
                                max = null;
                                hmax = null;
                            }
                            ui.helper.resizable( "option", "minWidth", min ); // NO I18N
                            ui.helper.resizable( "option", "maxWidth", max ); // NO I18N
                            ui.helper.resizable( "option", "minHeight", hmin ); // NO I18N
                            ui.helper.resizable( "option", "maxHeight", hmax ); // NO I18N
                        },
                        stop: function(){
                                zutils.removeMinMaxDimension(elements);
                                var inst = zutils.getParentData($selectionbox);
                                var undoobj = {
                                    action: 'link', // NO I18N
                                    node: '#',
                                    actionarray: []
                                }
                                elements.each(function(){
                                    var $this = $(this);
                                    var prev = $this.data('ui-resizable-alsoresize'); // NO I18N
                                    var current = $this.css(['left' , 'top' , 'width' , 'height']); // NO I18N
                                    var undo = {
                                        node: zutils.getSelectorByElement($this),
                                        action: 'resize', // NO I18N
                                        previous: prev,
                                        current: current,
                                        editor: inst.config.editorcontainer
                                    }
                                    undoobj.actionarray.push(undo);
                                });

                                inst && inst.savecanvasaction(elements , null , null, null , null , null , undoobj);
                        }
                    });

                    
                }
               
                $editor.append($selectionbox);
                if(islocked){
                    var zinst = zutils.getParentData($selectionbox);
                    zinst && zinst.config && zinst.config.lockhandler && zinst.config.lockhandler(null , $selectionbox , true , true);
                }
                exec && this.executetools('multiple'); // NO i18N
            }
        }else{
            this.executetools('multiple'); // NO i18N
        }
        $oldselect.zremove();
        if(zcanvasrelatedList){
           zcanvasrelatedList.switchmenu(this.selectedfields);
       }
    }
    
})();;(function(){
    var zclayout = function(uniquekey,filter){
        this.getlayouts = function(){
            var resultlayouts = [];
            var layouts = zclayout.prototype.layouts;
            for (var key in layouts) {
                if (layouts.hasOwnProperty(key)) {
                    if(!layouts[key].hidden){
                        var result = {
                            label: layouts[key].getLabelHtml && layouts[key].getLabelHtml() || key,
                            datatype: 'layouts', // NO I18N
                            templateHtml: layouts[key].gethtml(),
                            layoutname: key
                        }
                        result[uniquekey] = zutils.getRandomId();
                        if(filter){
                            if(filter.indexOf(key) > -1){
                                resultlayouts.push(result);
                            }
                        }else{
                            resultlayouts.push(result);
                        }
                    }else{
                        layouts[key].initialize && layouts[key].initialize();
                    }
                }
            }
            return resultlayouts;
            
        }
        return this.getlayouts();
    }
    zclayout.prototype.layouts = [];
    window.zclayout = zclayout;
})();;(function(){
    zclayout.prototype.layouts['Section Layout'] = new function(){
        var template = '<div  data-layoutname="Section Layout" class="zcanvas zcanvas-editor zclayout zcanvas" data-zc-min-width="100"></div>';

        this.gethtml = function(){
            return template;
        }


        this.getLabelHtml = function(){
            return '<div class="zclisticon"><div class="zcl_container zcsectionlayouticon"></div><div class="zcl_title">' + I18n.getMsg('crm.section.label') + '</div></div>'; // NO I18N
          //  return '<div class="zsectionicon"><div class="zciconlabel">' + I18n.getMsg('crm.section.label') + '</div></div>';
        };

        this.init = function(component){
            var inst = zutils.getParentData(component);
            var style = component.attr('style'); // NO I18N
            var node = inst.prepareEditor();
            component.replaceWith(node);
            node.zaddClass('zc-lsection'); // NO I18N
            node.attr('style', style); // NO I18N
            inst.savecanvasaction(node,'neweditor');
        }
    }();
})();;(function(){
    zclayout.prototype.layouts["Tab Layout"] = new function(){

        var self_ = this;

        var template = '<div style="height:300px" class="zclayout zctablayout zcanvas" data-layoutname="Tab Layout" data-zc-min-force="200" data-zc-min-width="180">\
                            <div class="zc-tablist-container zcanvas-cancel-resize">\
                                <ul class="zc-tabs zcanvas zc-non-linkable zclayoutselectable" data-layout-selctabletype="Tab Bar">\
                                    <li class="tab active" data-tab="${data.id}"><span class="icon"></span><span class="tabname">Unnamed Tab</span><span class="deletetabicon"></span></li>\
                                    <li class="tabadd zcaddtab"><span>+</span></li>\
                                </ul>\
                                <span class="zc-tabs-nav">\
                                    <div class="zc-center">\
                                    <span class="zcnavleft"></span>\
                                    <span class="zcnavright"></span>\
                                    </div>\
                                </span>\
                            </div>\
                            <div class="zc-tab-container zcanvas zclayoutselectable zc-no-parentselect zcanvas-cancel-resize" data-layout-selctabletype="Tab Container">\
                                <h3 class="d_active zc-tab-heading" data-tab="${data.id}">Activity</h3>\
                                <div id="${data.zid}" class="zc-tab-content">\
                                </div>\
                            </div>\
                        </div>';

        var basetemplate = '<div class="zclayout zcanvas" data-layoutname="Tab Layout">\
                            <div class="zc-tablist-container">\
                                <ul class="zc-tabs">\
                                </ul>\
                                <span class="zc-tabs-nav">\
                                    <div class="zc-center">\
                                    <span class="zcnavleft"></span>\
                                    <span class="zcnavright"></span>\
                                    </div>\
                                </span>\
                            </div>\
                                <div class="zc-tab-container">\
                                </div>\
                            </div>';


         this.defaulttheme = {}; // NO I18N

        this.getLabelHtml = function(){
            //var html = '<div class="zcTab"><span><span class="zctabLine"></span></span><span></span><span></span></div><div class="zcTabLabel">' + I18n.getMsg('crm.canvas.builder.tab') + '</div></div></div>';//NO I18N
            return '<div class="zclisticon"><div class="zcl_container zctablayouticon"></div><div class="zcl_title">' + I18n.getMsg('crm.canvas.builder.tab') + '</div></div>'; // NO I18N
        }
        this.gethtml = function(){
            var zid = zutils.getRandomId();
            var compiledtemplate = zutils.generateTemplateString(template)({data:{id: '#' + zid , zid: zid}});
            return compiledtemplate;
        }

        this.highlighttab = function(el){
            var outercontainer = $('.zcanvas-editor-outer');
            var data = outercontainer.data('zcanvas'); // NO I18N
            var $closetab = el.closest('.zctablayout') ; // NO I18N
            if($closetab.length){
                el.mouseover(function(e){
                    data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e, true);
                }).mouseout(function(e){
                    data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e);
                });
            }
            
        }

        var addnewtab = function(tabname, $container,component,flag, zid, icon, hidetext, disabled, editmode){
            var tablist = component.children('.zc-tablist-container'); // NO I18N
            tabname = tabname ? tabname : 'Unnamed Tab'; // NO I18N
            var generateId = zid || zutils.getRandomId();
            //eslint-disable-next-line	webperf/directly-select-with-id
            var $li = $($.parseHTML('<li class="tab zctablist' + generateId + '" data-tab="#' + generateId + '">' + '<span class="icon"></span><span class="tabname"></span><span class="deletetabicon"></span>' + '</li>')); 
            var $tabname = $li.find('.tabname'); // NO I18N
            $tabname.html(tabname);
            if(hidetext){
                $tabname.hide();
            }
            if(icon){
               var $icon = $(' <span class="zctabicons ' + icon + '" data-zcicon="' + icon + '"></span>');
               $icon.insertBefore($tabname);
               hidetext && $icon.addClass('zctabnotext');
            }
            if(disabled){
                $tabname.addClass('zc-tab-noedit'); // NO I18N
            }
            //eslint-disable-next-line	webperf/directly-select-with-id
            var head = $($.parseHTML('<h3 class="d_active zc-tab-heading" data-tab="#' + generateId + '">' + '<span></span>' + '</h3>'));
            head.find('span').html(tabname);
            var container = $($.parseHTML('<div id="' + generateId + '" class="zc-tab-content"></div>'));
            var tabs = tablist.find('.tab'); // NO I18N
            var lasttab = tabs.last();
            if(lasttab.length){
            	$li.insertAfter(lasttab);
            }else{
            	tablist.find('.zc-tabs').prepend($li);
            }
            if(disabled){
            	container.addClass('zcanvas-restricted-drop'); // NO I18N
            }
            $container.append(head).append(container);
            self_.highlighttab($li);
            $li.click(function(){
                self_.tabclickhandler.bind(this,component)();
            });
            head.click(function(){
                self_.activetabclickhandler.bind(this,component)();
            });
            // tabname.dblclick(function(e){
            //     var el = $(this);
            //     el.focus();
            //    // self_.renamefocus(el);
            //     e.stopPropagation();
            //     el.data('zc-old-text', el.text()); // NO I18N
            // });
            $tabname.blur(function(){ 
                var el = $(this);
                var previous = el.data('zc-old-text'); // NO I18N
                var current = el.text();
                if(previous !== current){
                    var undoobj = {
                        action: 'layout', // NO I18N
                        instance: self_,
                        json: {
                            action: 'rename', // NO I18N
                            current: current,
                            previous: previous,
                            node: el,
                            editor: component
                        }
                    }
                    self_.savecanvasaction(undoobj);
                }
                
            });
            $li.find('.deletetabicon').click(function(e){
               self_.deletetab(component,e);

            })
            
            !editmode && self_.tabclickhandler.bind($li,component,'end')();
            flag || self_.configlayout(component);

            return generateId;
        }

        this.init = function(component,noconfig,undoredo,isview , zid ,scope ,containment , callback){
            var $tabcont = component.children('.zc-tablist-container'); // NO I18N
            var tabcont = component.children('.zc-tab-container');  // NO I18N
            var tabcontent = tabcont.children(".zc-tab-content"); // NO I18N
            var tabhead = tabcont.children('.zc-tab-heading'); // NO I18N
            if(!noconfig){
                var compid = component.attr('id'); // NO I18N
                if(!compid){
                    component.attr('id',zutils.getRandomId()); // NO I18N
                }
                var zid = zutils.getRandomId();
                var tabid = '#' + zid; // NO I18N
                var firsttab = $tabcont.find('.zc-tabs .tab').first();
                self_.highlighttab(firsttab);
                var firsthead = tabhead.first();
                var firstcontent = tabcontent.first();
                firsttab.attr('data-tab',tabid).addClass('zctablist' + zid); // NO I18N
                firsthead.attr('data-tab',tabid); // NO I18N
                firstcontent.attr('id',zid); // NO I18N
                this.configlayout(component);
                component.data('layoutstyle',JSON.parse(JSON.stringify(self_.defaulttheme))); // NO I18N
            }
                var $tabcontent = tabcontent.css('display' , 'none'); // NO I18N 
                $tabcontent.first().css('display' , 'block'); // NO I18N
                var $tab = $tabcont.find('.tab');
                var $addbtn = $tabcont.find('.tabadd');
                var $container = tabcont;
                var $leftnav = $tabcont.find('.zcnavleft');
                var $rightnav = $tabcont.find('.zcnavright');
                // $tab.find('.tabname').dblclick(function(e){
                //     var el = $(this);
                //     el.focus();
                //  //   self_.renamefocus(el);
                //     e.stopPropagation();
                // }).blur(function(){
                //     var el = $(this);
                //     var previous = el.data('zc-old-text'); // NO I18N
                //     var current = el.text();
                //     var undoobj = {
                //         action: 'layout', // NO I18N
                //         instance: self_,
                //         json: {
                //             action: 'rename', // NO I18N
                //             current: current,
                //             previous: previous,
                //             node: el,
                //             editor: component
                //         }
                //     }
                //     self_.savecanvasaction(undoobj);
                // });
                !isview && $tab.find('.deletetabicon').click(function(e){
                    self_.deletetab(component,e);
     
                 })
                 $tab.off('click'); // NO I18N
               $tab.on('click',function(){
                    self_.tabclickhandler.bind(this,component, null, callback)();
                });
                tabhead.click(function(){
                    self_.activetabclickhandler.bind(this,component)();
                });
                var data = $('.zcanvas-editor-outer').data('zcanvas');
               !isview && $container.click(function(e){
                    if(!component.hasClass('zcanvas-selected-element') && !e.target.classList.contains('zctabli')){
                        data && data.config && data.config.toolsRef && data.config.toolsRef.selectfield(e);
                    }
                });
                var $hoverel = $container.add($tabcont.find('.zc-tabs')); // NO I18N
                self_.highlighttab($hoverel);
               

                var navtab = function(flag){

                    var parentscroll = $tabcont.find('.zc-tabs');
                    var scrollPos = 0;
                    
                    if(flag){
                        var hiddenelements = $tabcont.find('.zc-tabs li').filter(function(){
                            var $el = $(this);
                            if($el.position().left + $el.width() > parentscroll.width()){
                                return $el;
                            }
                        });

                        var firstelement = hiddenelements.eq(0);
                        if(firstelement && firstelement.length){
                            var firstpos = parentscroll.width() - firstelement.position().left;
                            scrollPos =  parentscroll.scrollLeft() + parentscroll.width() - firstpos;
                        }else{
                        	scrollPos =  parentscroll.scrollLeft() + parentscroll.width();
                        }
                        
                    }else{
                        var hiddenelements = $tabcont.find('.zc-tabs li').filter(function(){
                            var $el = $(this);
                            if($el.position().left  < 0){
                                return $el;
                            }
                        });

                        var firstelement = hiddenelements.eq(hiddenelements.length - 1);
                        if(firstelement && firstelement.length){
                            var firstpos =  firstelement.outerWidth() + firstelement.position().left;
                            scrollPos =  parentscroll.scrollLeft() - parentscroll.width() - firstpos;
                        }
                        
                    }
                    // eslint-disable-next-line webperf/no-animate
                    parentscroll.animate({scrollLeft: scrollPos});
                    zclayout.prototype.layouts['Tab Layout'] && zclayout.prototype.layouts['Tab Layout'].onnavigation && zclayout.prototype.layouts['Tab Layout'].onnavigation($tabcont , scrollPos); 
                }
                
                $addbtn.click(self_.newtab.bind(null , null, $container, component, null, null));	
                $leftnav.click(navtab.bind(null,false));
                $rightnav.click(navtab.bind(null , true));
                this.togglenav(component);

                if(undoredo){
                    var undoobj = {
                        action: 'layout', // NO I18N
                        instance: self_,
                        json: {
                            action: 'new', // NO I18N
                            current: canvasOutput.createJson(component),
                            editor: zutils.getParentEditor(component),
                            node: component
                        }
                    }
                    var undoref = self_.savecanvasaction(undoobj , undoredo);
                    zutils.overlapHandling(component , undoref);
                }
                
        }

        this.newtab = function(tabname, $container,component,flag, zid){
        	if(component.find('.zc-tabs .tab').length > 49){
                return;
            }
            self_.createdropdown(tabname, $container,component,flag, zid);
            event && event.stopPropagation();
        }  



        this.tabclickhandler = function(component,scrolladjust,callback) {
            var $el = $(this);
            if($el.hasClass('active')){
                return;
            }
            var tablist = component.children('.zc-tablist-container'); // NO I18N
            var tabcontainer = component.children('.zc-tab-container'); // NO I18N
            self_.togglenav(component);
            if(scrolladjust === 'end'){
                var scrollTab = tablist.find('.zc-tabs')
                scrollTab.scrollLeft(scrollTab[0].scrollWidth);
            }
            var $tabcontent = tabcontainer.children(".zc-tab-content"); // NO I18N
            $tabcontent.hide();
            var activeTab = $el.attr("data-tab");  // NO I18N
            var $activeTab = $(activeTab);
            $activeTab.fadeIn();		
            var tabinst = $activeTab.data('zcanvas'); // NO I18N
            if(tabinst && tabinst.config && tabinst.config.onTabSwitch){
            	tabinst.config.onTabSwitch($activeTab);
            }
                
            tablist.find('.tab').removeClass("active");
            $el.addClass("active");

            callback && callback($el);

            $tabcontent.removeClass("d_active");
           // tabcontainer.find(".zc-tab-content[data-tab^='" + activeTab + "']").addClass("d_active"); 
           
        
        }

        /**
         * Depricated
         */
        this.adjustscroll = function(el,component){

            function isBetween(value,start,end){
                return value >= start && value <= end;
            }

            var parentscroll = component.find('.zc-tabs');
            var element_position = el.position().left;
            var element_width = el.outerWidth();
            var viewport_height = parentscroll.width();

            if(!isBetween(element_position , 0 ,viewport_height)){
                var pos = element_position + element_width - viewport_height;
                parentscroll.scrollLeft(parentscroll.scrollLeft() + pos);
            }
        }


        this.togglenav = function(component){
            var tablist = component.children('.zc-tablist-container'); // NO I18N
            var parentscroll = tablist.find('.zc-tabs');
            var tabs = tablist.find('.zc-tabs-nav');
            // var outwidth = Math.round(parentscroll.outerWidth());
            var outwidth = parentscroll[0].offsetWidth;
            if(outwidth < parentscroll[0].scrollWidth){
                //tabs.css('display' , 'inline'); // NO I18N
                tabs[0].style.display = 'inline'; // NO I18N
                zclayout.prototype.layouts['Tab Layout'] && zclayout.prototype.layouts['Tab Layout'].onnavigation && zclayout.prototype.layouts['Tab Layout'].onnavigation(tablist);
            } else {
                //tabs.css('display' , 'none'); // NO I18N
                tabs[0].style.display = 'none'; // NO I18N
            }
        }
        

        this.activetabclickhandler = function(component){
            var $el = $(this);
            var tabcontainer = component.children('.zc-tab-container'); // NO I18N
            var $tabcontent = tabcontainer.find(".zc-tab-content");
            var tablist = component.children('.zc-tablist-container'); // NO I18N
            $tabcontent.hide();
            var d_activeTab = $el.attr("data-tab");  // NO I18N
            $("#" + d_activeTab).fadeIn();
            
            tabcontainer.find(".zc-tab-heading").removeClass("d_active");
            $el.addClass("d_active");
            
            tablist.find('.tab').removeClass("active");
           // tablist.find("zc-tabs>li[data-tab^='" + d_activeTab + "']").addClass("active");
        }
        

        this.configlayout = function(component){
            var parenteditor = component.parent();
            var outinstance = parenteditor.data('zcanvas'); // NO I18N
            var mainconfig = zutils.zcopyobj( outinstance ).config;
            var tablist = component.children('.zc-tablist-container'); // NO I18N
           // var selector = mainconfig.editorcontainer+" > .zcanvas:not('.ui-draggable-dragging,.zcanvas-multiselect')";//NO I18N
           // var selectorResizing = mainconfig.editorcontainer+" > .zcanvas:not('.ui-resizable-resizing,.zcanvas-multiselect')";//NO I18N
            component.not('.ui-draggable').draggable({ // NO I18N
                handle: ".zc-tab-container , .zc-tabs", // NO I18N
                containment: mainconfig.zccontainment || 'parent', // NO I18N
                zcGuide: true,
                snapTolerance: 5,
                znoposition: true,
                appendGuideTo: mainconfig.editorcontainer,
                scroll: false,
                disabled: mainconfig.alwaysdisabled,
                stop: function(){
                    outinstance.resetheight && outinstance.resetheight();
                },
                start: function(e){
                    if(e.shiftKey){
                        return false;
                    }
                },
                drag: function(e){
                    if(e.shiftKey){
                        return false;
                    }
                }
            }).resizable({ // NO I18N
                handles: "e, s, se, w, sw , n , nw , ne",//NO I18N
                classes:{
                    'ui-resizable-se':'zcanvas-resizable-se' //No I18N
                },
                containment: "parent",//NO I18N
                zcGuide: true,
                zhandlevisible: true,
                snapTolerance: 5,
                appendGuideTo: mainconfig.editorcontainer,
                zrestricteditor: true,
                zalsoResize: '',
                znoleftalsoresize: true,
                start: function(){
                   	var element = $(this);
                   	var inst = element.data('uiResizable'); // NO I18N
                   	var container = component.children('.zc-tab-container'); // NO I18N
                   	var editors = container.children('.zcanvas-editor'); // NO I18N
                   	var reditors = $('');
                   	editors.each(function(){
                   		var $this = $(this);
                   		var el = $this.children('.zcautoratio'); // NO I18N
                   		if(el && el.length){
                   			var prev = {
                   					node: '#' + el.attr('id'), // NO I18N
                   					action: 'resize', // NO I18N
                   					editor: '#' + $this.attr('id'), // NO I18N
                   					previous: {
                   						width: el.width(),
                   						height: el.height()
                   					}
                   			}
                   			el.data('zcprev',prev); // NO I18N
                   			reditors = reditors.add(el);
                   		}
                   	});
                   	element.resizable('option', 'zalsoResize' , reditors); // NO I18N
                   	if(reditors.length && inst){
                   		var _plugins = inst.plugins;
                        if(_plugins.start){
                            var len = _plugins.start.length;
                            for(var i = 0 ; i < len ; i ++){
                                var plugname = _plugins.start[i][0];
                                if(plugname === 'zalsoResize'){ // NO I18N
                                //  inst.axis = 'se'; // NO I18N
                                  _plugins.start[i][1].bind(element)();
                                }
                            }
                        }
                   	}
                },
                stop: function(event , ui){
                	var el = $(this);
                	var inst = el.resizable('instance'); // NO I18N
                	if(inst && inst.options && inst.options.zalsoResize && inst.options.zalsoResize.length){
                		var undoobj = {
                                action: 'link', // NO I18N
                                node: '#', // NO I18N
                                actionarray: [{
                                	action: 'resize', // NO I18N
                                	node: zutils.getSelectorByElement(inst.element),
                                	previous: canvasObjUtils._.extend(ui.originalSize , ui.originalPosition),
                                	current: canvasObjUtils._.extend(ui.size , ui.position),
                                	editor: outinstance.config.editorcontainer
                                }]
                            }
                		
                		$(inst.options.zalsoResize).each(function(){
                			var $el = $(this);
                			var prevobj = $el.data('zcprev'); // NO I18N
                			if(prevobj){
                				prevobj.current = {
                						width: $el.width(),
                   						height: $el.height()
                				}
                				undoobj.actionarray.push(prevobj);
                			}
                		})
                		
                		outinstance.savecanvasaction(event.target,'resize',null,null,null,null,undoobj); //NO I18N
                	}else{
                		 outinstance.savecanvasaction(event.target,'resize',canvasObjUtils._.extend(ui.originalSize , ui.originalPosition),canvasObjUtils._.extend(ui.size , ui.position)); //NO I18N
                	}
                     //self_.adjustscroll(component.find('.active'),component);
                    
                     self_.togglenav(component);
                     outinstance.resetheight && outinstance.resetheight();
                     el.resizable('option', 'zalsoResize' , ''); // NO I18N
                }
            })

            var $tabs = tablist.find('.zc-tabs');

            $tabs.sortable({
                handle: ".icon" ,// NO I18N
                axis: "x", // NO I18N
                start: function(event , ui){
                    $(this).attr('data-previndex', ui.item.index()); // NO I18N
                },
                beforeStop: function(e,ui){
                	var _ul = ui.helper.closest('.zc-tabs'); // NO I18N
                	_ul.append(_ul.find('.zcaddtab'));
                },
                update: function(event , ui){
                    var $tab = $(this)
                    var current = ui.item.index();
                    var previous = $tab.attr('data-previndex'); // NO I18N
                    $tab.removeAttr('data-previndex'); // NO I18N
                    var undoobj = {
                        action: 'layout', // NO I18N
                        instance: self_,
                        json: {
                            action: 'taborder', // NO I18N
                            previous: parseInt(previous),
                            current: parseInt(current),
                            editor: component,
                            tab  : ui.item.attr('data-tab') // NO I18N
                        }
                    }
                    self_.savecanvasaction(undoobj);
                }
            })

            var activetabs = $tabs.find('.tab');
            activetabs.each(function(){
                var tabcontainer = $(this).attr('data-tab');
                var options = {
                    editorcontainer : tabcontainer,
                    zccontainment : "parent", // NO I18N
                    tools: mainconfig.tools || {},
                    toolsRef: mainconfig.toolsRef || {},
                    undoredomanager: mainconfig.undoredomanager || {},
                    restrictresize: true,
                    acceptWidgets: '.ui-draggable', // NO I18N
                    relatedlistcompile: mainconfig.relatedlistcompile,
                    relatedlistcreate: mainconfig.relatedlistcreate,
                    multiresize: mainconfig.multiresize,
                    style:  mainconfig.style,
                    relatedlistdata: mainconfig.relatedlistdata,
                    relatedlistmenu:mainconfig.relatedlistmenu,
                    listtypes: mainconfig.listtypes,
                    statictypecallback: mainconfig.statictypecallback,
                    onmenuswitch: mainconfig.onmenuswitch,
                    contexttools: mainconfig.contexttools,
                    zclayoutcontainer: mainconfig.zclayoutcontainer,
                    afterrelatedlistplace: mainconfig.afterrelatedlistplace,
                    onTabSwitch: mainconfig.onTabSwitch,
                    onaddelement: mainconfig.onaddelement,
                    onChange: mainconfig.onChange,
                    listinterceptor: mainconfig.listinterceptor,
                    listjson: mainconfig.listjson,
                    lockhandler: mainconfig.lockhandler,
                    unlockhandler: mainconfig.unlockhandler,
                    lazyloadeditor: mainconfig.lazyloadeditor , 
                    customstaticjson: mainconfig.customstaticjson , 
                    customstaticview : mainconfig.customstaticview ,
                    nohover: true
                }
                var $tabcontainer = $(tabcontainer).not('.zcanvas-editor');
                if($tabcontainer.length){
                    $tabcontainer.zcanvas(options);
                    $tabcontainer.addClass('zc-no-bg'); // NO i18N
                    $tabcontainer.data('zcanvas').config.restrictresize = false; // NO I18N
                   // $tabcontainer.data('zcanvas').config.zccontainment = "#zcanvas-editor-outer"; // NO I18N
                }
               
            });
            $tabs.off('click','zcanvas.tabconfig'); // NO i18N
            $tabs.click(function(e){
                mainconfig && mainconfig.toolsRef && mainconfig.toolsRef.selectfield(e);
            })
            outinstance.resetheight && outinstance.resetheight();
           

        }

        this.toJson = function(component,extjson){
            var editorstyle = component.children('.zc-tab-container'); // NO I18N
            var tablistcontainer = component.children('.zc-tablist-container').find('.zc-tabs');  // NO I18N
            var activetabs = tablistcontainer.find('.tab'); // NO I18N
           
            var compdata = component.data('layoutstyle'); // NO I18N
            var toolinst = zutils.getParentData(component);
            var selector = '#' + component.attr('id') +  '> .zc-tablist-container > .zc-tabs li.tab' ; // NO I18N
             //   var sstyle = zutils.zcopyobj(toolinst.config.toolsRef.zcstyles[selector] || {});
             var sstyle = zutils.zcopyobj2(toolinst.config.toolsRef.getstylebyselector(selector , true , true));
            compdata = {
                default: sstyle.default,
                hover: sstyle.hover, 
                active: sstyle.active
            };
            var defstates = ['default' , 'active' , 'hover']; // NO I18N
            for(var skey in sstyle){
            	if(defstates.includes(skey)){
            		continue;
            	}
            	compdata[skey] = zutils.zcopyobj2(sstyle[skey]);
            }
            zutils.compressioncallback && zutils.compressioncallback({ui: sstyle} , null , null , sstyle);
            compdata.container = jsonCreation.getstyles(tablistcontainer);
            zutils.compressioncallback && zutils.compressioncallback({ui: compdata.container} , null , null , compdata.container);
            compdata.editor = jsonCreation.getstyles(editorstyle);
            zutils.compressioncallback && zutils.compressioncallback({ui: compdata.editor} , null , null , compdata.editor);
            if(compdata.editor){
                for(var skey in compdata.editor){
                    var _style = compdata.editor[skey];
                    if(!extjson.ui.value.style[skey]){
                        extjson.ui.value.style[skey] = {};
                    }
                    var _mstyle = extjson.ui.value.style[skey];
                    if(_style && (_style._hide_ || _style._show_)){
                        if(_style._hide_){
                            _mstyle._hide_ = 'true';
                        }else if(_style._show_){
                            _mstyle._show_ = 'true';
                        }
                        delete _style._hide_;
                        delete _style._show_;
                    }
                }
            }
            component.data('layoutstyle', compdata); // NO I18N
            var result = [];
            var pageinst = zutils.getdatabyelement($('#zcanvas-editor-outer')); // NO I18N
            activetabs.each(function(){
                var $tab = $(this);
                var tabcontainer = $tab.attr('data-tab'); // NO I18N
                var $tabcontainer = $(tabcontainer);
                var vflag = false;
                if(!$tabcontainer.is(':visible')){
                    // eslint-disable-next-line webperf/layout-thrashing
                    $tabcontainer.show();
                    vflag = true;
                }
                var json = canvasOutput.createJson(tabcontainer);
                var hasclasses = false;
                if(json.ui.value && json.ui.value.class && json.ui.value.class.indexOf('zc-tab-all-fields') > -1){
                	hasclasses = true;
                	json = pageinst && pageinst.config && pageinst.config.tabJSONcallback &&  pageinst.config.tabJSONcallback(json);
                }
                json.ui.value.class = 'zc-tab-section'; // NO I18N
                if(hasclasses){
                	json.ui.value.class += ' zc-tab-all-fields'; // NO I18N
                }
                json.theme = 'Custom Layout'; // NO I18N
                if(vflag){
                    // eslint-disable-next-line webperf/layout-thrashing
                    $tabcontainer.hide();
                }
                self_.tabjson(json.ui.value, $tab);
                if(json.ui.value.disabled){
                    var $st = $tabcontainer.children('.zcanvas-static-editor'); // NO I18N
                    var stdata = $st.data('zcanvas'); // NO I18N
                    if(stdata && stdata.id){
                        json.tabrelatedlistid = stdata.id;

                        var hastabvisibility = false;

                        var tabchildren = json.children[0];

                        var tabstyle = {};

                        if(tabchildren && tabchildren.ui && tabchildren.ui.value && tabchildren.ui.value.style){
                            for(var stkey in tabchildren.ui.value.style){
                                var appliedstyle = tabchildren.ui.value.style[stkey];
                                var resultstyle = {};
                                if(appliedstyle.hasOwnProperty('_show_')){
                                    resultstyle._show_ = true;
                                    hastabvisibility = true;
                                }
                                if(appliedstyle.hasOwnProperty('_hide_')){
                                    resultstyle._hide_ = true;
                                    hastabvisibility = true;
                                }
                                if(appliedstyle.hasOwnProperty('_order')){
                                    resultstyle._order = appliedstyle._order;
                                }
                                tabstyle[stkey] = resultstyle;
                            }
                        }

                        if(hastabvisibility){
                            json.ui.value.tabstyle = tabstyle;
                        }

                    }
                }
                result.push(json);
            })
            return result;
        }

        this.tabjson = function(json , $tab){
            var tabname =  $tab.find('.tabname'); // NO I18N
            json.name = tabname.html();
            if(!tabname.is(':visible')){
                json.hidetext = true;
            }
            var icon = $tab.find('.zctabicons'); // NO I18N
            if(icon.length){
                json.icon = icon.attr('data-zcicon'); // NO I18N
            }
            if(tabname.hasClass('zc-tab-noedit')){
                json.disabled = true;
            }
            var codedata = $tab.data('zcanvasdata'); // NO I18N
            if(codedata && codedata.systemid){
                json.system_id = codedata.systemid; 
            }
        }

        this.tabitemstyling = function(zid , json){
            var tabselector = 'zctablist' + zid; // NO I18N
            var tabstyle = json.ui.value.tabstyle;
            if(tabstyle){

                for(var stkey in tabstyle){
                    var styles = tabstyle[stkey];
                    if(styles.hasOwnProperty('_show_')){
                        styles.display = 'inline-block'; // NO I18N
                        delete styles._show_;
                    }
                    if(styles.hasOwnProperty('_hide_')){
                        styles.display = 'none'; // NO I18N
                        delete styles._hide_;
                    }
                }

                createStruture.applystyle(null , tabstyle ,  tabselector , true , {});
                return true;
            }
        }

        this.toDom = function(json,container,padingLeft,padingTop){
            debugger;
            var $template = $(template);
            var $container =  $template.children('.zc-tab-container'); // NO I18N
            // Cleaning the default template
            var _tablist = $template.children('.zc-tablist-container'); // NO I18N
            _tablist.find('.zc-tabs li').first().remove(); // NO I18N
            $container.html('');
            container.append($template);
            $template.css({
                left: json.ui.value.position.startX + padingLeft,
            	top: json.ui.value.position.startY + padingTop,
            	width: json.ui.value.position.width,
                height: json.ui.value.position.height,
                zIndex: json.ui.value.position.depth,
            	position: 'absolute' // NO I18N
            });
            $template.zccss(json.ui.value.style);
            $template.addClass(json.ui.value.class);
            if(json.zcanvasId){
                $template.attr('id',json.zcanvasId); // NO I18N
            }
            var childlen = json.children.length;
            var pageinst = zutils.getdatabyelement($('#zcanvas-editor-outer')); // NO I18N
            for(var i = 0 ; i < childlen ; i++){
            	 // eslint-disable-next-line webperf/no-multipleDOMLookup
            	var zid = json.children[i].zcanvasId || zutils.getRandomId();
            	// eslint-disable-next-line webperf/no-multipleDOMLookup
            	var isi18n = json.children[i].ui.value && json.children[i].ui.value.class && json.children[i].ui.value.class.indexOf('zc-tab-all-fields') > -1;
            	if(isi18n) {
            		// eslint-disable-next-line webperf/no-multipleDOMLookup
            		json.children[i] = pageinst && pageinst.config && pageinst.config.tabDOMcallback && pageinst.config.tabDOMcallback(json.children[i] , zid); 
            	}
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                addnewtab(isi18n ? I18n.getMsg('crm.label.all.fields') : json.children[i].ui.value.name,$container,$template,true,zid,json.children[i].ui.value.icon,json.children[i].ui.value.hidetext,json.children[i].ui.value.disabled , true);
               // var tabselector = '#' + zid; // NO I18N
               var tab = $template.find('.zc-tabs li.zctablist' + zid);
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var tabname = json.children[i].ui.value.name;
                self_.configlayout($template);
                var instance = $('#' + zid).data('zcanvas');
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                instance.addElement(json.children[i].children);
                // FIXME: should be handled by service
                tab.attr('data-zcqa', 'canvas-detail-tab-' + tabname); // NO I18N
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                instance && instance.config && instance.config.onaddelement && instance.config.onaddelement(tab , json.children[i]);
                if(isi18n){
                	self_.bindscope(instance, '.zc-fieldsection'); // NO I18N
                	instance && instance.container && instance.container.zaddClass('zc-tab-all-fields'); // NO I18N
                }
            }
            self_.init($template,true); 
            $template.data('layoutstyle',json.ui.value.layoutstyle); // NO i18N
          //  $container.zccss(json.ui.value.layoutstyle.editor);
          //  self_.compilestyle($template , null ,true);
            var zcid = $template.attr('id');// NO I18N
            if(!zcid){
                zcid = zutils.getRandomId();
                $template.attr('id',zcid);// NO I18N
            }
            _tablist.find('.zc-tabs .active').removeClass('active'); // NO I18N
            _tablist.find('.zc-tabs .tab').first().addClass('active'); // NO I18N
            var inst = zutils.getParentData($template).config.toolsRef;

            if(json.ui.value.style){
                for(var skey in json.ui.value.style){
                    var _style = json.ui.value.style[skey];
                    if(!json.ui.value.layoutstyle.editor){
                        json.ui.value.layoutstyle.editor = {};
                    }
                    if(!json.ui.value.layoutstyle.editor[skey]){
                        json.ui.value.layoutstyle.editor[skey] = {};
                    }
                    var _mstyle = json.ui.value.layoutstyle.editor[skey];
                    if(_style && _style.opacity){
                        if(_style.opacity === '0.5'){
                            _mstyle.opacity = '0.5';
                        }else if(_style.opacity === '1'){
                            _mstyle.opacity = '1';
                        }
                        delete _style.opacity;
                    }
                }
            }

            var $tabs = $template.find('.zc-tabs'); // NO I18N
            // eslint-disable-next-line webperf/no-multipleDOMLookup
            inst.applyjsontostyle($template.find('.zc-tabs li') , json.ui.value.layoutstyle , null , null , true);
            inst.applyjsontostyle($container , json.ui.value.layoutstyle.editor , null , null , true);
            inst.applyjsontostyle( $tabs , json.ui.value.layoutstyle.container , null , null , true);

            // $tabs.scrollTo(0); // Perf Improvement
            $tabs.scrollLeft = 0;
            
            if(json.prefill){
                self_.prefilltabs($template);
            }
            
            var parentdata = zutils.getParentData($template);
            parentdata && zutils.changelayoutscope(parentdata , 'Tab Layout' , true); // NO I18N
            return $template;
        }

        this.toView = function(json){
            var $template = $($.parseHTML(basetemplate));
            if(json.ui.value.fixed) {
            	$template.css({width : json.ui.value.position.width , height: json.ui.value.position.height})
        	}
            $template.addClass('zctabview').addClass(json.ui.value.class || '');
            $template.data('layoutstyle',json.ui.value.layoutstyle); // NO i18N
            var list = $template.children('.zc-tablist-container').find('.zc-tabs'); // NO I18N
            var editors = $template.children('.zc-tab-container'); // NO I18N
            var childelements = json.children;
            var childlen = childelements.length;
            var pagecomp = $('#zcanvas-editor-outer');
            for(var i = 0 ; i < childlen ; i++){
                var tab = childelements[i];
                var name_ = tab.ui.value.name;
                var icon = tab.ui.value.icon;
                var hiddenlable = tab.ui.value.hidetext;
                var generateId = zutils.getRandomId();
                var isi18n = tab.ui.value && tab.ui.value.class && tab.ui.value.class.indexOf('zc-tab-all-fields') > -1; // NO I18N
                if(isi18n && createStruture.singleshotrender && pagecomp) {
                	var parentinst = pagecomp.data('zcanvas'); // NO I18N
                	if(parentinst && parentinst.config && parentinst.config.tabViewcallback) {
                		tab = parentinst.config.tabViewcallback(tab);
                	} else if(createStruture && createStruture.toolinst && createStruture.toolinst.tabViewcallback){
                		tab = createStruture.toolinst.tabViewcallback(tab);
                	}
                }
                //eslint-disable-next-line webperf/directly-select-with-id
                var $li = $($.parseHTML('<li class="tab zctablist' + generateId + '" data-tab="#' + generateId + '"><span class="tabname"></span></li>'));
                //eslint-disable-next-line webperf/no-multipleDOMLookup
                var tabname = $li.find('.tabname');
                tabname.html(isi18n ? I18n.getMsg('crm.label.all.fields') : name_); // NO I18N
                if(tab.ui.value.system_id){
                    $li.addClass('canvasselectableelemnt canvas-tab-element-id-' + tab.ui.value.system_id); // NO I18N
                }
                if(hiddenlable){
                    tabname.hide();
                }
                if(icon){
                   var $icon = $(' <span class="zctabicons ' + icon + '" data-zcicon="' + icon + '"></span>');
                   $icon.insertBefore(tabname);
                   hiddenlable && $icon.addClass('zctabnotext');
                }
                //eslint-disable-next-line	webperf/directly-select-with-id
                var head = $($.parseHTML('<h3 class="d_active zc-tab-heading" data-tab="#' + generateId + '"> </h3>'));
                head.text(name_);
                list.append($li);
                editors.append(head);
                var container = $($.parseHTML('<div id="' + generateId + '" class="zc-tab-content"></div>'));
                var child = {"children":[],"_type":"component"};//NO I18N
//                var child = zutils.zcopyobj(json);
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                child.children = [tab];
                child.ui = zutils.zcopyobj(json.ui);
              //  if(renderflag){
             //       var table = createStruture.rawhtml(child);
            //    }else{
                    var table = createStruture.layoutHtml(undefined, child);
            //    }
                container.append(table);
                
//                var styleObj = tab.ui.value.style;
//				var nodeClass = tab.ui.value.class;
//				var $currentNode = $(container);
//				for(key in styleObj) {
//					$currentNode.css(key, styleObj[key]);
//				}
//				$currentNode.addClass(nodeClass).addClass("zcanvas");//NO I18N
//				$currentNode.zaddClass(nodeClass);
				
                
                editors.append(container);
                if(this.tabitemstyling(generateId , tab)){
                    $li.addClass('zc-hideable-tab'); // NO I18N
                }
            }
            list.find('li').first().addClass('active');
            editors.find('.zc-tab-content').first().css('display','block'); // NO I18N
        //    this.init($template,true,null,true);
            $template.attr('id', zutils.getRandomId()); // NO I18N
            // self_.compilestyle($template,{
            //     default: {
            //         'padding-left':'10px', // NO I18N
            //         'padding-right':'10px' // NO I18N
            //     }
            // });
           // editors.css(json.ui.value.layoutstyle.editor);
           var inst = createStruture.toolinst;
           inst.applyjsontostyle($template.find('.zc-tabs li') , json.ui.value.layoutstyle , null , null , null , null , true);
            inst.applyjsontostyle(editors , json.ui.value.layoutstyle.editor , null , null , null , null , true);
            // eslint-disable-next-line webperf/no-multipleDOMLookup
            inst.applyjsontostyle($template.find('.zc-tabs') , json.ui.value.layoutstyle.container , null , null , null , null , true);
            inst.applyjsontostyle($template , json.ui.value.style , null , null , null , null , true);
           return $template;
        }

        this.refreshlayout = function(component , callback){
            component.addClass('zcrefreshedlayout'); // NO I18N
            this.init(component,true,null,true,null,null,null,callback);
        }

        this.deletetab = function(component, event, flag, noselection){
            !event.target || event.stopPropagation();
            var el = $(event.target || event);
            var $parent = el.parent('li'); // NO I18N
            var tabparent = $parent.parent('ul'); // NO I18N
            if(!tabparent.length){
            	return;
            }else if(tabparent.find('li:not(.zcaddtab)').length === 1 && !noselection){
                return this.deletelayout(component , flag);
            }
            var taborder = tabparent.find('li').index($parent);
            var zid = $parent.attr('data-tab'); // NO I18N
            var parentnext = $parent.next('.tab'); // NO I18N
            var parentprev = $parent.prev('.tab'); // NO I18N
            var prevdata = $parent.data('zcanvasdata'); // NO I18N
            var undoobj = {
                action: 'layout', // NO I18N
                instance : self_,
                json: {
                	prevdata: prevdata,
                    editor: component,
                    node : $parent,
                    refid : zid, // NO I18N
                    order: taborder,
                    action: 'deletetab' // NO I18N
                }
            } 
            var container = component.find('.zc-tab-container') // NO I18N
            var zcanvas = container.find(zid);
            undoobj.json.previous =  { container : canvasOutput.createJson(zcanvas) , tab: {} };
            self_.tabjson(undoobj.json.previous.tab, $parent);
            $parent.remove();
            zcanvas.prev().remove();
            zutils.deleteElement(zcanvas,true);
             // eslint-disable-next-line webperf/no-multipleDOMLookup
            if(tabparent.length && !tabparent.find('li:not(.zcaddtab)').length){
                component.remove();
            }else{
                flag || self_.savecanvasaction(undoobj);
            }
            if(!noselection){
                if(parentnext.length){
                    parentnext.click();
                }else if(parentprev.length){
                    parentprev.click();
                }
            }

            if(flag){
                return undoobj;
            }
        }

        this.deletelayout = function(component,flag){
            var inst = zutils.getParentData(component);
            var $parent = component.parent();
            var undoobj = { action: 'layout', instance: self_  ,  // NO I18N
                json: {
                    editor: '#' + component.attr('id'),
                    node: '#' + $parent.attr('id'),
                    previous: canvasOutput.createJson(component) ,
                    action: 'deleteLayout', // NO I18N
                    parentstyle: {ui: {value : { style : jsonCreation.getstyles($parent) }}}
                }
            } // NO I18N
            var elements = component.find('.deletetabicon'); // NO I18N
            elements.each(function(){
                self_.deletetab(component,this , true, true);
            })
             inst && zutils.changelayoutscope(inst , 'Tab Layout'); // NO I18N
            if(!flag){
                self_.savecanvasaction(undoobj , inst.config.undoredomanager);
            }else{
                return undoobj;
            }
        }

        this.createdropdown = function(tabname, $container,component,flag, zid ){
            var dropdown = component.children('.zctab-dropdown'); // NO I18N 
            var addbtn = component.children('.zc-tablist-container').find('.zcaddtab'); // NO I18N
            var addbtnposition = addbtn.position();
            var addbtnmargin = addbtn.parent().css(['margin-top' , 'margin-left']); // NO I18N
            addbtnposition.top += parseInt(addbtnmargin['margin-top']); // NO I18N
            addbtnposition.left += parseInt(addbtnmargin['margin-left']); // NO I18N
            var addbtndimension = {
                width: addbtn.outerWidth(),
                height: addbtn.outerHeight()
            }
          //  var ddwidth = 0;
            dropdown.remove();
          //  if(!dropdown.length){
                $(window).off('click.zctabselect'); // NO I18N
                var elid = zutils.getRandomId();
                var template = $('<div class="zctab-dropdown"><ul id="' + elid + '"></ul></div>');
                var $ul = template.find('ul'); // NO I18N
                // eslint-disable-next-line webperf/no-multipleDOMLookup,webperf/directly-select-with-id
                var searchtemplate = $('<div class="canvas_field_search searchel">' + // NO I18N
                        '<input id="tabsearchinput" placeholder=' + I18n.getMsg('crm.label.search') + ' type="text" oninput="zutils.search(this,\'#' + elid + '\',\'.zctabli\',null,null,\'#tabsidebarnomatch\')" autocomplete="off">' +
                        '<span class="dIB pR canvas_search_icon">' +
                            '<span class="zc_searchIcon pA"></span> ' +
                            '<span class="zc-closesearch-icon zc-search-hide" onclick="zutils.menuSearchClear(null,\'#tabsearchinput\',\'.zctabli\',\'#' + elid + '\',null,null,\'#tabsidebarnomatch\');event.stopPropagation()"></span>' +
                        '</span> ' +
                        '</div><div class="zcnomatchel" id="tabsidebarnomatch" data-search-source="#tabsearchinput">' + I18n.getMsg('crm.label.no.results.match') + '<div class="zcaddcustomtab">' + I18n.getMsg('crm.canvas.builder.addcustomtab') + '</div></div>');
                template.prepend(searchtemplate);
                // FIXME: Menu container should be comes from config
                var menucontainer = $('#zcanvas_menu').data('zcanvasMenu');
                var relatedlistdata = menucontainer.config.groups.relatedlist.data;
                if(menucontainer.config.groups.system){
                    relatedlistdata = relatedlistdata.concat(menucontainer.config.groups.system.data);
                }
                relatedlistdata =  canvasObjUtils._.filter( relatedlistdata, function(i) { return i.zcscope && !i.hidden } );
                var rellistlength = relatedlistdata.length;
             // eslint-disable-next-line webperf/no-attribute-selectors
                var hasallfield = !$( ".zc-tab-content[data-zcanvasclass~='zc-tab-all-fields']" ).length; // NO I18N
                var customtemplate = $('<li class="zctabli">' + I18n.getMsg('webform.analytics.timefilter.custom') + '</li>' + (hasallfield && '<li class="zctabli" data-tabtype="fields">' + I18n.getMsg('crm.label.all.fields') + '</li>' ));
                $ul.append(customtemplate);
                for(var i = 0; i <  rellistlength; i++){
                    var dropdowntemplate = $('<li class="zctabli">' + relatedlistdata[i].zclabel + '</li>');
                    dropdowntemplate.data('zcreldata',relatedlistdata[i]);
                    $ul.append(dropdowntemplate);
                }
                component.append(template);
                template.find('li').add(template.find('.zcaddcustomtab')).click(self_.tabtypeselect.bind(null, tabname, $container,component,flag, zid))
                dropdown = template;
                var outclickhandler = function(e){
                    if(!(addbtn.is(e.target) || addbtn.has(e.target).length || searchtemplate.has($(e.target).not(".zcaddcustomtab")).length)){
                    	dropdown.hide();
                    	$('#zcanvas-editor-outer').disableSelection();
                    	$(window).off('click.zctabselect');
                    }
                }
                $(window).on('click.zctabselect',outclickhandler)
       //     }
            dropdown.show();
            $('#zcanvas-editor-outer').enableSelection();
            // eslint-disable-next-line webperf/layout-thrashing
       //     ddwidth = dropdown.outerWidth();
            var ddpos = {
                top: addbtnposition.top + addbtndimension.height,
                left: addbtnposition.left - 200 + addbtndimension.width
            }
            if(ddpos.left < 0){
                ddpos.left = addbtnposition.left;
                dropdown.addClass('zctab-dropdown-openleft');
            }else{
            	 dropdown.removeClass('zctab-dropdown-openleft');
            }
            dropdown.css(ddpos); 
            dropdown.find('input').focus();   
            return  dropdown;  
        }

        this.tabtypeselect = function(tabname, $container,component,flag, zid, e){
        	
            var el = $(e.target).closest('li');
            var data = el.data('zcreldata'); // NO I18N
            if(data){
                var menuninstance = $(data.fieldContainer).data('zcanvasMenu');
                var config = menuninstance.config;
                config.zmenustart(data);
                zid = zutils.getRandomId();
                addnewtab(tabname, $container,component,flag, zid);
                self_.renderlist(component , data , zid);
            }else if(el.data('tabtype') === 'fields'){ // NO I18N
            	// FIeld Handling
            	var menucontainer = $('#zcanvas_menu');
            	var sections = menucontainer.find('.zcanvas-submenu-heading'); // NO I18N
            	var configd = menucontainer.data('zcanvasMenu'); // NO I18N
            	var datamap = menucontainer.data('zcdatamap'); // NO I18N
            	var config = configd && configd.config;
            	var comparray = [];
            	sections.each(function(){
            		var sec = $(this);
            	//	var eldata = sec.data('zcanvas'); // NO I18N
            	//	if(!eldata){
            			var fdata = datamap && datamap[sec.data('uniquekey')]; // NO I18N
            			var eldata = config && config.zmenustart(fdata , null, null , true);
            	//	}
            		eldata && comparray.push(eldata);
            	});
            	var tabid = addnewtab(I18n.getMsg('crm.label.all.fields'), $container,component,flag, zid, null, null, true); // NO I18N
            	var complen = comparray.length;
            	var dim = {_t: 10 , _l: 20};
            	var tabel = $('#' + tabid);
            	var tabinst = tabel.data('zcanvas'); // NO I18N
            	var tabdim = tabel.outerWidth() - 60;
            	for(var i = 0 ; i < complen ; i++){
            		var compdata = comparray[i]; //&& compdata.condition && compdata.condition(compdata)
            		if(compdata && compdata.data && compdata.data.ui && compdata.data.ui.value && compdata.data.ui.value.position){
            			compdata.data.ui.value.position.startX = dim._l;
            			compdata.data.ui.value.position.startY = dim._t;
            			compdata.data.ui.value.position.width = tabdim;
            			compdata.data.ui.value.class += ' zc-fieldsectionallfield'; // NO I18N
            			dim._t += compdata.data.ui.value.position.height + 30;
            			compdata.data.sectionId = compdata.sectionid;
            			tabinst.addElement( [compdata.data] );
            			
            		}
            	}
            	self_.bindscope(tabinst, '.zc-fieldsection'); // NO I18N
            	tabel.zaddClass('zc-tab-all-fields'); // NO I18N
            	self_.savenewtabdetails(component , tabid);
            }else{
                var tabid = addnewtab(tabname, $container,component,flag, zid);
                self_.savenewtabdetails(component , tabid);
            }
        }
        this.bindscope = function(inst , selector){
            var el = $(inst.config.editorcontainer);
            var zcopeid = el.attr('id'); // NO I18N
            el.droppable('option','scope',zcopeid); // NO I18N
            el.find(selector || '.zcanvas-static-editor').draggable('option','scope',zcopeid); // NO I18N
            el.addClass('zcanvas-restricted-drop'); // NO I18N

            if(selector && selector === '.zc-fieldsection'){
                // TEMP CODE to handle all fields.
                var elements = el;
                elements = el.add(el.find('.ui-droppable')); // NO I18N
                elements.droppable('option' , 'disabled' , true); // NO I18N

                var _drag = el.find('.ui-draggable'); // NO I18N
                _drag.draggable('destroy'); // NO I18N

                var _sort = el.find('.ui-sortable'); // NO I18N
                _sort.sortable('option' , 'disabled' , true); // NO I18N
            }

        }
        this.renderlist = function(component , data , zid, selectionflag , callback){
            var hzid = '#' + zid;
           // component.find('[data-tab="' + hzid + '"]').find('.tabname').html(data.zclabel).addClass('zc-tab-noedit'); // NO I18N
           component.find('.zctablist' + zid).find('.tabname').html(data.zclabel).addClass('zc-tab-noedit'); // NO I18N
            var el = $(hzid);
           // el.css('padding','30px'); // NO I18N
            var uioffset = {left:30,top:30, width: 'calc(100% - 60px)'}; // NO I18N
            var instance = el.data('zcanvas'); // NO I18N
            var contextid = zutils.getRandomId();
            if(data.data){
            	var tabcallback = function(context){
                    if(!callback){
                      // context.css({width: 'calc(100% - 60px)' , height: 'calc(100% - 60px)'}); // NO I18N
                    	var parenttab = context.parent();
                    	var parentdim = {w: parenttab.width() , h: parenttab.height()};
						context.css({width: parentdim.w - 60 , height: parentdim.h - 90});
						context.addClass('zcautoratio').zaddClass('zcautoratio'); // NO I18N
                     //   zutils.invokeResize(context);
                    }
                }
            	
            	
                if(data.data instanceof Promise){
                    data.data.then(function(res){
                        data.data = res.data;
                        data.template = res.template;
                        data.menu = res.menu;
                        data.rellistdata = res.rellistdata;
                        data.module = res.module;
                        data.actions = res.actions;
                        data.fieldid = data.menu.data.map(function(item){ return item.id;});
                        data.gallery = res.gallery;
                        var menuinst = $(data.fieldContainer).data('zcanvasMenu'); // NO I18N
                        menuinst.reduceScope({
                            id: data.id , fieldContainer: data.fieldContainer
                        })
                        instance.renderrelatedList(data, data.template,el,null,instance.config,uioffset,contextid , undefined , selectionflag, tabcallback);
                        self_.bindscope(instance);
                        self_.savenewtabdetails(component , zid, true);
                        callback && callback(contextid);

                    });
                }else if(data.async){
                    data.asyncloader && data.asyncloader.then(function(){
                        var menuinst = $(data.fieldContainer).data('zcanvasMenu'); // NO I18N
                        menuinst.reduceScope({
                            id: data.id , fieldContainer: data.fieldContainer
                        })
                        instance.renderrelatedList(data, data.template,el, null,instance.config,uioffset,contextid , undefined , selectionflag, tabcallback);
                        self_.bindscope(instance);
                        self_.savenewtabdetails(component , zid , true);
                        callback && callback(contextid);
                        delete data.asyncloader;
                        data.async = false;
                    });
                }else{
                    var menuinst = $(data.fieldContainer).data('zcanvasMenu'); // NO I18N
                    menuinst.reduceScope({
                        id: data.id , fieldContainer: data.fieldContainer
                    })
                    if(!canvasObjUtils._.isEmpty(data.data)){
                        data.data = zcanvasrelatedList.updatereference(zutils.zcopyobj(data.data)); 
                        data.template = instance.config.relatedlistcompile(data.data , data , true);
                    }
                    instance.renderrelatedList(data, data.template,el, null,instance.config,uioffset,contextid , undefined , selectionflag, tabcallback);
                    self_.bindscope(instance);
                    self_.savenewtabdetails(component , zid , true);
                    callback && callback(contextid);
                }
//                callback || setTimeout(function(){
//                    var context = $('#' + contextid);
//                   // zutils.invokeResize(context);
//                    context.css({width: 'calc(100% - 60px)' , height: 'calc(100% - 60px)'}); // NO I18N
//                },1000)
            }
        }

        this.compilestyle = function(template,defaultdata,flag){
            var zid = template.attr('id');// NO I18N
           if(!zid){
               zid = zutils.getRandomId();
               template.attr('id',zid);// NO I18N
           }
       !flag && self_.applystyle(zid,template,defaultdata);
        self_.togglenav(template);
       }

       this.applydefault = function(data, defaultdata){
           for(var key in data){
                if(defaultdata[key] && data[key]){
                    for(var property in defaultdata[key]){
                        data[key][property] = parseInt(data[key][property]) + parseInt(defaultdata[key][property]) + 'px';
                    }
                }
           }
       }

       this.applystyle = function(zid,template,defaultdata){
         template.children('style').remove();  // NO i18N
         var styles = template.data('layoutstyle') || {}; // NO i18N
         styles = zutils.zobjdiff( self_.defaulttheme, styles );
         self_.applydefault(styles, defaultdata || {});
         var editor = template.find('.zc-tab-container'); // NO I18N
         editor.css(styles.editor || {});

         var styletag = $('<style/>');
         var defaultstyle = styles.default || {};
         var stylestring = '#' + zid + ' ul .tab {';
         for(var i in defaultstyle){
             // eslint-disable-next-line no-unused-expressions
             defaultstyle[i] ?  stylestring += i + ' : ' + defaultstyle[i] + ';' : '';
         }
         stylestring += '}';
         
         var hoverstyle = styles.hover || {};
         stylestring += '#' + zid + ' ul .tab:hover {';
         for(var i in hoverstyle){
             // eslint-disable-next-line no-unused-expressions
             hoverstyle[i] ?  stylestring += i + ' : ' + hoverstyle[i] + ';' : '';
         }
         stylestring += '}';
         
         var activestyle = styles.active || {};
         stylestring += '#' + zid + ' ul .tab.active {';
         for(var i in activestyle){
             // eslint-disable-next-line no-unused-expressions
             activestyle[i] ?  stylestring += i + ' : ' + activestyle[i] + ';' : '';
         }
         stylestring += '}';

         styletag.html(stylestring);

         template.find('.zc-tabs').css(styles.container || {});

         template.append(styletag);
    }

    

     this.addIcon = function(icon,tab){
        var previous = {};
        self_.tabjson(previous,tab);
        if(tab.length){
            var iconel = tab.find('.zctabicons'); // NO I18N
            if(iconel.length){
                var exticon = iconel.attr('data-zcicon'); // NO I18N
                iconel.addClass(icon).removeClass(exticon).attr('data-zcicon',icon); // NO I18N
            }else{
                var tabsorticon = tab.find('.icon'); // NO I18N
                iconel = $('<span/>' , {class: 'zctabicons'}).addClass(icon).attr('data-zcicon',icon); // NO I18N
                iconel.insertAfter(tabsorticon);
            }
            self_.rendertabjson(tab , previous);
        }
     }

     this.hideIcon = function(tab){
        var previous = {};
        self_.tabjson(previous,tab);
         if(tab.length){
             tab.find('.zctabicons').remove();
             self_.rendertabjson(tab , previous);
         }
     }

     this.hideText = function(tab){
        var previous = {};
        self_.tabjson(previous,tab);
         if(tab.length){
             tab.find('.tabname').hide();
             tab.find('.zctabicons').addClass('zctabnotext'); // NO I18N
             self_.rendertabjson(tab , previous);
         }
     }

     this.showText = function(tab){
        var previous = {};
        self_.tabjson(previous,tab);
        if(tab.length){
            tab.find('.tabname').show();
            tab.find('.zctabicons').removeClass('zctabnotext'); // NO I18N
            self_.rendertabjson(tab , previous);
        }
     }

     this.rendertabjson = function(tab, json){
        var current = {};
        self_.tabjson(current , tab);
        var undoobj = {
            action: 'layout', // NO I18N
            instance: self_,
            json: {
                action: 'rendertab', // NO I18N
                previous: json,
                current: current,
                // eslint-disable-next-line webperf/no-global-variables
                editor: tab.closest('.zctablayout'), // NO I18N
                id : tab.attr('data-tab') // NO I18N
            }
        }
        self_.savecanvasaction(undoobj);
     }

     this.rerendertab = function(data,hidetext,icon){
       // var tab = data.editor.find('li[data-tab="' + data.id + '"]');
       var tabzid = data.id.replace('#' , '');
       var tab = data.editor.find('li.zctablist' + tabzid);
        tab.find('.zctabicons').remove();
        // eslint-disable-next-line webperf/show-last
        var tabname = tab.find('.tabname').show(); // NO I18N
        if(hidetext){
            tabname.hide();
        }
        if(icon){
            var $icon = $(' <span class="zctabicons ' + icon + '" data-zcicon="' + icon + '"></span>');
            $icon.insertBefore(tabname);
            hidetext && $icon.addClass('zctabnotext');
        }
     }
     this.renamefocus = function(el){
        if (typeof window.getSelection !== "undefined"
                // eslint-disable-next-line zstandard/no-duplicate-null-check
                && typeof document.createRange !== "undefined") { // NO I18N
            var range = document.createRange();
            range.selectNodeContents(el[0]);
            range.collapse(false);
            var sel = window.getSelection();
            sel.removeAllRanges();
            range.selectNodeContents(el[0]);
            sel.addRange(range);
            
        } else if (typeof document.body.createTextRange !== "undefined") {
            var textRange = document.body.createTextRange();
            textRange.moveToElementText(el[0]);
            textRange.collapse(false);
            textRange.select();
        }
    }
    
    this.savecanvasaction = function(data,inst){
        if(data){
            inst = inst || zutils.getParentData(data.json.editor).config.undoredomanager;
            inst.push(data);
            return data;
        }
    }

    this.savenewtabdetails = function(component , zid, listflag){
        var hzid = '#' + zid;
        // var tab = component.find('.zc-tabs li[data-tab="' + hzid + '"]');
        var tab = component.find('.zc-tabs li.zctablist' + zid);
        var tabjson = {};
        self_.tabjson(tabjson , tab);
        // eslint-disable-next-line webperf/directly-select-with-id
        var editor = component.find(hzid);
        var editorjson = canvasOutput.createJson(editor);
        var undoobj = {
            action: 'layout', // NO I18N
            instance: self_,
            json: {
                action: 'newtab', // NO I18N
                previous: {
                    tab: tabjson,
                    tabid: zid,
                    container: editorjson,
                    isList: listflag
                },
                editor: component
            }
        }
       self_.savecanvasaction(undoobj);
       // FIXME:: Needs to handle by service
       tab.attr('data-zcqa', 'canvas-detail-tab-' + tabjson.name); // NO I18N
    }

    this.executeUndo = function(data){
        switch (data.action) {
            case 'new':
                data.node = $('#' + data.node.attr('id')); // NO I18N
                var parentinst = zutils.getParentData(data.node);
                parentinst && zutils.changelayoutscope(parentinst , 'Tab Layout' ); // NO I18N
                data.node.remove();
                break;
            case 'rename':
                data.node.text(data.previous);
                break;
            case 'deletetab':
                data.editor = $('#' + data.editor.attr('id'));
                var component = data.editor;
                var zid = data.previous.container.zcanvasId;
                addnewtab( data.previous.tab.name , component.find('.zc-tab-container') , component , false , zid , data.previous.tab.icon , data.previous.tab.hideText , data.previous.tab.disabled);
                var inst = $('#' + zid).data('zcanvas'); // NO I18N
                inst.addElement(data.previous.container.children , null , {fieldscoping: true});
                if(data.previous.container.ui.value && data.previous.container.ui.value.class && data.previous.container.ui.value.class.indexOf('zc-tab-all-fields') > -1){
                	self_.bindscope(inst, '.zc-fieldsection'); // NO I18N
                	inst && inst.container && inst.container.zaddClass('zc-tab-all-fields'); // NO I18N
                }
                var $ul = component.find('.zc-tabs'); // NO I18N
              //  var hzid = '#' + zid;
               // var $el = $ul.find('li[data-tab="' + hzid + '"]'); // NO I18N
               var $el = $ul.find('li.zctablist' + zid); // NO I18N
                if(data.order){
                    $el.insertAfter($ul.find('li:eq(' + (data.order - 1) + ')'));
                }else{
                    $ul.prepend($el);
                }
                $el.data('zcanvasdata' , data.prevdata); // NO I18N
                break;
            case 'rendertab':
                data.editor = $('#' + data.editor.attr('id'));
                self_.rerendertab(data, data.previous.hidetext , data.previous.icon);
                break;
            case 'taborder':
                data.editor = $('#' + data.editor.attr('id'));
                var $tab = data.editor.find('.zc-tabs'); // NO I18N
               // var li = $tab.find('li[data-tab="' + data.tab + '"]').hide();
               var tabzid = data.tab.replace('#' , '');
               var li = $tab.find('li.zctablist' + tabzid).hide();
                if(data.previous){
                    li.insertAfter($tab.find('li:visible:eq(' + (data.previous - 1) + ')')).show();
                }else{
                    // eslint-disable-next-line webperf/show-last
                    $tab.prepend(li.show())
                }
                break;
            case 'newtab':
                data.editor = $('#' + data.editor.attr('id'));
                var zid = data.previous.container.zcanvasId;
               // var hzid = '#' + zid;
               //  var tab = data.editor.find('.zc-tabs li[data-tab="' + hzid + '"]');
               var tab = data.editor.find('.zc-tabs li.zctablist' + zid);
                self_.deletetab(data.editor , tab.children('.tabname'), true); // NO I18N
                break;
            case 'deleteLayout':
                var $parent = zutils.getdatabyelement($(data.node));
                $parent.addElement([data.previous], data.parentstyle);
                break;
            default:
                break;
        }
    }

    this.executeRedo = function(data){
        switch (data.action) {
            case 'new':
                var $parent = $('#' + data.editor.attr('id'));
                var parentstyle = jsonCreation.getstyles($parent);
                var parentdata = zutils.getdatabyelement($parent);
                parentdata.addElement([data.current], {ui:{value:{style:parentstyle}}});
                data.node = $('#' + data.current.zcanvasId);
                break;
            case 'rename':
                data.node.text(data.current);
                break;
            case 'deletetab':
                var component = $('#' + data.editor.attr('id'));
                var zid = data.previous.container.zcanvasId;
                //var hzid = '#' + zid;
                // var el = component.find('li[data-tab="' + hzid + '"]'); // NO I18N
                var el = component.find('li.zctablist' + zid); // NO I18N
                self_.deletetab(component,el.find('.deletetabicon'),true);
                break;
            case 'rendertab':
                data.editor = $('#' + data.editor.attr('id'));
                self_.rerendertab(data, data.current.hidetext , data.current.icon);
                break;
            case 'taborder':
                data.editor = $('#' + data.editor.attr('id'));
                var $tab = data.editor.find('.zc-tabs'); // NO I18N
                // var li = $tab.find('li[data-tab="' + data.tab + '"]').hide();
                var tabzid = data.tab.replace('#' , '');
                var li = $tab.find('li.zctablist' + tabzid).hide();
                if(data.current){
                    li.insertAfter($tab.find('li:visible:eq(' + (data.current - 1) + ')')).show();
                }else{
                    // eslint-disable-next-line webperf/show-last
                    $tab.prepend(li.show())
                }
                break;
            case 'newtab':
                data.editor = $('#' + data.editor.attr('id'));
                var component = data.editor;
                var zid = data.previous.container.zcanvasId;
                addnewtab( data.previous.tab.name , component.find('.zc-tab-container') , component , false , zid , data.previous.tab.icon , data.previous.tab.hideText , data.previous.tab.disabled);
                var inst = $('#' + zid).data('zcanvas'); // NO I18N
                inst.addElement(data.previous.container.children);
                if(data.previous.container.ui.value && data.previous.container.ui.value.class && data.previous.container.ui.value.class.indexOf('zc-tab-all-fields') > -1){
                	self_.bindscope(inst, '.zc-fieldsection'); // NO I18N
                	inst && inst.container && inst.container.zaddClass('zc-tab-all-fields'); // NO I18N
                }
                break;
            case 'deleteLayout':
                self_.deletelayout($(data.editor), true);
                break;
            default:
                break;
        }
    }


    /**
     * Method to prefill the available RL Tabs loaded
     */

    this.prefilltabs = function(component){
        var container = component.find('.zc-tab-container')
        self_.createdropdown(null , container , component , null , null).hide();
        var listitems = component.find('.zctab-dropdown li');
        var listlen = listitems.length;
        for(var  i = 1 ; i < listlen ; i ++){
            var item = listitems.eq(i);
            var data = item.data('zcreldata'); // NO I18N
            var zid = addnewtab(data.zclabel , container , component , false);
            //var hzid = '#' + zid;
           // component.find('.zc-tabs li[data-tab="' + hzid + '"]').addClass('zctab-nonfilled').data('zcrelfilldata',data); // NO I18N
           component.find('.zc-tabs li.zctablist' + zid).addClass('zctab-nonfilled').data('zcrelfilldata',data); // NO I18N
        }
        self_.lazyfill(component);
     }


     this.lazyfill = function(component){
        var nonfilledtabs = component.find('.zc-tabs .zctab-nonfilled').eq(0); // NO I18N
        var data = nonfilledtabs.data('zcrelfilldata'); // NO I18N
        if(data){
            var zid = nonfilledtabs.attr('data-tab').substring(1); // NO I18N
            var menuninstance = $(data.fieldContainer).data('zcanvasMenu');
            var config = menuninstance.config;
            config.zmenustart(data);
            self_.renderlist(component , data , zid, true , function(contextid){
                nonfilledtabs.removeClass('zctab-nonfilled'); // NO I18N
                setTimeout(function(){
                    var context = $('#' + contextid);
                    context.css({width: 'calc(100% - 60px)' , height: 'calc(100% - 60px)'}); // NO I18N
                },500)
                self_.lazyfill(component);
            });
        }
     }


     this.renametab = function(component, el, input, noundo ,  encode){
        var previous = input.data('zc-old-text'); // NO I18N
        // el = component.find('.zc-tabs li[data-tab="' + el + '"]')
        var tabzid = el.replace('#' , '');
        el = component.find('.zc-tabs li.zctablist' + tabzid);
        var current = input.val().trim();
        if(encode){
            current = encode(current);
        }
        el = el.find('.tabname').html(current);
        if(previous !== current && !noundo){
            var undoobj = {
                action: 'layout', // NO I18N
                instance: self_,
                json: {
                    action: 'rename', // NO I18N
                    current: current,
                    previous: previous,
                    node: el,
                    editor: component
                }
            }
            self_.savecanvasaction(undoobj);
        }
     }

     this.getComponentStyle = function(tablayout){
        var tselector = '#' + tablayout.attr('id') +  '> .zc-tablist-container > .zc-tabs li.tab' ; // NO I18N
        var sstyle = zutils.zcopyobj2(jsonCreation.toolinst.getstylebyselector(tselector , true , true));
        var sstyledata = {
         default: sstyle.default,
         hover: sstyle.hover, 
         active: sstyle.active
        }
        sstyledata.container = jsonCreation.getstyles(tablayout.children('.zc-tablist-container').find('.zc-tabs') ); // NO I18N
        sstyledata.editor = jsonCreation.getstyles(tablayout.children('.zc-tab-container'));  // NO I18N
        return sstyledata;
     }

     this.applyComponentStyle = function(component ,style , flag){
        var olddata = this.getComponentStyle(component);
        jsonCreation.toolinst.applyjsontostyle(component.find('.zc-tabs li') ,style , null , null , true);
        jsonCreation.toolinst.applyjsontostyle(component.children('.zc-tab-container') , style.editor , null , null , true); // NO I18N
        jsonCreation.toolinst.applyjsontostyle( component.find('.zc-tabs') , style.container , null , null , true);
        if(flag){
            return;
        }
        var undodata = {
            action: 'callback', // NO I18N
            node: '#' + component.attr('id'), // NO I18N
            previous: zutils.zcopyobj2( olddata ),
            current: zutils.zcopyobj2( style ),
            callback: function(data , operation , node){
                var newstyle = operation === 'undo' ? data.previous : data.current; // NO I18N
                zclayout.prototype.layouts["Tab Layout"].applyComponentStyle( node , newstyle , 1  ); // NO I18N
            }
        }
        return undodata;

     }



    }();
})();;(function(){
    zclayout.prototype.layouts["Table Layout"] = new function(){

        var self_ = this;

        var template = '<div data-zc-min-width="120" class=\'zcanvas zcanvas-editor zclayout-table zclayout\' data-layoutname=\'Table Layout\' data-zcanvasclass=\'zclayout-table\'>\
                            <div data-tablecolumn=\'0\' class=\'zctableaddrow\'>+</div>\
                            <span class="zc-table-layout-draghandle"></span>\
                            <div class=\'zc-table-resizetable\'></div>\
                            <div class=\'zctable-sortable zcanvas zcanvas-skip-selection\'></div>\
                        </div>';



        this.getLabelHtml = function(){
          //  var html =   '<div style="position:relative"><table class="zctabicon"><tbody><tr><td style=" background: #404560; "></td><td style=" background: #32374e; "></td><td style=" background: #404560; "></td><td style=" background: #32374e; "></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><div class="zciconlabel">' + I18n.getMsg('crm.dashboard.label.table') + '</div></div>'; // NO I18N
            var html = '<div class="zclisticon"><div class="zcl_container zctablelayouticon"></div><div class="zcl_title">' + I18n.getMsg('crm.dashboard.label.table') + '</div></div>'; // NO I18N
            return html;
        }
        
        /**
         *  Method for send template
         */
        this.gethtml = function(){
            return template;
        }

        /**
         * Method to call after drop
         */
        this.init = function(component,noconfig,undo,init,zid){
            if(!noconfig){
                var createflag = false;
                if(!zid){
                    createflag = true;
                }
                this.configlayout(component,zid);
                   // FIXME: Need to to with Config
                   component.find('.zctableaddrow').attr('lt-prop-title' ,I18n.getMsg('crm.label.addColumn') ); // NO I18N
                createflag && self_.newtable(component);
            }
            component.data('zcanvasclass',component.attr('data-zcanvasclass')); // NO I18N
        }

        /**
         * FIXME: Empty methods
         */
        // eslint-disable-next-line zohocrm/no-dummy-functions
        this.selectfieldonEditor = function(event){
            // PURPOSE: added intentionally to overwrite the canvas (section) function
            return event;
        }
        
        /**
         * Method to configure the table
         */
        this.configlayout = function(component,zid){
           // var parenteditor = component.parent();
            var parenteditor = zutils.getClosestEditor(component);
            var outinstance = parenteditor.data('zcanvas'); // NO I18N
            var mainconfig = zutils.zcopyobj( outinstance ).config;
            var nochange = component.hasClass('zcnochange'); // NO I18N

           // var selector = mainconfig.editorcontainer+" > .zcanvas:not('.ui-draggable-dragging,.zcanvas-multiselect')";//NO I18N
           // var selectorResizing = mainconfig.editorcontainer+" > .zcanvas:not('.ui-resizable-resizing,.zcanvas-multiselect')";//NO I18N

            var $sortableel = component.find('.zctable-sortable'); // NO I18N
            var data = $('.zcanvas-editor-outer').data('zcanvas');
            zid = zid || zutils.getRandomId();
            component.attr('id',zid); // NO i18N
            var style = component.data('layoutstyle') || { // NO I18N
                row: {
                    height: '50px' // NO i18N
                }
            }; // Empty style
            component.data('layoutstyle', style); // NO i18N
            // eslint-disable-next-line zstandard/combine-properties
            component.data('zcanvas',this); // NO i18N
            if(nochange){
                var zcid = zid + '_hiddenfield'; // NO I18N
                component.find('.zc-table-resizetable').append('<div class="zc-hidden-table-field zcanvas-field ' + zcid+ '"><div class="zcanvas-holder zcanvas-data-node" data-zcanvasid="' + zcid + '" ><div class="zcanvas-label zcanvas-inner-component"></div><div class="zcanvas-value-container zcanvas-inner-component"></div></div></div>')
            }
            // Make component draggable
            nochange || component.draggable({
                containment: '.zcanvas-editor-outer', // NO I18N
                zcGuide: true,
                znoposition: true,
                snapTolerance: 5,
                scroll: false,
                appendGuideTo: mainconfig.editorcontainer,
                disabled: mainconfig.alwaysdisabled
            });
            // Make component resizable
            nochange || component.resizable({
                containment: 'parent', // NO I18N
                handles: 'e, s, se, w, sw , n , nw , ne', // NO I18N
                classes: {'ui-resizable-se':'zcanvas-resizable-se'}, // NO I18N
                zcGuide: true,
                snapTolerance: 5,
                zhandlevisible: true,
                appendGuideTo: mainconfig.editorcontainer,
                stop: function(event , ui){
                    self_.savecanvasaction($(event.target) ,  { node: '#' + event.target.getAttribute('id') , action:  'resize', previous: canvasObjUtils._.extend( ui.originalSize , ui.originalPosition ), current: canvasObjUtils._.extend(ui.size , ui.position )}); // NO I18N
                }
            });
            // Handle Click
            component.click(function(e){
                data && data.config && data.config.toolsRef && data.config.toolsRef.selectfield(e);
            }).mouseover(function(e){
                data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e, true);
            }).mouseout(function(e){
                data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e);
            });

            // Sortable Configuration
            nochange || $sortableel.sortable({
                items: ".zcanvas-row", // NO I18N
                tolerance:'intersect', // NO I18N
                axis:'y', // NO I18N
                handle: '.zc-table-sort',  // NO I18N
                refreshPositions: true,
                scroll: false,
                over: function(event, ui){	
                    self_.toggleothereditors(ui,true);
                    ui.helper && ui.helper.addClass('zcanvas-on-editor').removeClass('zcanvas-on-menu');
                    var item = ui.helper || ui.item;
                    var draginst = item.draggable('instance'); // NO I18N
                    if(!draginst){
                    	var zdata = item.data('zcanvas'); // NO I18N
                    	if(zdata){
                    		var menuint = $(zdata.fieldContainer).data('zcanvasMenu'); // NO I18N
                    		var drag = menuint ? menuint.getElementByKey('id' , zdata.id) : ''; // NO I18N
                    		draginst = $(drag).draggable('instance'); // NO I18N
                    	}
                    }
                    if(draginst){
                    	if(!draginst.options.prescope){
                    		draginst.options.prescope = draginst.options.scope;
                        	draginst.options.scope = component.attr('id'); // NO I18N
                    	}
                    	
                    	$.ui.ddmanager.prepareOffsets( draginst, event );
                    }
                },
                out: function(event, ui){
                    self_.toggleothereditors(ui,false);
                    ui.helper && ui.helper.addClass('zcanvas-on-editor').removeClass('zcanvas-on-menu');
                    var item = ui.currentItem || ui.helper || ui.item;
                    var draginst = item.draggable('instance'); // NO I18N
                    if(draginst){
                    	draginst.options.scope = draginst.options.prescope || 'default'; // NO I18N
                    	draginst.options.prescope = null;
                    }
                    if(ui.item.parent().length){
                    	var helper = ui.helper;
                    	if(!helper){
                    		helper = ui.item;
                    	}
                    	var drag = helper.data('zcanvas'); // NO I18N
                    	var dragdata = helper.draggable('instance'); // NO I18N
                    	var drop =  dragdata && dragdata._parent ? zutils.getdatabyelement(dragdata._parent) : null;
                    	if(drag && drop && dragdata){
                    		var ismulti = drop.config && drop.config.multiresize && drop.config.multiresize.indexOf(drag.zctype) > -1;
                    		var dragdata = dragdata.helperProportions
                    		var obj = {};
                    		// eslint-disable-next-line webperf/layout-thrashing
                    		obj.width = dragdata.width;
                    		if(ismulti){
                    			// eslint-disable-next-line webperf/layout-thrashing
                    			obj.height = dragdata.height;
                    		}
                    		ui.item.css(obj); // NO I18N
                    	}else{
                        	ui.item.css({'width':'auto','height':'auto'}); // NO I18N
                        }
                    	
                    }
                },
                receive: self_.handledrop.bind(component),
                remove: function(event, ui){
                    ui.helper && self_.preparedroppable(ui.helper,component,false);
                },
                start: function(event , ui){
                    ui.item.attr('data-previndex', ui.item.index()); // NO I18N
                },
                stop: function(event, ui){
                    if(ui.item.hasClass('zcanvas-row')){
                        self_.rowsort(component , ui.item);
                        return;
                    }
                    ui.item.addClass('zcanvas');
                    var data =   ui.item.data('zcanvas'); // NO I18N
                    ui.item.find(".zcanvas-holder").data("zcanvas", data); // NO I18N
                    var holderNode = ui.item.find(".zcanvas-data-node");//NO I18N
                    holderNode.zdata(data);
                    ui.item.css('height','auto'); //NO I18N
                    // TODO: Change once undo redo implemented
                    // self_.changedetection(component);
                }
            });

            var addcolumn = component.find('.zctableaddrow'); //NO I18N
            nochange || addcolumn.click(function(e){
                var column = $(e.currentTarget);
            	if(column){
                    var count =  parseInt( column.attr('data-tablecolumn') ); // NO I18N
                    if(count >= 5){
                        var parentinst = zutils.getParentData(component);
            	        parentinst && parentinst.config && parentinst.config.toolsRef && parentinst.config.toolsRef.config && parentinst.config.toolsRef.config.validationerror('maxerror',5,'_column_'); // NO I18N
                        return;
                    }
                }
                self_.addcolumn(component, true, true);
            });
            self_.addcolumn(component,true);
            
        }
        this.reducescope = function(element , ui){
        	if(!element){
        		element = ui.helper;
        	}
            var zdata = element.data('zcanvas'); // NO I18N
            if(zdata){
                var menu = $(zdata.fieldContainer).data('zcanvasMenu'); // NO I18N
                if(menu){
                    menu.reduceScope(zdata);
                }
            }
        }
        this.handledrop = function(event , ui, flag) {
            var $sortable = this.find('.zctable-sortable');
            // Element already dropped in Droppable
            if(ui.helper && ui.helper.hasClass('zcdropped')){
                ui.helper.remove();
                $sortable.sortable('refresh');  // NO I18N
                return;
            }
            flag && $sortable.sortable('refresh'); // NO I18N
            // Just an update no need to wrap
            if(!ui.helper && ui.item.is('.zcanvas-row')){
                return;
            }

            if($sortable.find('.zcanvas-row').length >= 1000){
            	var parentinst = zutils.getParentData(this);
            	parentinst && parentinst.config && parentinst.config.toolsRef && parentinst.config.toolsRef.config && parentinst.config.toolsRef.config.validationerror('maxerror',1000,'_row_'); // NO I18N
            	$sortable.sortable('cancel'); // NO I18N
            	if(ui.helper === ui.sender){
            		var drag = ui.sender.draggable('instance'); // NO I18N
            		if(drag){
            			var parentinst = drag._parent;
            			if(parentinst){
            				parentinst.append(ui.sender.css(drag.originalPosition));
            			}
            		}
            		
            	}else{
            		ui.helper.remove();
            	}
            	
            	return;
            	
            }

            if(ui.helper !== ui.sender){
                self_.reducescope(ui.sender , ui);
            }
            
            var $helper = ui.helper || ui.item;
             
            var draginst = ui.item.draggable('instance'); // NO I18N
            if(draginst){
            	draginst.options.scope = draginst.options.prescope;
            	draginst.options.prescope = null;
            }
             // DONT accept when the helper is not inside the drop
             if(!$helper.closest(this).length){
            	return;
            }
            var fieldparent = !flag && !ui.item.hasClass('zcanvas-on-menu') ? ui.item.data('uiDraggable') : null; // NO I18N
            var zid = flag || zutils.getRandomId(); 
            var columnadd = this.find('.zctableaddrow');
            var availablecolumn = parseInt(columnadd.attr('data-tablecolumn')); // NO I18N
            var wraptemplate = '<div id = "' + zid + '" class="zcanvas-row zcanvas zcanvas-selectable zclayoutdeletable" data-layoutname="Table Layout" data-zcanvastooltype="row" data-zcanvasclass="zcanvas-row"><div class="zc-table-cell"></div><span class="zc-insert-trow"></span></div>';
            var sorttemplate = '<div class="zc-table-cell"></div>';
            var data = $helper.data('zcanvas');  // NO I18N
            var zcmetadata = {field : $helper.data('zcanvasdata') , value : $helper.find('.zcanvas-value-container').data('zcanvasdata') , label : $helper.find('.zcanvas-label').data('zcanvasdata')}; // NO I18N
            var $clone = $helper.clone().css('height','auto');  // NO I18N
            $helper && $helper.wrapAll(wraptemplate);
            $helper.replaceWith($clone);
            $clone.data('zcanvasdata' , zcmetadata.field); // NO I18N
            $clone.find('.zcanvas-label').data('zcanvasdata' , zcmetadata.label); // NO I18N
            $clone.find('.zcanvas-value-container').data('zcanvasdata', zcmetadata.value); // NO I18N
            var $wrapper = $clone.parents('.zcanvas-row');  // NO I18N
            $wrapper.prepend('<span class="ui-resizable-s ui-resizable-handle zctable-row-resize"></span><span class="zc-table-sort"></span>');
            while(availablecolumn - 1 > 0){
                $wrapper.append(sorttemplate);
                availablecolumn--;
            }
            // FIXME: I18n needs to be config
            //$wrapper.find('.zc-insert-trow').attr('lt-prop-title' , I18n.getMsg('crm.canvas.builder.addrow')).click(self_.addbottomrow.bind(component)); // NO I18N
            self_.configdroppable($wrapper, this);
            self_.preaparedrag($clone,this,true,zutils.zcopyobj(data));
            $sortable.sortable('refresh');  // NO I18N
            self_.configrowresize($wrapper,this,zid);
            flag || event.stopImmediatePropagation();
            self_.blinkelement($wrapper);
            self_.toggleothereditors({item: $clone},false);
            if(this.hasClass('zc-no-theme')){ // NO I18N
                $wrapper.find('.zc-table-sort').css('position','absolute'); // NO I18N
            }
            // TODO: handle once undo redo implemented
           // self_.changedetection(this);
           flag || self_.newrow(this , $wrapper , ui , fieldparent , zcmetadata);
        }
        this.configrowresize = function(wrapper, component, zid){
            var data = $('.zcanvas-editor-outer').data('zcanvas');
            wrapper && wrapper.resizable({
                handles: {
                    s: '#' + zid + ' .zctable-row-resize'
                }, // NO i18N,
                zhandlevisible: true,
                start: function(){
                    component.addClass('zc-table-rowresizing'); // NO I18N
                },
                resize: canvasObjUtils._.debounce(function(e, ui){
                    if(e && typeof e.length === 'number'){
                        ui = e[1];
                        e = e[0];
                    }
                    //  var oldheight = ui.originalSize.height;
                    //  var newheight = ui.size.height = oldheight + (  (ui.size.height - oldheight ) / 4 );
                      var newheight = ui.size.height;
                     self_.rowresize(newheight,component);
                      
                  },600),
                stop: function(e, ui){
                    component.removeClass('zc-table-rowresizing'); // NO I18N
                    var undoredoobj = {
                        action: 'callback', // NO I18N
                        node: '#' + $(e.target).attr('id'), // NO I18N
                        previous: ui.originalSize.height,
                        current: ui.size.height,
                        table:'#' + component.attr('id'),
                        callback: function(data , method ){
                            var $table = $(data.table);
                            if(method === 'undo'){
                                self_.rowresize(data.previous, $table);
                            }else{
                                self_.rowresize(data.current , $table);
                            }
                        }
                    }
                    // TODO: change once the undo redo implemented
                    //self_.changedetection(component);
                    self_.savecanvasaction(component , undoredoobj);
                }
            });

            wrapper.mouseover(function(e){
                data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e, true);
            }).mouseout(function(e){
                data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e);
            })
        }
        this.rowresize = function(newheight , component){
            var style = component.data('layoutstyle') || {}; // NO I18N
            style.row = style.row || {};
            style.row.height = newheight + 'px';
            self_.compilestyle(component);
        }
        this.configdroppable = function(row,component){
            var drops = row.find('.zc-table-cell:not(.ui-droppable)'); // NO I18N
            component = component ? component : row.closest('.zclayout-table'); // NO I18N
            drops.droppable({
                tolerance: 'pointer',  // NO I18N
                hoverClass: 'zc-table-cell-active',  // NO I18N
                greedy: true,
                scope: component.attr('id'), // NO I18N
               // accept: '.zcanvas-field',  // NO I18N
                accept: function(draggable){
                    //  return ( draggable.hasClass('zcanvas-field') && $(this).find('.zcanvas-field').length == 0 ); // NO I18N
                    var flag = false;
                    if( draggable.hasClass('zcanvas-field') && $(this).find('.zcanvas-field').length === 0 ){ // NO I18N
                        var zdata = draggable.data('zcanvas'); // NO I18N
                        var zinst = draggable.draggable('instance'); // NO I18N
                        if(zdata && zinst && zinst.options.zconnectToSortableCondition && !zinst.options.zconnectToSortableCondition(draggable)){
                            flag = true;
                        }
                    }
                   
                    return  flag; 
                },
                drop: function(event , ui, flag){
                    if(ui.helper.hasClass('zcdropped')){
                        return;
                    }
                
                    if(ui.draggable){
                        var inst = ui.draggable.draggable('instance') || {}; // NO I18N
                        var current = $(inst.currentItem);
                        !current.hasClass('zcanvas-on-editor') && self_.reducescope(ui.draggable); // NO I18N
                        inst.options.scope = inst.options.prescope || 'default'; // NO I18N
                        inst.options.prescope = null;
                    }
                   component = component ? component : row.closest('.zclayout-table'); // NO I18N
                    var target = $(event.target);
                    var data = ui.helper.data();  // NO I18N
                    self_.newcell(component, target.parent() , target ,data , flag)
                    var zcmetadata = {field : ui.helper.data('zcanvasdata') , value : ui.helper.find('.zcanvas-value-container').data('zcanvasdata') , label : ui.helper.find('.zcanvas-label').data('zcanvasdata')}; // NO I18N
                    var $item = flag || ui.helper.clone();  
                    target.append($item);
                    $item.data('zcanvasdata' , zcmetadata.field); // NO I18N
                    $item.find('.zcanvas-label').data('zcanvasdata' , zcmetadata.label); // NO I18N
                    $item.find('.zcanvas-value-container').data('zcanvasdata' , zcmetadata.value); // NO I18N
                    $item.css({top: 0 , left: 0, height: 'auto'});  // NO I18N
                    $item.removeClass('ui-draggable-dragging');
                    self_.blinkelement($item);
                    flag || ui.helper.addClass('zcdropped');
                    event.stopImmediatePropagation();
                    self_.preaparedrag($item,component,true, zutils.zcopyobj(data.zcanvas));
                   
                },
                over: function(){
                    var $sortable = row.parents('.ui-sortable');  // NO I18N
                    $sortable.addClass('zcoverdrop');
                },
                out: function(){
                    var $sortable = row.parents('.ui-sortable');  // NO I18N
                    $sortable.removeClass('zcoverdrop');
                }
            })
        }
        this.preaparedrag = function(item,component,flag,data){
            var pdata = $('.zcanvas-editor-outer').data('zcanvas');
            var config = pdata.config;
            var hasdrag = false;
            !hasdrag || item.has('.zctablehandler').length || item.prepend('<span class="zctablehandler zc-remove-meta"></span>')
            hasdrag || item.removeClass('ui-draggable');
            !hasdrag || item.draggable({
                containment: config.zccontainment,
                zconnectToSortable:'.zcanvas:not(.zc-non-linkable)', //NO I18N
                cursorAt:{
                    top: 0, left: 5
                },
                scroll: false,
                appendTo: 'body',  // NO I18N
                handle: '.zctablehandler' // NO i18N
            });
            item.data('zcanvas',data).zdata(data);  // NO I18N

            item.addClass('zc-table-field'); // NO I18N

            var $hoverel = item.add(item.find('.zcanvas-holder , .zcanvas-inner-component')); // NO I18N
            
            $hoverel.mouseover(function(e){
                config && config.toolsRef && config.toolsRef.hoverfield(e, true);
            }).mouseout(function(e){
                config && config.toolsRef && config.toolsRef.hoverfield(e);
            });


            // TODO: change once undo redo implemented
           flag && self_.changedetection(component);
        }
        // Method to add column
       this.addcolumn = function(component,flag,undoflag){
           var columnadd = component.find('.zctableaddrow'); // NO I18N
           var availablecolumn = parseInt( columnadd.attr('data-tablecolumn') ); // NO I18N
           availablecolumn++; // Add one column
           // Add Style to component
           var percent = 100 / availablecolumn + '%';
           var compstyle = component.data('layoutstyle') || {};  // NO I18N
           compstyle.field = compstyle.field || {};
           compstyle.field.width = percent;
           self_.compilestyle(component);
            // Add another table resizer
            var $addtemp = $('<div class="zc-table-cell"><div class="zcanvas-field zc-no-contextmenu"><div class="zcanvas-data-node"><div style="position:relative" class="zcanvas-inner-component zcanvas-non-selectable" data-selection="label" data-child=" ' + availablecolumn + '"><span lt-prop-title=' + encodeURIComponent(I18n.getMsg('crm.social.delete.column')) + ' class="zc_delete_column"></span></div><div class="zcanvas-inner-component zcanvas-non-selectable" data-selection="value" data-child=" ' + availablecolumn + '"></div></div></div></div>');
            component.find('.zc-table-resizetable').append($addtemp);
            compstyle.inner = compstyle.inner || [];
            compstyle.inner.push({}); // Empty object for maintain the inner component height
            columnadd.attr('data-tablecolumn', availablecolumn);  // NO I18N
            var $topcells =  $addtemp.find('.zcanvas-inner-component');
            $topcells.click(self_.selectcells.bind(component));
            self_.configcellresize($topcells.first(),component);
            var del_el = $addtemp.find('.zc_delete_column'); // NO I18N
            // FIXME: i18n
            del_el.attr('lt-prop-title' , I18n.getMsg('crm.social.delete.column')); //NO I18N
            del_el.click(self_.deletecolumn);
            flag && self_.createdrops(component, availablecolumn);
            // TODO: change once undo redo implemented
           // !flag && self_.changedetection(component);
           undoflag && self_.newcolumn(component);
       }
       this.deletecolumn = function(e){
       
        var $target = $(e.target);
        var index = parseInt($target.closest('.zcanvas-inner-component').attr('data-child')); // NO I18N
        var component = $target.closest('.zclayout-table'); // NO I18N
        var prev = canvasOutput.createJson(component);
        var rows = component.find('.zcanvas-row'); // NO I18N
        var rowln = rows.length;
        var $rtable = component.find('.zc-table-resizetable .zc-table-cell');
        var columnadd = component.find('.zctableaddrow'); // NO I18N
        var availablecolumn = parseInt( columnadd.attr('data-tablecolumn') );  // NO I18N
        availablecolumn--;
        if($rtable.length > 1){
            for(var i = 0 ; i  < rowln ; i ++){
                var cell = rows.eq(i).find('.zc-table-cell').eq(index - 1);
                var fieldcell = cell.find('.zcanvas-field');
                fieldcell.length && zutils.deletefield(fieldcell , true);
                cell.remove();
            }
            //  $rtable.eq(index - 1).remove();
            $($rtable.splice( index - 1 , 1)).remove();
            var rln = $rtable.length;
            for(var i = 0 ; i < rln ; i ++){
                var field = $rtable.eq(i).find('.zcanvas-inner-component');
                field.attr('data-child',  i + 1  ); // NO I18N
            }
            columnadd.attr('data-tablecolumn',availablecolumn); // NO I18N
            var percent = 100 / availablecolumn + '%';
            var compstyle = component.data('layoutstyle') || {};  // NO I18N
            compstyle.field = compstyle.field || {};
            compstyle.field.width = percent;
            self_.compilestyle(component);
            var current = canvasOutput.createJson(component);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + component.attr('id'), // NO I18N
                parent: '#' + component.parent().attr('id'),
                previous: prev,
                current: current,
                callback: function(data , method ){
                    var component = $(data.node);
                    zutils.deleteElement(component, true);
                    var parentinst = zutils.getdatabyelement($(data.parent));
                    if(method === 'undo'){
                        parentinst.addElement([data.previous]);
                    }else{
                        parentinst.addElement([data.current]);
                    }
                }
                
            }
            self_.savecanvasaction(component , undoredoobj);
        }else{
            zutils.deleteElement(component);
        }
       
        
       }

       // Method to select cells
       this.selectcells = function(e , flag){
            var $target = $(e.target);
            var childl = $target.attr('data-child'); // NO I18N
            if(!childl){
            	e.stopPropagation();
            	return;
            }
            var column = parseInt( childl ); // NO I18N
            var type = $target.attr('data-selection'); // NO I18N
            var hasnochange = this.hasClass('zcnochange'); // NO I18N
            var selector;
            if(!hasnochange){
                selector = '.zc-table-cell:nth-of-type(' + column + ') .zcanvas-field'; // NO I18N
            }else{
                 selector = '.zc-table-cell .zcanvas-field'; // NO I18N
            }
            var selector_type = type === 'label' ? ' .zcanvas-label' : ' .zcanvas-value-container'; // NO I18N
            selector += selector_type; // NO I18N
            var selectedfields = this.find('.zcanvas-row ' + selector);
            if(hasnochange){
                selectedfields = selectedfields.add( this.find('.zc-hidden-table-field' + selector_type) ); // NO I18N
            }
            var data =  $('.zcanvas-editor-outer').data('zcanvas');
            if(flag){
                return selectedfields;
            }else{
                data && data.config && data.config.toolsRef && data.config.toolsRef.selectfield(selectedfields);
            }
            e.stopPropagation();
       }
       this.getcellsbyevent = function(e){
            var $target = $(e.target);
            var childl = $target.attr('data-child'); // NO I18N
            if(!childl){
                e.stopPropagation();
                return;
            }
            var column = parseInt( childl ); // NO I18N
            var selector = '.zc-table-cell:nth-of-type(' + column + ')'; // NO I18N
            var selectedfields = this.find('.zcanvas-row ' + selector);
            return selectedfields;
        }
       // Method to config resizer
       this.configcellresize = function(el,component){
            el.resizable({
                containment: 'parent', // NO I18N
                handles: 'e', //NO I18N
                zhandlevisible: true,
                classes: {'ui-resizable-se':'zcanvas-resizable-se'}, // NO I18N
                start: function(e){
                    var outheight = component.outerHeight();

                    $(e.target).find('.ui-resizable-e').addClass('zc-column-resizing').height(outheight); // NO I18N
                },
                resize: function(event, ui){
                    
                    var $el = ui.element;
                     self_.columnresize($el, component);
                    // TODO: change once the undo redo implemented
                   // self_.changedetection(component);
                },
                stop: function(e, ui){
                    $(e.target).find('.ui-resizable-e').removeClass('zc-column-resizing').css('height',''); // NO I18N
                    var undoredoobj = {
                        node: '#' + component.attr('id'), // NO I18N
                        action: 'callback', // NO I18N
                        previous: ui.originalSize.width,
                        current: ui.size.width,
                        index:  ui.element.attr('data-child'),//NO I18N
                        callback: function(data , method , node){
                            var $tableresize = node.find('.zc-table-resizetable'); // NO I18N
                            var resizenode = $tableresize.find('.zc-table-cell:eq(' + (data.index - 1) + ') .ui-resizable'); // NO I18N
                            if(method === 'undo'){
                                resizenode.width(data.previous);
                            }else{
                                resizenode.width(data.current);
                            }
                            self_.columnresize(resizenode , node);
                        }
                    }
                    self_.savecanvasaction(component , undoredoobj);
                }
            });
       }
       this.columnresize = function($el , component){
            var child = $el.attr('data-child'); //NO I18N
            var lpercent = $el.width() / $el.parent().width() * 100;
            var style = component.data('layoutstyle') || {};  // NO I18N
            style.inner = style.inner || [];
            style.inner[child - 1] = { percent: lpercent};
            self_.compilestyle(component);
       }
       this.createdrops = function(component , number){
            var $rows = component.find('.zcanvas-row');
            $rows.each(function(){
                var sorttemplate = $('<div class="zc-table-cell"></div>');
                var $row = $(this);
                var dropslen = $row.find('.zc-table-cell').length;
                var diffdrops = number - dropslen;
                while(diffdrops > 0){
                    $row.append(sorttemplate);
                    diffdrops--;
                }
                self_.configdroppable($row);
            })
       }
        // Make other droppabled disable
        this.toggleothereditors = function(ui,flag){
            var $item = ui.item || ui.helper;
            var _outeditor = $('.zcanvas-editor-outer'); // NO I18N
            _outeditor.droppable('option','disabled',flag); // NO I18N
            var parenteditor = _outeditor.find('.zcanvas-editor.ui-droppable'); // NO I18N
            if(flag){
                parenteditor.addClass('zc-table-disableddrop').removeClass('ui-droppable-active ui-droppable-hover zcanvas-overeditor'); // NO I18N
                _outeditor.removeClass('ui-droppable-active ui-droppable-hover zcanvas-overeditor'); // NO I18N
                $item.removeClass("zcOvertable");//NO I18N
            }else{
                parenteditor.removeClass('zc-table-disableddrop'); // NO I18N
                $item.addClass("zcOvertable");//NO I18N
            }
            
            parenteditor.droppable('option','disabled',flag); // NO I18N
        }
        // Method to draggable while sortable started to move
        this.preparedroppable = function(item, component, flag){
            if(flag){
                item.on('mousedown.ztablelayout',function(){
                    component.draggable('option','disabled',true); // NO I18N
                    $(window).on('mouseup.ztablelayout',function(){
                            component.draggable('option','disabled',false);  // NO I18N
                            setTimeout(function(){
                                $(window).off('mouseup.ztablelayout');
                            },100);
                    })
                })
            }else{
                item.off('mousedown.ztablelayout'); // NO I18N
            }
        }

        this.compilestyle = function(component){
            var id = component.attr('id'); // NO I18N
            var styletag = $('<style/>');
            var styleobj = component.data('layoutstyle') || {}; // NO I18N
            var stylestr = '';
            var field = styleobj.field;

            var pretag = '#' + id + ' .zc-table-cell' + ',#' + id + ' .zctable-sortable > .zcanvas-field {';

            for(var key in field) {
                pretag += key + ':' + field[key] + ' !important;';
            }

            pretag += ' }';

            stylestr += pretag;

            var row = styleobj.row;

            var rowtag = '#' + id + ' .zcanvas-row:not(.ui-resizable-resizing) {';

            for(var key in row) {
                rowtag += key + ':' + row[key] + ' !important;';
            }

            rowtag += ' }';

            stylestr += rowtag;

            var inner = styleobj.inner || [];
            var innerlen = inner.length;
            var innertag = '';
            for(var i = 0 ; i < innerlen ; i++){
                var percent = inner[i].percent;
                var lpercent = percent + '%';
                var vpercent = 100 - percent + '%';
                innertag += '#' + id + ' .zcanvas-row .zc-table-cell:nth-of-type(' + ( i + 1) + ') .zcanvas-label { width :' + lpercent + ' } '; //NO I18N
                innertag += '#' + id + ' .zcanvas-row .zc-table-cell:nth-of-type(' + ( i + 1) + ') .zcanvas-value-container { width :' + vpercent + ' } '; //NO I18N
            }
            stylestr += innertag;

            styletag.html(stylestr);
            component.children('style').remove(); // NO i18N
            component.append(styletag);
            // TODO: change once undo redo implemented
           //self_.changedetection(component);
        }
        
        // Method to generate the json from component
        this.toJson = function(node){
            var $node = $(node);
            var $rows = $node.find('.zcanvas-row');
            var json = {
                children: [],
                ui: {
                    value: jsonCreation.getValue($node)
                },
                zcanvasId: $node.attr('id'), // NO i18N
                _type: "component", //NO I18N
                theme: "Table Layout" //NO I18N
            }
            json.ui.value.layoutstyle = $node.data('layoutstyle') // NO I18N
            var tnode = $node.data('zcanvasdata'); // NO I18N
            if(tnode && tnode.systemid){
                json.ui.value.system_id = tnode.systemid;
            }
            $rows.each(function(){
                var $el = $(this);
                var $cells = $el.find('.zc-table-cell');
                var rowjson = {
                    children: [], 
                    zcanvasId: $el.attr('id'), // NO I18N
                    ui: {
                        value: {
                            position: jsonCreation.getposition($el),
                            style: jsonCreation.getstyles($el),
                            class: $el.data('zcanvasclass') // NO I18N
                        }
                    },
                    _type: "row" //NO I18N
                }
                var ndata = $el.data('zcanvasdata'); // NO I18N
                if(ndata && ndata.systemid){
                    rowjson.ui.value.system_id = ndata.systemid;
                }
                $cells.each(function(){
                    var $tcell = $(this);
                    var field = $tcell.find(".zcanvas-field");//NO I18N
                    if(field.length > 0){
                        var fieldjson = canvasOutput.createJson(field);
                    } else {
                        var fieldjson = {
                                ui: {},
                                children: [],
                                _type: "empty-field"//NO I18N
                        };
                        fieldjson.ui.value = {};
                        fieldjson.ui.value.class = 'zc-table-cell';// NO I18N
                    }
                    rowjson.children.push(fieldjson);
                });

            // eslint-disable-next-line webperf/no-multipleDOMLookup
            json.children.push(rowjson);
            })
            return json;
        }

        // Method to generate the view from json
        this.toView = function(json,currentnode){
            var jsonHeight = json.ui.value.position.height;
            var $node = $(currentnode).css('width','100%');
            var zid = zutils.getRandomId();
            $node.attr('id',zid); // NO I18N
            // var html = canvasOutput.html(null, json);
            // FIXME: Quick fix
            json.theme = 'Custom Layout'; // NO I18N
            var html = createStruture.layoutHtml(null, json);
            $(html).find(".zcanvas-row > .zcanvas-field").each(function(){
                var el = $(this);
                el.addClass('zc-no-theme'); // NO I18N
                el.wrapAll( "<div class='zc-table-cell'></div>" );//NO I18N
            }); 
            
                    
            if(json.ui.value.layoutstyle && json.ui.value.layoutstyle.row &&  json.ui.value.layoutstyle.row){
                json.ui.value.layoutstyle.row['min-height'] = json.ui.value.layoutstyle.row.height; // NO i18N
                delete json.ui.value.layoutstyle.row.height;
            }
            $node.data('layoutstyle',json.ui.value.layoutstyle); // NO I18N
            self_.compilestyle($node);
            createStruture.applystyle($(html) , json.ui.value.style || {});
            $(html).css('min-height' , jsonHeight);//NO I18N
            if(json.ui.value.fixedHeight || json.ui.value.fixed){
                html.css({'overflow-y':'auto' , 'height' : jsonHeight}); // NO I18N
            }
            return html;
        }

        this.toDom = function(json,container,padingLeft,padingTop){
            var $template = $(template);
            var childlen = json.children.length;
            json.zcanvasId = json.zcanvasId || zutils.getRandomId()
            $template.css({
                left: json.ui.value.position.startX + (padingLeft || 0),
                top: json.ui.value.position.startY + (padingTop || 0),
                width: json.ui.value.position.width,
                height: json.ui.value.position.height,
                zIndex: json.ui.value.position.depth
            }).attr('id',json.zcanvasId); // NO I18N
            $template.addClass(json.ui.value.class).zaddClass(json.ui.value.class);
            container.append($template);
            var $sortable = $template.find('.zctable-sortable'); // NO I18N
            var assigndata = function(index , element){
                var $field = $(element);
                var zdata = $field.zdata()[0];
                $field.data('zcanvas',zdata); // NO I18N
                if(!$template.zhasClass('zcrestricttable') && zdata){
                	var menuinst = $(zdata.fieldContainer).data('zcanvasMenu');
                	menuinst && 
                    menuinst.reduceScope(zdata);
                }
                var childrens = this.json && this.json.children[index];
                if(this.inst && childrens){
                    this.inst.config && this.inst.config.onaddelement && this.inst.config.onaddelement($field , childrens);
                }
            };
            var parentinst = zutils.getParentData($template);
            var zcouterEditor = $('#zcanvas-editor-outer');
            if(!parentinst){
            	parentinst = zcouterEditor.data('zcanvas'); // NO I18N
            }
            for(var i = 0 ; i < childlen ; i++){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var fieldst = canvasOutput.innerNode(json.children[i], true);
                var field = $(fieldst);
                  // eslint-disable-next-line webperf/no-multipleDOMLookup
                if(json.children[i].zcanvasId){
                    // eslint-disable-next-line webperf/no-multipleDOMLookup
                    field.attr('id', json.children[i].zcanvasId);
                }else{
                	 // eslint-disable-next-line webperf/no-multipleDOMLookup
                    field.attr('id', zutils.getRandomId()); // NO I18N
                }
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var childnodes = json.children[i];
                parentinst && parentinst.config && parentinst.config.onaddelement && parentinst.config.onaddelement(field , childnodes); 
                field.find('.zcanvas-field').each(assigndata.bind({json: childnodes , inst: parentinst}));
             // eslint-disable-next-line webperf/no-multipleDOMLookup
                if(json.children[i].ui && json.children[i].ui.value && json.children[i].ui.value.style){
                	// eslint-disable-next-line webperf/no-multipleDOMLookup
                	field.zccss(json.children[i].ui.value.style)
                }
                $sortable.append(field);
            }
            
            var $rows = $sortable.find('.zcanvas-row'); // NO i18N
            $rows.each(function(){
                var cell = $(this);
                var zid = cell.attr('id') || zutils.getRandomId(); // NO I18N

                cell.find('.zcanvas-field').each(function(){
                    $(this).wrapAll('<div class="zc-table-cell"></div>');
                })
                cell.addClass('zcanvas-selectable zclayoutdeletable').attr('data-layoutname','Table Layout').attr('data-zcanvastooltype','row'); // NO I18N
                cell.attr('id',zid); // NO I18N
                self_.configdroppable(cell, $template);
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var draggable = cell.find('.zcanvas-field');
                draggable.each(function(){
                    var dragdata = $(this).data('zcanvas');
                    self_.preaparedrag($(this),$template,false,zutils.zcopyobj(dragdata));
                })
                cell.prepend('<span class="ui-resizable-s ui-resizable-handle zctable-row-resize"></span><span class="zc-table-sort"></span><span class="zc-insert-trow"></span>');
                if($template.hasClass('zc-no-theme')){
                    cell.find('.zc-table-sort').css('position','absolute'); // NO I18N
                }
                self_.configrowresize(cell,$template,zid);
                cell.find('.zc-insert-trow').attr('lt-prop-title' , I18n.getMsg('crm.canvas.builder.addrow')).click(self_.addbottomrow.bind($template)); // NO I18N
            });
            var $addtemps = $( $rows.eq(0) ).find('.zc-table-cell'); // NO I18N
            var tempslen = $addtemps.length;
            while(tempslen > 1){
                self_.addcolumn($template);
                tempslen--;
            }
            $template.data('layoutstyle', json.ui.value.layoutstyle); // NO I18N
            self_.init($template,null,null,null,json.zcanvasId);
            self_.compilestyle($template); 
            $template.zccss(json.ui.value.style);
            self_.applytopresize($template , json.ui.value.layoutstyle);
            var parentinst = zutils.getParentData($template);
            if(json.ui.tablestyles && json.ui.tablestyles.commonfield && $template.hasClass('zcnochange')){ // NO I18N
                var hidefield = $template.find('.zc-hidden-table-field'); // NO I18N
                var outinst = zcouterEditor.data('zcanvas'); // NO I18N
                outinst && outinst.fieldstyling(hidefield , json.ui.tablestyles.commonfield  , true) ;
            }
            parentinst && zutils.changelayoutscope(parentinst , 'Table Layout' , true); // NO I18N
            return $template;
        }

        this.applytopresize = function(component , style){
            if(!style) { return; }
            var innerstyle = style.inner || [];
            var instlen = innerstyle.length;
            var tabletop = component.find('.zc-table-resizetable .zc-table-cell'); // NO I18N
            for(var i = 0 ; i < instlen ; i ++){
                tabletop.eq(i).find('.ui-resizable').css('width',(innerstyle[i].percent || 50) + '%'); // NO I18N
            }
        }

        this.blinkelement = function(el){
            $('.zc-blink-bg').removeClass('zc-blink-bg'); // NO I18N
            el.addClass('zc-blink-bg');
            setTimeout(function(){
                el.removeClass('zc-blink-bg');
            }, 1500);
        }

        this.deletelayout = function(element){
            var component = element.closest('.zclayout-table'); // NO I18N
            if(element.is('.zcanvas-row')){
               self_.deleteRow(component , element);
            }
            var $field = element.closest('.zcanvas-field'); // NO I18N
            if($field.length){
                self_.deleteField(component , element);
            }
        }

        this.changedetection = function(element){
            var config;
            if(element){
                config = element.data('zclayoutconfig'); // NO I18N
                config && config.onChange && config.onChange();
            }
        }

        this.savecanvasaction = function(element , object){
            var inst = zutils.getParentData(element);
            inst && inst.config.undoredomanager.push(object);
            self_.changedetection(element);
            return object;
        }

        this.converttotable = function(element , container){
            var cprops = container.position();
            cprops.width = container.width();
            cprops.height = container.height();
            cprops.position = 'absolute'; // NO I18N
            var $template = $(template);
            var $sortable = $template.find('.zctable-sortable'); // NO I18N
            element = $( canvasObjUtils._.sortBy( element , function(_el) {  return _el.offsetTop; } ) );
            var ellen = element.length;
            container.replaceWith($template);
            $template.css(cprops).addClass('zc-no-theme').zaddClass('zc-no-theme'); // NO I18N
            var tzid = zutils.getRandomId();
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + tzid,
                parent: '#' + $template.parent().attr('id'),
                basenodes: []
            }
            for(var i = 0 ; i < ellen ; i++){
                var zid = zutils.getRandomId();
                undoredoobj.basenodes.push(canvasOutput.createJson(element.eq(i)));
                var dragdata = element.eq(i).data('zcanvas'); // NO I18N
                var field = element.eq(i).clone();
                field.css({'top' : 'initial' , 'left':'initial' , 'position':'initial'}); // NO I18N
                var $holder = field.find('.zcanvas-data-node');
                var classes = $holder.attr('data-zcanvasclass'); // NO I18N
                $holder.removeClass(classes).zremoveClass(classes);
                var wraptemplate = '<div id = "' + zid + '" class="zcanvas-row zcanvas zcanvas-selectable zclayoutdeletable" data-layoutname="Table Layout" data-zcanvastooltype="row" data-zcanvasclass="zcanvas-row"><div class="zc-table-cell"></div></div>';
                var $row = $(wraptemplate);
                $row.prepend('<span class="ui-resizable-s ui-resizable-handle zctable-row-resize"></span><span class="zc-table-sort"></span>');
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                $row.find('.zc-table-cell').append(field);
                $sortable.append($row);
                self_.preaparedrag(field,$template,false,zutils.zcopyobj(dragdata));
                self_.configrowresize($row,$template,zid);
               
            }
            element.remove();
            self_.init($template , null , null , null, tzid);
            var layoutstyle = $template.data('layoutstyle'); // NO I18N
            layoutstyle.row.height = '21px';
            self_.compilestyle($template);
            var pdata = zutils.getParentData($template);
            var toolref = pdata.config.toolsRef;
            toolref.applyjsontostyle($template, {default: {'background-color': 'rgba(0,0,0,0)'}}); // NO I18N
            undoredoobj.basetable = self_.newtable($template , true);
            undoredoobj.callback = function(data , method ){
                if(method === 'undo'){
                    // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                    data.basetable.callback(data.basetable , method , $(data.node));
                    var $parent = $(data.parent).data('zcanvas'); // NO I18N
                    var fieldslen = data.basenodes.length;
                    $parent.addElement(data.basenodes);
                }else{
                    var fieldslen = data.basenodes.length;
                    for(var i = 0 ; i < fieldslen ; i++){
                        $('.' + data.basenodes[i].zcanvasId).remove();
                    }
                     // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                    data.basetable.callback(data.basetable , method , $(data.node));
                }
            }
            var parentinst = zutils.getParentData($template);
            parentinst && zutils.changelayoutscope(parentinst , 'Table Layout' , true); // NO I18N
            self_.savecanvasaction($template , undoredoobj);
            return $template;
        }

        this.newtable = function(component, flag){
            var $parent = component.parent();
            var parentid = $parent.attr('id'); // NO I18N
            var parentstyle = jsonCreation.getstyles($parent);
            var json = canvasOutput.createJson(component);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + component.attr('id'), // NO I18N
                parent: '#' + parentid,
                parentstyle: parentstyle,
                json: json,
                callback: function(data , method , node){
                    if(method === 'undo'){
                        var parentinst = zutils.getParentData(node);
                        parentinst && zutils.changelayoutscope(parentinst , 'Table Layout'); // NO I18N
                        node.remove(); 
                    }else{
                        var pdata = zutils.getdatabyelement($(data.parent));
                        pdata.addElement([data.json], { ui: { value: { style:parentstyle  } } } );
                    }
                }
            }
            if(flag){
                return undoredoobj;
            }

            var undoref = self_.savecanvasaction(component , undoredoobj);
            zutils.overlapHandling(component , undoref);
        }


        this.newrow = function(component , row , ui , fieldparent , zcmetdata){
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + row.attr('id'),
                parent: '#' + component.attr('id'),
                index: row.index(),
                fieldjson: canvasOutput.createJson(row.find('.zcanvas-field')),
                zcmetdata: zcmetdata || {}
            }
            if(fieldparent){
                undoredoobj.previous = fieldparent.originalPosition;
                undoredoobj.width = fieldparent.helperProportions.width;
                undoredoobj.previous.container = '#' + fieldparent._parent.attr('id');
            }
            undoredoobj.callback = function(data , method , node){
                if(method === 'undo'){
                    node.remove();
                    if(data.previous){
                        var fieldjson = JSON.parse(JSON.stringify(data.fieldjson));
                        // eslint-disable-next-line webperf/layout-thrashing
                        fieldjson.ui.value.position.startX = data.previous.left;
                        // eslint-disable-next-line webperf/layout-thrashing
                        fieldjson.ui.value.position.width = data.previous.width;
                        // eslint-disable-next-line webperf/layout-thrashing
                        fieldjson.ui.value.position.startY = data.previous.top;
                        var zcont = $(data.previous.container).data('zcanvas'); // NO I18N
                        zcont.addElement([fieldjson]);
                    }
                }else{
                 //   $('[data-zcanvasId="'+data.fieldjson.zcanvasId+'"').parent().remove();
                	$('.'+data.fieldjson.zcanvasId).remove();
                    var $node = $(canvasOutput.innerNode(data.fieldjson, true));
                    $node.data('zcanvas',$node.zdata()[0]);
                 // eslint-disable-next-line zstandard/combine-properties
                    $node.data('zcanvasdata' , data.zcmetdata.field); // NO I18N
                    $node.find('.zcanvas-label').data('zcanvasdata' , data.zcmetdata.label); // NO I18N
                    $node.find('.zcanvas-value-container').data('zcanvasdata' , data.zcmetdata.value); // NO I18N
                    var $parent = $(data.parent);
                    var $sortable = $parent.find('.zctable-sortable');
                    if(data.index){
                        $node.insertAfter($sortable.find('.zcanvas-row:eq(' + (data.index - 1) + ')'));
                    }else{
                        $sortable.prepend($node);
                    }
                    self_.handledrop.bind($parent)(null , {item : $node} , data.node.replace('#',''));
                }
            }
            self_.savecanvasaction(component , undoredoobj);
        }

        this.addbottomrow = function(e){
            var $row = $(e.target).closest('.zcanvas-row');
            self_.insertRow($row.closest('.zclayout-table') , $row); // NO I18N
        }
        this.insertRow = function(component, row, flag){
            var sortable = component.find('.zctable-sortable'); // NO I18N
            if(sortable.find('.zcanvas-row').length >= 1000){
            	var parentinst = zutils.getParentData(component);
            	parentinst && parentinst.config && parentinst.config.toolsRef && parentinst.config.toolsRef.config && parentinst.config.toolsRef.config.validationerror('maxerror',1000,'_row_'); // NO I18N
            	return;
            }
            var zid = flag || zutils.getRandomId(); 
            var columnadd = component.find('.zctableaddrow');
            var availablecolumn = parseInt(columnadd.attr('data-tablecolumn')); // NO I18N
            var wraptemplate = '<div id = "' + zid + '" class="zcanvas-row zcanvas zcanvas-selectable zclayoutdeletable" data-layoutname="Table Layout" data-zcanvastooltype="row" data-zcanvasclass="zcanvas-row"><div class="zc-table-cell"></div><span class="zc-insert-trow"></span></div>';
            var sorttemplate = '<div class="zc-table-cell"></div>';
            var $wrapper = $(wraptemplate)  // NO I18N
            $wrapper.insertAfter(row);
            $wrapper.prepend('<span class="ui-resizable-s ui-resizable-handle zctable-row-resize"></span><span class="zc-table-sort"></span>');
            while(availablecolumn - 1 > 0){
                $wrapper.append(sorttemplate);
                availablecolumn--;
            }
             // FIXME i18N
            $wrapper.find('.zc-insert-trow').attr('lt-prop-title' , I18n.getMsg('crm.canvas.builder.addrow')).click(self_.addbottomrow.bind(component)); // NO I18N
            self_.configdroppable($wrapper, component);
            self_.configrowresize($wrapper,component,zid);
            self_.blinkelement($wrapper);
            if(component.hasClass('zc-no-theme')){ // NO I18N
                $wrapper.find('.zc-table-sort').css('position','absolute'); // NO I18N
            }
            
           flag ||  self_.savecanvasaction(component,{
                action: 'callback', // NO I18N
                node: '#' + component.attr('id'),
                index: $wrapper.index(),
                row: zid,
                callback: function(data , method ){
                    if(method === 'undo'){
                        $('#' + zid).remove();
                    }else{
                        self_.insertRow($(data.node) , $( data.node + ' .zctable-sortable .zcanvas-row:eq(' + (data.index - 1) + ')' ) , data.row);
                    }
                }
            });
            sortable.sortable('refresh');  // NO I18N
        }

        this.newcolumn = function(component){
            var columnadd = component.find('.zctableaddrow');
            var availablecolumn = parseInt( columnadd.attr('data-tablecolumn') ); // NO I18N
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + component.attr('id'),
                index: availablecolumn,
                callback: function(data , method , node){
                    if(method === 'undo'){
                        var availablecolumn = data.index;
                        var resizable = node.find('.zc-table-resizetable');
                        resizable.find('.zc-table-cell:nth-child(' + availablecolumn + ')').remove();
                        node.find('.zcanvas-row').each(function(){
                            $(this).find('.zc-table-cell:nth-child(' + availablecolumn + ')').remove();
                        });
                        availablecolumn--;
                        var percent = 100 / availablecolumn + '%';
                        var compstyle = node.data('layoutstyle') || {};  // NO I18N
                        compstyle.field = compstyle.field || {};
                        compstyle.field.width = percent;
                        self_.compilestyle(node);
                        var columnadd = component.find('.zctableaddrow'); // NO I18N
                        columnadd.attr('data-tablecolumn',availablecolumn); // NO I18N
                    }else{
                        self_.addcolumn(node,true,false);
                    }
                }
            }
            self_.savecanvasaction(component,undoredoobj);
        }
        this.rowsort = function(component , row ){
            var undoredoobj = {
                action: 'callback' , // NO I18N
                node: '#' + row.attr('id'), // NO I18N
                previous: parseInt(row.attr('data-previndex')), // NO I18N
                current: row.index(),
                editor: '#' + component.attr('id'), // NO I18N
                callback: function(data , method , node){
                    if(method === 'undo'){
                        if(data.previous){
                            node.insertAfter($(data.editor + ' .zctable-sortable .zcanvas-row:eq(' + data.previous + ')')); // NO I18N 
                        }else{
                            $(data.editor + ' .zctable-sortable').prepend(node);
                        }
                    }else if(method === 'redo'){ // NO I18N 
                        if(data.current){
                            node.insertAfter($(data.editor + ' .zctable-sortable .zcanvas-row:eq(' + data.current + ')')); // NO I18N 
                        }else{
                            $(data.editor + ' .zctable-sortable').prepend(node);
                        }
                    }
                }
            }
            self_.savecanvasaction(component, undoredoobj);
        }
        this.newcell = function(component , row , cell ,drag, flag){
            var cellindex = row.find('.zc-table-cell').index(cell); // NO I18N
            var dragparent = drag.uiDraggable._parent && (drag.uiDraggable._parent.is('.zcanvas-editor') || drag.uiDraggable._parent.is('.zcanvas-editor-outer')) ? '#' + drag.uiDraggable._parent.attr('id') : null; // NO I18N
            var node = drag.uiDraggable.element.is('.zcanvas-on-menu') ? '' : zutils.getSelectorByElement(drag.uiDraggable.element); // NO I18N
            var nodejson = null;
            if(node === ''){
                // nodejson = canvasOutput.createJson(drag.uiDraggable.helper);
                // nodejson._type = 'field'; // NO I18N
                // nodejson.zcanvasId = drag.zcanvas.zcanvasId;
                nodejson = canvasObjUtils._.defaults(drag.zcanvas , canvasOutput.createJson(flag || drag.uiDraggable.helper));
            }
            var undoredoobj = {
                action: 'callback', // NO I18N
                json: nodejson,
                node : node,
                editor: '#' + row.attr('id') + ' .zc-table-cell:eq(' + cellindex + ')', // NO I18N
                table: '#' + component.attr('id'),
                parent: { editor : dragparent , position: drag.uiDraggable.originalPosition , width:  drag.uiDraggable.helperProportions ? drag.uiDraggable.helperProportions.width : ''},
                callback: function(data , method , node){
                    if(method === 'undo'){
                        if(data.parent.editor){
                            var editor = $(data.parent.editor);
                            editor.append(node);
                            // eslint-disable-next-line webperf/layout-thrashing
                            node.css(data.parent.position).width(data.parent.width);
                            var editdata = zutils.getParentData(node);
                            editdata.prepareElement(node , drag.zcanvas);
                        }else{
                            var el = $(data.editor).find('.zcanvas-field');
                            var json = el.data('zcanvas'); // NO I18N
                            var menuinst = $(json.fieldContainer).data('zcanvasMenu'); // NO I18N
                            menuinst && menuinst.addElement(json);
                            el.remove();
                        }
                    }else{
                        if(data.json){
                            node = $(canvasOutput.innerNode(data.json, true));
                            node.data('zcanvas',data.json); // NO I18N
                            node.zdata(data.json);
                            self_.reducescope(node);
                            
                        }
                        $(data.editor).append(node);
                        node.addClass('zcdropped');
                        node.css({top: 0 , left: 0, height: 'auto'});  // NO I18N
                        self_.preaparedrag(node,$(data.table),true,zutils.zcopyobj(node.data('zcanvas'))); // NO I18N

                    }
                }
            }
            self_.savecanvasaction(component,undoredoobj); 
        }
        this.deleteRow = function(component , element){
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + element.attr('id'), // NO I18N
                parent: '#' + component.attr('id'), // NO I18N
                index: element.index(), 
                previous: canvasOutput.createJson(element)
            }
            var fields = element.children('.zc-table-cell'); // NO I18N
            var fieldlen = fields.length;
            for(var i = 0 ; i < fieldlen ; i++){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var field = fields.eq(i).children('.zcanvas-field'); // NO I18N
                if(field.length){
                    // eslint-disable-next-line webperf/no-multipleDOMLookup
                    undoredoobj.previous.children.push(canvasOutput.createJson(field));
                    zutils.deletefield(field, true);
                }else{
                    // eslint-disable-next-line webperf/no-multipleDOMLookup
                    undoredoobj.previous.children.push(null);
                }
                
            }
            element.remove();
            undoredoobj.callback = function(data , method ){
                if(method === 'undo'){
                    var $parent = $(data.parent);
                    var $sortable = $parent.find('.zctable-sortable'); // NO I18N
                    var zid = data.node.replace('#',''); // NO I18N
                    var wraptemplate = '<div id = "' + zid + '" class="zcanvas-row zcanvas zcanvas-selectable zclayoutdeletable" data-layoutname="Table Layout" data-zcanvastooltype="row" data-zcanvasclass="zcanvas-row"><span class="zc-insert-trow"></span></div>';
                    var sorttemplate = '<div class="zc-table-cell"></div>'
                    var $row = $(wraptemplate);
                    if(data.index){
                        $row.insertAfter($sortable.find('.zcanvas-row:eq(' + (data.index - 1) + ')'));
                    }else{
                        $sortable.prepend($row);
                    }
                    var fields = data.previous.children;
                    var fieldlen = fields.length;
                    for(var i = 0 ; i < fieldlen ; i++){
                        var $sorttemp = $(sorttemplate);
                        if(fields[i]){
                            var fieldnode = canvasOutput.innerNode(fields[i], true);
                            $sorttemp.append(fieldnode);
                            self_.preaparedrag($(fieldnode),$parent,true,zutils.zcopyobj(fields[i]));
                            if(fields[i] && fields[i].fieldContainer){
                            	var menuinst = $(fields[i].fieldContainer).data('zcanvasMenu'); // NO I18N
                            	menuinst && menuinst.reduceScope(fields[i]);
                            }
                        }
                        $row.append($sorttemp);
                    }
                    $row.prepend('<span class="ui-resizable-s ui-resizable-handle zctable-row-resize"></span><span class="zc-table-sort"></span>');
                    $row.find('.zc-insert-trow').attr('lt-prop-title' , I18n.getMsg('crm.canvas.builder.addrow')).click(self_.addbottomrow.bind($parent)); // NO I18N
                    self_.configdroppable($row, $parent);
                    $sortable.sortable('refresh');  // NO I18N
                    self_.configrowresize($row,$parent,zid);
                    if($parent.hasClass('zc-no-theme')){ // NO I18N
                        $row.find('.zc-table-sort').css('position','absolute'); // NO I18N
                    }
                }else{
                    var node = $(data.node);
                    var fields = node.find('.zcanvas-field'); // NO I18N
                    var fieldlen = fields.length;
                    for(var i = 0 ; i < fieldlen; i ++){
                        zutils.deletefield(fields.eq(i),true);
                    }
                    node.remove();
                }
            }
            self_.savecanvasaction(component , undoredoobj);
        }

        this.deleteField = function(component, elements){
            var undoredoobj = {
                action: 'link', // NO I18N
                actionarray:[],
                node: '#' + component.attr('id') // NO I18N
            }

            var ellen = elements.length;
            var fieldhandle = function(data , method ){
                if(method === 'undo'){
                    var $parent = $(data.parent + ' ' + data.row + ' ' + '.zc-table-cell'); // NO I18N
                    var fieldnode = canvasOutput.innerNode(data.previous, true);
                    $parent.eq(data.cell).append(fieldnode);
                    self_.preaparedrag($(fieldnode),$(data.parent),true,zutils.zcopyobj(data.previous));
                    if(data.previous && data.previous.fieldContainer){
                    	var menuinst = $(data.previous.fieldContainer).data('zcanvasMenu'); // NO I18N
                    	menuinst && menuinst.reduceScope(data.previous);
                    }
                }else{
                    zutils.deletefield($(data.node) , true);
                }
            }
            for(var i = 0 ; i < ellen ; i ++ ){
                var element = elements.eq(i).closest('.zcanvas-field'); // NO I18N
                var cell = element.parent('.zc-table-cell'); // NO I18N
                var row = cell.parent('.zcanvas-row'); // NO I18N
                var undoredo = {
                    action: 'callback',  // NO I18N
                    node: zutils.getSelectorByElement(element),
                    row: zutils.getSelectorByElement(row),
                    cell: row.children('.zc-table-cell').index(cell), // NO I18N
                    parent: '#' + component.attr('id'), // NO I18N
                    previous: canvasOutput.createJson(element),
                    callback: fieldhandle
                }
                undoredoobj.actionarray.push(undoredo);
                zutils.deletefield(element,true);
            }
            self_.savecanvasaction(component , undoredoobj);
        }
    }();
})(); ;(function(){
    zclayout.prototype.layouts['Static Text'] = new function(){

        var self_ = this;

        var richTextDisable;

        var template;
        
        template = '<div data-zcanvasclass="zctextempty" class="zclayout zc-no-resize zcanvas zcstatictext zcautoupdate zctoolpostprocess" data-layoutname="Static Text">' +
                    '<div class="zctextcontent" spellcheck="false">' + I18n.getMsg('crm.label.text') + '</div>' +
                    '</div>';
        var basetemplate = '<div class="zclayout zcanvas zcstatictext" data-layoutname="Static Text">\
                            </div>';

        this.gethtml = function(){
            //this.getTemplate();
            return template;
    }

        this.getLabelHtml = function(){
          //  return '<div style="background: #404560;padding: 10px;text-align: center;">' + I18n.getMsg('crm.label.text')  + '</div>'
          return '<div class="zclisticon"><div class="zcl_container zctextlayouticon"></div><div class="zcl_title">' + I18n.getMsg('crm.label.text') + '</div></div>'; // NO I18N
        }

        this.setMaxHeight = function(component){
        	var parent_ = zutils.getParentEditor(component);
        	var compouter = component.outerHeight();
        	var compheight = component.height();
        	var comptop = component.offset().top;
        	var parentouter = parent_.outerHeight();
        	var parenttop = parent_.offset().top;
        	var max = parenttop + parentouter - comptop ;
        	component.css('max-height' , max); // NO I18N
        	component.find('.zctextcontent').css('max-height' , max - (compouter - compheight)); // NO I18N
        }

        this.init = function(component, noconfig, undoredo , init , zid , scope , containment){
            
            var $textarea =  component.find('.zctextcontent');
            if(!noconfig){

               var data = $('.zcanvas-editor-outer').data('zcanvas');
               var parenteditor = component.parent();
               var outinstance = parenteditor.data('zcanvas'); // NO I18N
               var mainconfig = zutils.zcopyobj( outinstance ).config;
               richTextDisable = mainconfig.richTextDisable;
               if (richTextDisable) {
                component.find('.zctextcontent').replaceWith('<textarea class="zctextcontent" spellcheck="false" rows="1">' + I18n.getMsg('crm.label.text') + '</textarea>');
                $textarea =  component.find('.zctextcontent');
               }
              // var selector = mainconfig.editorcontainer+" > .zcanvas:not('.ui-draggable-dragging,.zcanvas-multiselect')";//NO I18N
              // var selectorResizing = mainconfig.editorcontainer+" > .zcanvas:not('.ui-resizable-resizing,.zcanvas-multiselect')";//NO I18N

               component.hasClass('zc_disabled') || component.resizable({ // NO I18N
                    containment: 'parent', // NO I18N
                    handles: 'e,w,s', // NO I18N
                    classes: { },
                    zcGuide: true,
                    snapTolerance: 5,
                    zhandlevisible: true,
                    appendGuideTo: mainconfig.editorcontainer,
                    zrestricteditor: true,
                    stop: function(event , ui){
                        var $parent = ui.helper.parent();
                        var parentdata = zutils.getdatabyelement($parent);
                        var stid = '#' + ui.helper.attr('id'); // NO I18N
                        parentdata.savecanvasaction(stid,'resize', null , null , null , null , { node: stid ,  action: 'resize' , previous: canvasObjUtils._.extend(ui.originalSize , ui.originalPosition), current: canvasObjUtils._.extend(ui.size , ui.position)})
                    },
                    start: function(e, ui){
                    	var rinst = component.resizable('instance'); // NO I18N
                    	if(ui && ui.originalSize && component.hasClass('zcautoupdate')){
                    		ui.originalSize.class = 'zcautoupdate'; // NO I18N
                    	}
                    	if(rinst && rinst.axis && rinst.axis.indexOf('s') > -1){ // NO I18N
                    		component.removeClass('zcautoupdate'); // NO I18N
                    	}
                    	
                    }
                });

                component.draggable({
                    containment: containment || '.zcanvas-editor-outer', // NO I18N
                    cancel:'',
                    zcGuide: true,
                    snapTolerance: 5,
                    scroll: false,
                    znoposition: true,
                    appendGuideTo: mainconfig.editorcontainer,
                    start: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    drag: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    stop: function(){
                        component.addClass('zc-text-stopdrag'); // NO I18N
                        self_.setMaxHeight(component);
                    },
                    scope: scope || 'default', // NO I18N
                    disabled: data.config.alwaysdisabled
                });

                
                component.hasClass('zc_disabled') || $textarea.click(function (e) { // NO I18N
                    var $tparent = $(this).parent();
                    var $textarea = component.find('.zctextcontent');
                    if ($tparent.hasClass('zcanvas-selected-element') && !$tparent.hasClass('zc-text-stopdrag') && !$textarea.attr('contenteditable')) {
                        var previous = $textarea.html();
                        if (!richTextDisable) {
                            $textarea.attr('contenteditable', 'true'); // NO I18N
                        }
                        $textarea.focus();
                        component.draggable('option', 'disabled', true);// NO I18N
                        var $parentdrag = component.parents('.ui-draggable'); // NO I18N
                        $parentdrag.draggable('option', 'disabled', true);// NO I18N
                        $('.zcanvas-editor-outer').enableSelection();
                        component.data('zcselection', {}); // NO I18N
                        self_.setMaxHeight(component);
                        if (component.zhasClass('zctextempty')) {
                            $textarea.html('');
                            component.zremoveClass('zctextempty'); // NO I18N
                        }
                        if (!richTextDisable) {
                            $textarea.on('selectstart.zctext', function () {
                                var $textarea = component.find('.zctextcontent');
                                $(window).on('mouseup.zctext', function (e) {
                                    var $textarea = component.find('.zctextcontent');
                                    component.data('zcselection', self_.saveSelection(component));// NO I18N
                                    $(window).off('mouseup.zctext'); // NO I18N
                                    $textarea.off('keyup.zctext'); // NO I18N
                                    var compinst = zutils.getParentData(component);
                                    if (compinst && compinst.config && compinst.config.toolsRef && compinst.config.toolsRef.config) {
                                        compinst.config.toolsRef.config.onBeforeSelection && compinst.config.toolsRef.config.onBeforeSelection.bind(compinst.config.toolsRef)('Text', true); // NO I18N
                                        compinst.config.toolsRef.executetools('Text', true); // NO I18N
                                        self_.prefilltools(compinst.config.toolsRef, component);
                                        compinst.config.toolsRef.stopPropogate = true;
                                        setTimeout(function () {
                                            this.stopPropogate = false;
                                        }.bind(compinst.config.toolsRef), 100);
                                    }
                                    e.preventDefault();
                                })
                                $textarea.on('keyup.zctext', function () {
                                    component.data('zcselection', self_.saveSelection(component));// NO I18N
                                    $(window).off('mouseup.zctext'); // NO I18N
                                })
                            })

                            $textarea.on('blur', function () {// NO I18N
                                var $textarea = component.find('.zctextcontent');
                                component.draggable('option', 'disabled', false);// NO I18N
                                var $parentdrag = component.parents('.ui-draggable'); // NO I18N
                                $parentdrag.draggable('option', 'disabled', false);// NO I18N
                                $textarea.removeAttr('contenteditable');// NO I18N
                                $('.zcanvas-editor-outer').disableSelection();
                                $textarea.off('blur');// NO I18N
                                $textarea.off('selectstart.zctext');// NO I18N
                                $textarea.off('paste.zctext');// NO I18N
                                $textarea.off('keypress.zctextinput');// NO I18N
                                var $thtml = $textarea.html();
                                var $htext = richTextDisable ? $textarea.val() : $textarea.text() || '';
                                if ($htext === '') {
                                    component.zaddClass('zctextempty'); // NO I18N
                                    $thtml = zutils.getExternali18n ? zutils.getExternali18n('Text') : 'Text'; // NO I18N
                                    $textarea.html($thtml); // NO I18N
                                }
                                if (previous !== $thtml) {
                                    self_.newtext(component, previous);
                                }
                            })
                        }    
                            $textarea.on('paste.zctext', self_.pastehandler)
                            $textarea.on('keypress.zctextinput', self_.changecontrol); // NO I18N
                            e.stopPropagation();
                        
                    }
                    $tparent.removeClass('zc-text-stopdrag'); // NO I18N
                })
                

                component.click(function(e){
                    var $textarea = component.find('.zctextcontent');
                    if(!component.hasClass('zcanvas-selected-lement')){
                        !$textarea.attr('contenteditable') && component.data('zcselection',null); // NO I18N
                        !$textarea.attr('contenteditable') && data && data.config && data.config.toolsRef && data.config.toolsRef.selectfield(e); // NO I18N
                    }
                }).mouseover(function(e){
                    var $textarea = component.find('.zctextcontent');
                    !$textarea.attr('contenteditable') && data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e, true); // NO I18N
                }).mouseout(function(e){
                    var $textarea = component.find('.zctextcontent');
                    !$textarea.attr('contenteditable') && data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e); // NO I18N
                });

                component.attr('id', zid || zutils.getRandomId()); // NO I18N
                !init && component.css('width','70px'); // NO I18N
                !init && self_.newtext(component);
            }
            if(!init){
                data && data.config && data.config.toolsRef  && data.config.toolsRef.selectfield(component);
                if (!richTextDisable) {
                    $textarea.select();
                }
            }
        }

        this.prefilltools = function(tools, component){
        	// FIXME: this is static method needs to come from outside
        	
        	var seldata = component.data('zcselection'); // NO I18N
        	if(seldata && seldata.startContainer){
        		var toolist = ['bgcolor' , 'bgcolorinput' , 'fontsize' , 'fontweight' , 'fontcolor','linethrough']; // NO I18N
        		var nearspan = $(seldata.startContainer).parent('span'); // NO I18N
        		if(nearspan.length){
        			var obj = nearspan.css(['color','font-size','font-family','background-color','text-decoration']);// NO I18N
        			var toollen = toolist.length;
        			for(var i = 0 ; i < toollen ; i++){
        				var toolavail = tools.availabletools[toolist[i]];
        				if(tools.tools.populate[toolavail.type]){
        					if(toolavail.toolname === "linethrough"){
        						var flagobj = {flag : false}
        						if(obj['text-decoration'] && obj['text-decoration'].indexOf('line-through') > -1)
        						{
        							flagobj.flag = true;
        						}
        						tools.tools.populate[toolavail.type](toolavail , flagobj);
        					}else if(toolavail.toolname === "fontweight"){ // NO I18N
        						var fweight = obj['font-family']; // NO I18N
        						var fwobj = {'font-family':fweight}; // NO I18N
//        						var len = toolavail.list && toolavail.list.length;
//        						for(var j = 0 ; j < len ; j++){
//        							if(toolavail.list[j].style && toolavail.list[j].style['font-family'] == fweight){
//        								fwobj = toolavail.list[j];
//        							}
//        						}
        						tools.tools.populate[toolavail.type](toolavail , fwobj);
        					}else{
        						tools.tools.populate[toolavail.type](toolavail , obj);
        					}
        					
        				}
        			}
            		
        		}
        	}
        }

        this.toJson = function(component){
            var _textcontent = component.find('.zctextcontent'); // No I18N
            _textcontent.find('style').remove();
            _textcontent.find('script').remove();
            _textcontent.find('link').remove();
            var value = richTextDisable ? _textcontent.val() : _textcontent.html();
            var json = {
                children: [],
                ui: {
                    value: jsonCreation.getValue(component),
                    autoheight: component.hasClass('zcautoupdate') // NO I18N
                },
                _type: 'component', // NO I18N
                theme: 'Static Text', // NO I18N
                zcanvasId: component.attr('id') // NO I18N
            }
            json.ui.value.value = value;
            return json;
        }
        this.toView = function(json){
            var base = $(basetemplate);
            base.addClass(json.ui.value.class);
            createStruture.applystyle(base , json.ui.value.style);
            base.html(json.ui.value.value);
            createStruture.attachinteractions(json.ui.value , base[0]);
            return base;
        }
        this.toDom = function(json, container,paddingLeft,paddingTop){
            var base = $(template);
            base.zremoveClass('zctextempty'); // NO I18N
            base.addClass(json.ui.value.class).zaddClass(json.ui.value.class);
            base.find('.zctextcontent').html(json.ui.value.value);
            base.css({
                left: json.ui.value.position.startX + (paddingLeft || 0),
                top: json.ui.value.position.startY + (paddingTop || 0),
                width: json.ui.value.position.width,
                height: json.ui.value.position.height,
                zIndex: json.ui.value.position.depth,
                position: 'absolute' // NO I18N
            })
            if(!json.ui.autoheight){
            	base.removeClass('zcautoupdate'); // NO I18N
            }
            container.append(base);
            self_.init(base, null , null, true,json.zcanvasId);
            base.zccss(json.ui.value.style);
            self_.managescope(base , true);
            return base;
        }
        this.deletelayout = function(element, flag){
            var $parent = element.parent();
            var parentdata = zutils.getdatabyelement($parent);
            var json = canvasOutput.createJson(element);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + element.attr('id'), // NO I18N
                parent: '#' + $parent.attr('id'), // NO I18N
                previous: json,
                parentstyle: {ui: {value : { style : jsonCreation.getstyles($parent) }}},
                callback: function(data, method , node){
                    if(method === 'undo'){
                        var parentinst = zutils.getdatabyelement($(data.parent));
                        parentinst.addElement([data.previous], data.parentstyle);
                    }else{
                        self_.managescope(node);
                        node.zremove();
                    }
                }
            }
            self_.managescope(element);
            element.zremove();
            if(!flag){
                parentdata.savecanvasaction(element , null, null, null, null, null, undoredoobj);
            }else{
                return undoredoobj;
            }
        }
        this.clone = function(element){
            var $layout = element.closest('.zclayout'); // NO I18N
            var $parent = $layout.parent();
            var pos = $layout.css(['left','top']); // NO I18N
            var newpos = {left: parseInt(pos.left) + 5 , top: parseInt(pos.top) + 5}; // NO I18N 
            var $clone = $layout.clone();
            $clone.find('.ui-resizable-handle').remove(); // NO I18N
            $parent.append($clone);
            $clone.css(newpos);
            var pdata = zutils.getParentData($layout);
            var tools = pdata.config.toolsRef;
            var style = tools.copystyle($layout);
            self_.init($clone);
            tools.pastestyle(style , $clone);
            self_.managescope($clone,true);
        }
        this.postprocessapply = function(element,config,value){
            var $textarea =  element.find('.zctextcontent')
            var previous = $textarea.html();
            $textarea.attr('contenteditable',true).focus(); // NO I18N
            var data = element.data('zcselection'); // NO I18N
            data && data.startContainer && self_.restoreSelection(data);
            var sel;
            if(data && data.startContainer){
                sel = window.getSelection().getRangeAt(0);
            }
            var flag;
            if(sel && element.has(sel.startContainer).length){
                if(config.actionproperty && !config.availableclass){
                    var prop_ = config.actionproperty;
                    document.execCommand("styleWithCSS", 0, true); // NO I18N

                    switch(prop_){
                        case 'font-size':
                                document.execCommand('fontSize', 0, value.style[prop_]);
                                // eslint-disable-next-line webperf/no-attribute-selectors
                                $textarea.find('[style*="font-size: -webkit-xxx-large"],font[size] , [style*="font-size: xxx-large"]' ).css("font-size", value.style[prop_]);
                            break;
                        case 'font-family':
                                document.execCommand('fontName', 0, value.style[prop_]);
                            break;
                        case 'color':
                                document.execCommand('foreColor', 0, value.style[prop_]);
                            break;
                        case 'background-color':
                                document.execCommand('backColor', 0, value.style[prop_]);
                            break;
                    }
                }else if(value && value.class){
                	 document.execCommand("styleWithCSS", 0, true); // NO I18N
                	 switch(value.class){
	                	 case 'zc-ta-left':
	                		 document.execCommand("justifyLeft", false, ""); // NO I18N
	                		 break;
	                	 case 'zc-ta-center':
	                		 document.execCommand("justifyCenter", false, ""); // NO I18N
	                		 break;
	                	 case 'zc-ta-right':
	                		 document.execCommand("JustifyRight", false, ""); // NO I18N
	                		 break;
                	 }
                }else if(config.toolname === 'linethrough'){ // NO I18N
                	document.execCommand("styleWithCSS", 0, true); // NO I18N
                	document.execCommand("strikeThrough", false, ""); // NO I18N
                	var $data = window.getSelection();
            		var $parent = $($data && $data.focusNode && $data.focusNode.parentNode);
                	if(!value && element.hasClass('zcanvaslinethrough')){
                		var $focusnode = $($data.focusNode)
                		if(!$parent.is('span') && $parent.text() !== $focusnode.text()){ // NO I18N
                			$parent = $focusnode.wrapAll('<span></span>').parent(); // NO I18N
                		}
                		$parent.addClass('zcs-dib'); // NO I18N
                	}else if(value && $parent.is('span')){ // NO I18N
                		$parent.removeClass('zcs-dib'); // NO I18N
                		$parent.find('.zcs-dib').removeClass('zcs-dib');  // NO I18N
                	}
                }
               
                flag = true;
            }
            // eslint-disable-next-line jQuery-chaining
            $textarea.removeAttr('contenteditable'); // NO I18N
            self_.newtext(element , previous);
            sel && element.data('zcselection', self_.saveSelection(element));// NO I18N
            return flag;
        }

        this.saveSelection =  function (){
            if (window.getSelection) {
              var sel = window.getSelection();
              if (sel.getRangeAt && sel.rangeCount) {
                return sel.getRangeAt(0);
              }
            } else if (document.getSelection && document.createRange) {
              return document.createRange();
            }
            return null;
        }

        this.restoreSelection = function(range){
            if (range) {
                if (window.getSelection) {
                    var sel = window.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                    return true;
                } else if (document.getSelection && range.select) {
                    range.select();
                    return true;
                }
            } else {
                return false;
            }
        }

        this.deleteAndGetElement = function(data){
            if (data) {
                var clonedSelection = data.cloneContents();
                var div = document.createElement('div');
                div.appendChild(clonedSelection);
                data.deleteContents();
                return div.innerHTML;
            }
            return ;
        }

        this.changecontrol = function(e , text){
        	var textarea = $(e.currentTarget);
        	var ctext = textarea.text();
        	var currenttextlength = ctext.length;
        
        	var selected = window.getSelection().toString();
        	var toolinst;
        	var pareninst = zutils.getParentData(textarea.closest('.zclayout')); // NO I18N
        	if(pareninst && pareninst.config && pareninst.config.toolsRef && pareninst.config.toolsRef.config){
        		toolinst = pareninst.config.toolsRef.config;
        	}
        	if(selected && !text){
        		return;
        	}else if(!text){
        		if(currenttextlength >= 2000){
        			e.preventDefault();
        			toolinst && toolinst.validationerror('maxerror',2000,'_textlength_'); // NO I18N
        			return;
        		}
        	}else{
        		currenttextlength = currenttextlength - selected.length;
        		if(currenttextlength + text.length >= 2000){
        			text = text.substring(0, 2000 - currenttextlength);
        			toolinst && toolinst.validationerror('maxerror',2000,'_textlength_'); // NO I18N
        		}
        		return text;
        	}
        	
        }

        this.pastehandler = function(e){
            var clipboardData = e.clipboardData || window.clipboardData || e.originalEvent.clipboardData;
            var cliptext = clipboardData.getData('text/plain'); // NO I18N
            cliptext = self_.changecontrol(e , cliptext);
            document.execCommand('insertText', false, cliptext); // NO I18N
            e.preventDefault();
        }

        this.newtext = function(component , update){
            var $parent = component.parent();
            var parentid = $parent.attr('id'); // NO I18N
            var parentdata = zutils.getdatabyelement($parent);
            if(!update){
                var parentstyle = jsonCreation.getstyles($parent);
                var json = canvasOutput.createJson(component);
                var undoredoobj = {
                    action: 'callback', // NO I18N
                    node: '#' + component.attr('id'), // NO I18N
                    parent: '#' + parentid,
                    parentstyle: parentstyle,
                    json: json,
                    callback: function(data , method , node){
                        if(method === 'undo'){
                            node.zremove(); 
                        }else{
                            var pdata = zutils.getdatabyelement($(data.parent));
                            pdata.addElement([data.json], { ui: { value: { style:data.parentstyle  } } } );
                        }
                    }
                }
            }else{
                var undoredoobj = {
                    action: 'callback', // NO I18N
                    node: '#' + component.attr('id'), // NO I18N
                    previous: update,
                    current: component.find('.zctextcontent').html(), // NO I18N
                    callback: function(data, method , node){
                        var spanel =  node.find('.zctextcontent');
                        if(method === 'undo'){
                            spanel.html(data.previous);
                        }else{
                            spanel.html(data.current);
                        }
                    }
                }
            }
            
            var undoref = parentdata.savecanvasaction(component , null, null, null, null, null, undoredoobj);
            zutils.overlapHandling(component , undoref);
        }

        this.managescope = function(element , flag){
            if(element.hasClass('zc_disabled')){
        		return;
        	}
            var parentinst = zutils.getParentData(element);
            parentinst && zutils.changelayoutscope(parentinst , 'Static Text' , flag); // NO I18N
        }
    }();
})();;(function(){
    zclayout.prototype.layouts['Static Icon'] = new function(){

        var self_ = this;

        var template = '<div fixed="true" class="zclayout zc-no-resize zcanvas zcstaticicon zc-ta-center" data-zcanvasclass="zc-ta-center" data-layoutname="Static Icon">\
                        <div class="zciconcontainer zc-no-selection">\
                            <span class="zcstaticempty">+</span>\
                        </div></div>';
        var basetemplate = '<div class="zclayout zcanvas zcstaticicon" data-layoutname="Static Icon">\
                            </div>';
        
        var defaultIconSet = ["icon-Icon_plus","icon-Icon_Back","icon-Icon_Leftarrow1","icon-Icon_dot_three","icon-Icon_Rightarrow1","icon-Icon_Antenna","icon-Icon_Datacard","icon-Icon_Dish","icon-Icon_Fiber","icon-Icon_HDvoice","icon-Icon_Internationalroaming","icon-Icon_Navigation","icon-Icon_QRcode","icon-Icon_Router","icon-Icon_Scan","icon-Icon_Signalstrength","icon-Icon_Simcard","icon-Icon_Status","icon-Icon_Surveillance","icon-Icon_Unlimited","icon-Icon_Barcode","icon-Icon_Bill","icon-Icon_Calculator","icon-Icon_Cards","icon-Icon_Customersupport","icon-Icon_Delivery","icon-Icon_Dress","icon-Icon_Elevator","icon-Icon_Fragile","icon-Icon_Gift","icon-Icon_Money","icon-Icon_Offer","icon-Icon_Piggybank","icon-Icon_Shoppingbag","icon-Icon_Tracking","icon-Icon_Wallet","icon-Icon_Area","icon-Icon_Areaplot","icon-Icon_Bathtub","icon-Icon_Carrom","icon-Icon_Cupboard","icon-Icon_Dinningtable","icon-Icon_Doublebed","icon-Icon_Fan","icon-Icon_Fence","icon-Icon_Fireextinguisher","icon-Icon_Game","icon-Icon_Gym","icon-Icon_Intercom","icon-Icon_Lift","icon-Icon_Modularkitchen","icon-Icon_Park","icon-Icon_Refrigerator","icon-Icon_Singlebed","icon-Icon_Sofa","icon-Icon_Stove","icon-Icon_Swimmingpool","icon-Icon_Television","icon-Icon_Toilet","icon-Icon_Ambulance","icon-Icon_Ayurvedic","icon-Icon_Bandage","icon-Icon_Blood","icon-Icon_Dental","icon-Icon_Eye","icon-Icon_Female","icon-Icon_Lifeline","icon-Icon_Male","icon-Icon_Medical","icon-Icon_Medicalbox","icon-Icon_Medicine","icon-Icon_Ortho","icon-Icon_Patientbed","icon-Icon_Stethoscope","icon-Icon_Syringe","icon-Icon_Wheelchair","icon-Icon_Carparking","icon-Icon_Clean","icon-Icon_Cofeemaker","icon-Icon_Curtains","icon-Icon_Drinks","icon-Icon_Food","icon-Icon_Geyser","icon-Icon_Hairdryer","icon-Icon_Holiday","icon-Icon_Ironbox","icon-Icon_Nosmoking","icon-Icon_Roomservice","icon-Icon_Shower","icon-Icon_Toiletries","icon-Icon_Travelbag","icon-Icon_Washingmachine","icon-Icon_Account","icon-Icon_Attachment","icon-Icon_Bookmark","icon-Icon_Calender","icon-Icon_Camera","icon-Icon_Card","icon-Icon_Cart","icon-Icon_Caution","icon-Icon_Clock","icon-Icon_Coffeecup","icon-Icon_Dollar","icon-Icon_Downarrow","icon-Icon_Euro","icon-Icon_Facebook","icon-Icon_Favourite","icon-Icon_Flag","icon-Icon_Flight","icon-Icon_Folder","icon-Icon_Gallery","icon-Icon_Home","icon-Icon_Info","icon-Icon_Leftarrow","icon-Icon_Linkedin","icon-Icon_Location","icon-Icon_Mail","icon-Icon_Map","icon-Icon_Mention","icon-Icon_Mic","icon-Icon_Mobile","icon-Icon_Notification","icon-Icon_Phone","icon-Icon_Pound","icon-Icon_Printer","icon-Icon_Profile","icon-Icon_Rightarrow","icon-Icon_Search","icon-Icon_Star","icon-Icon_Tag","icon-Icon_Ticket","icon-Icon_Twitter","icon-Icon_Uparrow","icon-Icon_Upload","icon-Icon_Complete","icon-Icon_Agricultureloan","icon-Icon_ATMswipe","icon-Icon_Bank","icon-Icon_Banklocker","icon-Icon_Bond","icon-Icon_Customerprofile","icon-Icon_Fastag","icon-Icon_Goldloan","icon-Icon_Insurance","icon-Icon_Investment","icon-Icon_Loan","icon-Icon_Netbanking","icon-Icon_Premiumservice","icon-Icon_Reward","icon-Icon_Secure"]; // NO I18N

        var geticondropdown = function(userIconSet){
            var dtemplate = $('<div class="zcicondropdpwn"> <ul class="zciconlist"></ul></div>');
            var iconset = userIconSet ? userIconSet: defaultIconSet;
            var listtemp = '';
            for(var i = 0 ; i < iconset.length; i++){
                listtemp += '<li class="' + iconset[i] + '"></li>';
            }
             dtemplate.find('.zciconlist').append(listtemp);

             return dtemplate;
        };

        var bindevents = function(){
            var icondropdown = $('.zcicondropdpwn'); // NO I18N
            icondropdown.find('li').off('mousedown.zcicondrop').on('mousedown.zcicondrop',function(e){ // NO I18N
                var $window = $(window);
                var selectedel = $('.zcanvas-selected-element');
                if(selectedel.is('.zcstaticicon')){
                    var $el = selectedel.find('span');
                    var createflag = false;
                    if($el.hasClass('zcstaticempty')){
                        $el.removeClass('zcstaticempty');
                        $el.html('');
                        createflag = true;
                    }
                    var prevclass = $el.attr('class'); // NO I18N
                    $el.attr('class',e.target.className); // NO I18N
                    icondropdown.hide();
                    adjustsize($el);
                    if(createflag){
                        self_.newicon(selectedel);
                    }else{
                        self_.newicon(selectedel , prevclass);
                    }
                }
                $window.off('mousedown.zciconout');  // NO I18N
                $window.off('keyup.zciconout'); // NO I18N
                e.stopPropagation();
                e.stopImmediatePropagation();
            })
            listenouterclick();
            
        }

        var adjustsize = function(el){
            // var iconsize = el.width();
            // var iconparent = el.parent('.zcstaticicon'); // NO I18N
            // if(iconsize > iconparent.width()){
            //     iconparent.width(iconsize);
            // }
            var iconparent = el.closest('.zcstaticicon'); // NO I18N
            iconparent.css('width',''); // NO I18N
        }

        var listenouterclick = function(){
            var closeicons = function(e, flag){
                var icondropdown = $('.zcicondropdpwn'); // NO I18N
                if(!flag && icondropdown.is(e.target)){
                    return;
                }
                var $window = $(window);
                var selectedel = $('.zcanvas.zcanvas-selected-element'); // NO I18N
                var sedata = $('.zcanvas-editor-outer').data('zcanvas'); // NO I18N
                if(sedata){
                    selectedel = sedata.config.toolsRef.selectedfields;
                }
                if(selectedel.is('.zcstaticicon') && (flag ||  !icondropdown.has(e.target).length) ){
                    var $el = selectedel.find('span')
                    if($el.hasClass('zcstaticempty')){
                        var parentinst = zutils.getParentData(selectedel);
                        parentinst && zutils.changelayoutscope(parentinst , 'Static Icon'); // NO I18N
                        selectedel.zremove();
                    }
                    icondropdown.hide();
                }
                $window.off('mousedown.zciconout'); // NO I18N
                $window.off('keydown.zciconout'); // NO I18N
            }
            var $window = $(window);
            $window.on('mousedown.zciconout' , closeicons);
            $window.on('keydown.zciconout', function(e){ if(e.keyCode === 27) { closeicons(e) } })
        }


        var calculatedropdownposition = function(component){
            var wdimension = {
                width: window.innerWidth,
                height: window.innerHeight
            } 
            var result = {}
            var cdimension = component.offset();
            cdimension.width = component.outerWidth();
            cdimension.height = component.outerHeight();

            if(wdimension.height - cdimension.top > 300){
               result.top =  cdimension.height / 2 + cdimension.top;
            }else{
                result.top = cdimension.top - 300 + cdimension.height / 2;
            }

            if(wdimension.width - cdimension.left > 300){
                result.left = cdimension.width + cdimension.left;
            }else{
                result.left = cdimension.left - 300;
            }
            var icondropdown = $('.zcicondropdpwn'); // NO I18N
            icondropdown.css({
                position: 'fixed', // NO I18N
                top: result.top,
                left: result.left
            }).show();

        }

        this.gethtml = function(){
            return template;
        }

        this.getLabelHtml = function(){
           // return '<div style="background: #404560;padding: 10px;text-align: center;">' + I18n.getMsg('crm.canvas.editor.icon') + '</div>'
           return '<div class="zclisticon"><div class="zcl_container zciconlayouticon"></div><div class="zcl_title">' + I18n.getMsg('crm.canvas.editor.icon') + '</div></div>'; // NO I18N
        }

        this.changeIcon = function(component){
            calculatedropdownposition(component);
            listenouterclick();
        }
        this.resizehandle = function(element){
            var inst = element.data('uiResizable'); // NO I18N
            var elicon = element.children('.zciconcontainer'); // NO I18N
            var padding = elicon.css(['padding-left' , 'padding-right' , 'padding-top' , 'padding-bottom' , 'border-top-width' , 'border-bottom-width' , 'border-left-width' , 'border-right-width'] ); // NO I18N
            var size = inst.size.width;
            var fsize = size - canvasObjUtils._.max([ parseInt(padding['padding-left']) , parseInt(padding['padding-right']) ]) - canvasObjUtils._.max([ parseInt(padding['padding-top']) , parseInt(padding['padding-bottom']) ]) - canvasObjUtils._.max([ parseInt(padding['border-left-width']) , parseInt(padding['border-right-width']) ]) -  canvasObjUtils._.max([ parseInt(padding['border-top-width']) , parseInt(padding['border-bottom-width']) ]); // NO I18N
            elicon[0].style.setProperty('font-size', fsize + 'px', 'important'); // NO I18N
        }
        this.init = function(component, noconfig, undo , init , zid, scope, containment,preventinit){
            if(!noconfig){
                 // Make component resizable
                component.resizable({
                    containment: 'parent', // NO I18N
                    handles: 'se', // NO I18N
                    classes: {'ui-resizable-se':'zcanvas-resizable-se'}, // NO I18N
                    zrestricteditor: true,
                    zhandlevisible: true,
                    aspectRatio: 1,
                    start: function(e, ui){
                        var fsize = ui.helper.children('.zciconcontainer').css('font-size'); // NO I18N
                        var inst = ui.helper.data('uiResizable'); // NO I18N
                        inst.zcmetastyles.fsize = fsize;
                        var merglayout = ui.helper.closest('.zcmergelayout'); // NO I18N
                        if(merglayout.length){
                            var  _containment = merglayout.parent();
                            inst.options.containment = _containment;
                            inst.plugins && inst.plugins.start && inst.plugins.start.filter(function(l){
                                if (l[0] === 'containment'){
                                    l[1].bind(ui.helper)(e,ui);
                                };
                            })
                        }else{
                            inst.options.containment = 'parent'; // NO I18N
                        }
                        
                        
                    },
                    resize: function(event , ui){
                       self_.resizehandle(ui.helper);
                    },
                    stop: function(event , ui){
                        var inst = ui.helper.data('uiResizable'); // NO I18N
                       // var $parent = ui.helper.parent();
                       // var parentdata = zutils.getdatabyelement($parent);
                       var parentdata = zutils.getParentData(ui.helper);
                        var tools = parentdata.config.toolsRef;
                        var stid = '#' + ui.helper.attr('id'); // NO I18N
                        var undoredoobj = {
                            action: 'link', // NO I18N
                            actionarray: [ { node: stid ,  action: 'resize' , previous: canvasObjUtils._.extend(ui.originalSize , ui.originalPosition) , current: canvasObjUtils._.extend(ui.size , ui.position)} ], // NO I18N
                            node: stid
                        }
                        var elicon = ui.helper.children('.zciconcontainer'); // NO I18N
                        var previous = {'font-size':  inst.zcmetastyles.fsize}; // NO I18N
                        var current = {'font-size': elicon.css('font-size')}; // NO I18N
                        var fundo = {
                            action: 'action', // NO I18N
                            node: stid + ' .zciconcontainer', // NO I18N
                            previous: previous,
                            current: current,
                            state: 'default' // NO I18N
                        }
                        undoredoobj.actionarray.push(fundo);

                        var selector = tools.getSelectorByElement(ui.helper, 'default'); // NO I18N
                        var styleselector = tools.getSelectorByElement(ui.helper); // NO I18N
                        var fobj = tools.getstylebyselector(selector, true);
                        if(!fobj.default){
                            fobj.default = {};
                        }
                        fobj.default['font-size'] = current['font-size']; // NO I18N
                        //elicon.css('font-size',''); // NO I18N
                        tools.updatestyle({} , styleselector , fobj.default);
                        parentdata.savecanvasaction(ui.helper,null, null , null , null , null , undoredoobj);
                    }
                });


                var outercontainer = $('.zcanvas-editor-outer');

                var data = outercontainer.data('zcanvas'); // NO I18N

                if(!outercontainer.find('.zcicondropdpwn').length){
                    outercontainer.append(geticondropdown(data.config.customIconSet));
                }
                bindevents();
                if(component.find('.zcstaticempty').length && !preventinit){
                    calculatedropdownposition(component);
                }


                component.draggable({
                    containment: containment || '.zcanvas-editor-outer', // NO I18N
                    cancel:'',
                    scroll: false,
                    znoposition: true,
                    start: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    drag: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    scope: scope || 'default', // NO I18N
                    disabled: data.config.alwaysdisabled
                });

                component.attr('id', zid || zutils.getRandomId()); // NO I18N


                component.click(function(e){
                    if(!component.hasClass('zcanvas-selected-element')){
                        data && data.config && data.config.toolsRef && data.config.toolsRef.selectfield(e);
                    }
                }).mouseover(function(e){
                    data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e, true);
                }).mouseout(function(e){
                    data && data.config && data.config.toolsRef && data.config.toolsRef.hoverfield(e);
                });
            }
            if(!init){
                data && data.config && data.config.toolsRef && data.config.toolsRef.selectfield(component);
            }
        }

        this.toJson = function(component){
            var value = component.find('span').attr('class'); // NO I18N
            var json = {
                children: [],
                ui: {
                    value: jsonCreation.getValue(component)
                },
                _type: 'component', // NO I18N
                theme: 'Static Icon', // NO I18N
                zcanvasId : component.attr('id') // NO I18N
            }
            json.ui.value.icon = value;
            return json;
        }
        this.toView = function(json){
            var base = $(basetemplate);
            base.addClass(json.ui.value.class);
            base.css({
                width: json.ui.value.position.width,
                height: json.ui.value.position.height
            });
            
            base.html('<div class="zciconcontainer"><span class="' + json.ui.value.icon + '"></span></div>');
            createStruture.applystyle(base.children('.zciconcontainer') , json.ui.value.style); // NO I18N
            createStruture.attachinteractions(json.ui.value , base[0]);
            return base;
        }
        this.toDom = function(json, container, pl ,pt){
            var base = $(template);
            base.addClass(json.ui.value.class);
            var iconel = base.find('span');
            iconel.html('').removeClass('zcstaticempty').attr('class',json.ui.value.icon); // NO I18N
            base.css({
                left: json.ui.value.position.startX + (pl || 0),
                top: json.ui.value.position.startY + (pt || 0),
                width: json.ui.value.position.width,
                height: json.ui.value.position.height,
                zIndex: json.ui.value.position.depth,
                position: 'absolute' // NO I18N
            })
            // Prevent if empty added
            if(json.ui.value.icon !== 'zcstaticempty'){
                container.append(base);
            }
            self_.init(base, null , null,true, json.zcanvasId , null ,null , 1);
            base.zccss(json.ui.value.style);
            var parentinst = zutils.getParentData(base);
            parentinst && zutils.changelayoutscope(parentinst , 'Static Icon', true); // NO I18N
            return base;
        }
        this.deletelayout = function(element, flag){
            var $parent = element.parent();
            var parentdata = zutils.getdatabyelement($parent);
            var json = canvasOutput.createJson(element);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + element.attr('id'), // NO I18N
                parent: '#' + $parent.attr('id'), // NO I18N
                previous: json,
                parentstyle: {ui: {value : { style : jsonCreation.getstyles($parent) }}},
                callback: function(data, method , node){
                    if(method === 'undo'){
                        var parentinst = zutils.getdatabyelement($(data.parent));
                        parentinst.addElement([data.previous], data.parentstyle);
                    }else{
                        var parentinst = zutils.getParentData(node);
                        parentinst && zutils.changelayoutscope(parentinst , 'Static Icon'); // NO I18N
                        node.zremove();
                    }
                }
            }
        var parentinst = zutils.getParentData(element);
        parentinst && zutils.changelayoutscope(parentinst , 'Static Icon'); // NO I18N
            element.zremove();
            if(!flag){
                parentdata.savecanvasaction(element , null, null, null, null, null, undoredoobj);
            }else{
                return undoredoobj;
            }
            
        }
        this.clone = function(element){
            var $layout = element.closest('.zclayout'); // NO I18N
            var pos = $layout.css(['left','top']); // NO I18N
            var newpos = {left: parseInt(pos.left) + 5 , top: parseInt(pos.top) + 5}; // NO I18N 
            var $parent = $layout.parent();
            var $clone = $layout.clone();
            $clone.css(newpos);
            $clone.find('.ui-resizable-handle').remove(); // NO I18N
            $parent.append($clone);
            var pdata = zutils.getParentData($layout);
            var tools = pdata.config.toolsRef;
            var style = tools.copystyle($layout);
            self_.init($clone);
            tools.pastestyle(style , $clone);
            var parentinst = zutils.getParentData($clone);
            parentinst && zutils.changelayoutscope(parentinst , 'Static Icon' , true); // NO I18N
            self_.newicon($clone);
        }
        this.newicon = function(component , update){
            var $parent = component.parent();
            var parentid = $parent.attr('id'); // NO I18N
            var parentdata = zutils.getdatabyelement($parent);
            if(!update){
                var parentstyle = jsonCreation.getstyles($parent);
                var json = canvasOutput.createJson(component);
                var undoredoobj = {
                    action: 'callback', // NO I18N
                    node: '#' + component.attr('id'), // NO I18N
                    parent: '#' + parentid,
                    parentstyle: parentstyle,
                    json: json,
                    callback: function(data , method , node){
                        if(method === 'undo'){
                            var parentinst = zutils.getParentData(node);
                             parentinst && zutils.changelayoutscope(parentinst , 'Static Icon'); // NO I18N
                            node.zremove(); 
                        }else{
                            var pdata = zutils.getdatabyelement($(data.parent));
                            pdata.addElement([data.json], { ui: { value: { style:data.parentstyle  } } } );
                        }
                    }
                }
            }else{
                var undoredoobj = {
                    action: 'callback', // NO I18N
                    node: '#' + component.attr('id'), // NO I18N
                    previous: update,
                    current: component.find('span').attr('class'), // NO I18N
                    callback: function(data, method , node){
                        var spanel =  node.find('span').attr('class',''); // NO I18N
                        if(method === 'undo'){
                            spanel.addClass(data.previous);
                        }else{
                            spanel.addClass(data.current);
                        }
                    }
                }
            }
            
            var undoref = parentdata.savecanvasaction(component , null, null, null, null, null, undoredoobj);
            zutils.overlapHandling(component , undoref);
        }
    }();
})();;(function(){
    zclayout.prototype.layouts.Line = new function(){

        var self_ = this;

        var template = '<div style="width:100px" class="zclayout zcanvas zcdivider zc-hr-line" data-layoutname="Line" fixed="true" data-zc-min-width="100" data-zcanvasclass="zc-hr-line">' +
                            '<div class="zc-no-selection zc-divider-line"></div>' +
                        '</div>';
        var basetemplate = '<div class="zclayout zcanvas zcdivider zc-hr-line" data-layoutname="Line">\
                                <div class="zc-divider-line"></div>\
                            </div>';
        
      

        this.gethtml = function(){
            return template;
        }

        this.getLabelHtml = function(){
           // return '<div style="background: #404560;padding: 10px;text-align: center;">' + I18n.getMsg('crm.report.line') + '</div>'
           return '<div class="zclisticon"><div class="zcl_container zclinelayouticon"></div><div class="zcl_title">' + I18n.getMsg('crm.report.line') + '</div></div>'; // NO I18N
        }

        this.init = function(component, noconfig, undo , init, zid){
            if(!noconfig){
                 // Make component resizable
                component.resizable({
                    containment: 'parent', // NO I18N
                    handles: 'n,s,e,w', // NO I18N
                    classes: {},
                    zhandlevisible: true,
                    start: function(event , ui){
                        var inst = ui.helper.data('uiResizable');  // NO I18N
                        inst.previous = canvasOutput.createJson(component);
                    },
                    stop: function(event , ui){
                        var inst = ui.helper.data('uiResizable'); // NO I18N
                        var previous = zutils.zcopyobj( inst.previous );
                        delete inst.previous;
                        self_.rerender(component , previous , canvasOutput.createJson(component));
                    }
                });


                var outercontainer = $('.zcanvas-editor-outer');

                var data = outercontainer.data('zcanvas'); // NO I18N


                component.draggable({
                    containment: '.zcanvas-editor-outer', // NO I18N
                    cancel:'',
                    scroll: false,
                    znoposition: true,
                    start: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    drag: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    disabled: data.config.alwaysdisabled
                });

                component.css('position','absolute'); // NO I18N

                component.attr('id', zid || zutils.getRandomId()); // NO I18N

                component.click(function(e){
                    if(!component.hasClass('zcanvas-selected-element')){
                        data && data.config && data.config.toolsRef  && data.config.toolsRef.selectfield(e);
                       
                    }
                }).mouseover(function(e){
                    data && data.config && data.config.toolsRef  && data.config.toolsRef.hoverfield(e, true);
                }).mouseout(function(e){
                    data && data.config && data.config.toolsRef  && data.config.toolsRef.hoverfield(e);
                });


                !init && self_.newline(component);
            }
            if(!init){
                data && data.config && data.config.toolsRef && data.config.toolsRef.selectfield(component);
            }
        }

        
        this.toJson = function(component){
            var json = {
                children: [],
                ui: {
                    value: jsonCreation.getValue(component)
                },
                _type: 'component', // NO I18N
                theme: 'Divider', // NO I18N
                zcanvasId: component.attr('id') // NO I18N
            }
            json.ui.value.style = jsonCreation.getstyles(component);
            json.ui.value.class = '';
            json.ui.value.vertical = component.hasClass('zc-vr-line') // NO I18N
            return json;
        }
        this.toView = function(json){
            var base = $(basetemplate);
            var line = base.find('.zc-divider-line'); // NO I18N
            base.css({
                width: '100%',
                height: json.ui.value.position.height
            });
            createStruture.applystyle(line , json.ui.value.style);
            if(json.ui.value.vertical){
                base.removeClass('zc-hr-line').addClass('zc-vr-line');
            }
            return base;
        }
        this.toDom = function(json, container, pl ,pt){
            var base = $(template);
            base.addClass(json.ui.value.class);
            base.css({
                left: json.ui.value.position.startX + (pl || 0),
                top: json.ui.value.position.startY + (pt || 0),
                width: json.ui.value.position.width,
                height: json.ui.value.position.height
            })
            container.append(base);
            if(json.ui.value.vertical){
                base.removeClass('zc-hr-line').addClass('zc-vr-line');
            }
            self_.init(base, null , null,  true,json.zcanvasId);
            base.zccss(json.ui.value.style, true);
            self_.managescope(base , true );
           return base;
        }
        this.deletelayout = function(element, flag){
            var $parent = element.parent();
            var parentdata = zutils.getdatabyelement($parent);
            var json = canvasOutput.createJson(element);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + element.attr('id'), // NO I18N
                parent: '#' + $parent.attr('id'), // NO I18N
                previous: json,
                parentstyle: {ui: {value : { style : jsonCreation.getstyles($parent) }}},
                callback: function(data, method , node){
                    if(method === 'undo'){
                        var parentinst = zutils.getdatabyelement($(data.parent));
                        parentinst.addElement([data.previous], data.parentstyle);
                    }else{
                        self_.managescope(node );
                        node.zremove();
                    }
                }
            }
            self_.managescope(element );
            element.zremove();
            if(!flag){
                parentdata.savecanvasaction(element , null, null, null, null, null, undoredoobj);
            }else{
                return undoredoobj;
            }
        }
        this.clone = function(element){
            var $layout = element.closest('.zclayout'); // NO I18N
            var $parent = $layout.parent();
            var pos = $layout.css(['left','top']); // NO I18N
            var newpos = {left: parseInt(pos.left) + 5 , top: parseInt(pos.top) + 5}; // NO I18N 
            var $clone = $layout.clone();
            $clone.find('.ui-resizable-handle').remove(); // NO I18N
            $parent.append($clone);
            $clone.css(newpos);
            var pdata = zutils.getParentData($layout);
            var tools = pdata.config.toolsRef;
            var style = tools.copystyle($layout);
            self_.init($clone,null,null,true);
            tools.pastestyle(style , $clone , true);
            self_.managescope($clone , true);
            zutils.forceselect($clone);
            self_.newline($clone);
        }
        this.newline = function(component){
            var $parent = component.parent();
            var parentid = $parent.attr('id'); // NO I18N
            var parentdata = zutils.getdatabyelement($parent);
            var parentstyle = jsonCreation.getstyles($parent);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + component.attr('id'), // NO I18N
                parent: '#' + parentid, // NO I18N
                json: canvasOutput.createJson(component),
                parentstyle: parentstyle,
                callback: function(data , method , node){
                    if(method === 'undo'){
                        node.zremove();
                    }else{
                        var pdata = zutils.getdatabyelement($(data.parent));
                        pdata.addElement([data.json], { ui: { value: { style:data.parentstyle  } } } );
                    }
                }
            }
            var undoref = parentdata.savecanvasaction(component , null, null, null, null, null, undoredoobj);
            zutils.overlapHandling(component , undoref);
        }
        this.rerender = function(component,previous,current){
            var $parent = component.parent();
            var parentid = $parent.attr('id'); // NO I18N
            var parentdata = zutils.getdatabyelement($parent);
            var parentstyle = jsonCreation.getstyles($parent);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + component.attr('id'), // NO I18N
                parent: '#' + parentid, // NO I18N
                previous: previous,
                current: current,
                parentstyle: parentstyle,
                callback: function(data , method , node){
                    node.zremove();
                    var json;
                    if(method === 'undo'){
                        json = data.previous;
                    }else{
                        json = data.current;
                    }
                    var pdata = zutils.getdatabyelement($(data.parent));
                    pdata.addElement([json], { ui: { value: { style:data.parentstyle  } } } );
                }
            }
            parentdata.savecanvasaction(component , null, null, null, null, null, undoredoobj);
        }
        this.managescope = function(element , flag){
            var parentinst = zutils.getParentData(element);
            parentinst && zutils.changelayoutscope(parentinst , 'Line' , flag); // NO I18N
        }
    }();
})();;(function(){ // eslint-disable-line zstandard/no-global-function-call
    zclayout.prototype.layouts['Canvas Button'] = new function(){

        var template = '<div data-layoutname="Canvas Button" class="zc-no-resize zcanvas-field zclayout zcanvas-no-img-default zc-ta-center zccbutton zcanvas" data-zcanvasclass="zcanvas-field zcanvas-no-img-default zc-ta-center zccbutton" style=""><div class="zcanvas zcanvas-value-container zcanvas-inner-component zcanvas-data-node" data-zcanvasclass="">' + I18n.getMsg('zc.editor.button') + '</div></div>';                   
        
        // TODO: 
        this.hidden = true;

        this.gethtml = function(){
            return template;
        }

        this.getLabelHtml = function(){
           return '<div class="zclisticon"><div class="zcl_container zcbuttonlayouticon"></div><div class="zcl_title">' + I18n.getMsg('zc.editor.button') + '</div></div>'; // NO I18N
        }

        this.init = function(component, noconfig, undo , init , zid){
            var data = zutils.getParentData(component);
            if(!init){
                var zid = zutils.getRandomId();
                component.addClass(zid);
                component.children('.zcanvas-data-node').attr('data-zcanvasid' , zid); // NO I18N
                data && data.prepareElement(component , {zcanvasId: zid , zctype: 'button' , zcvalue: I18n.getMsg('zc.editor.button') , group: 'button'}); // NO I18N
                component.css('width' , 'auto'); // NO I18N
                component.data('zcOldText' , 'button'); // NO I18N
                this.newbutton(component);
                this.managescope(component , 1);
            }
        }

        this.toJson = function(component){
				var json = {
                    ui:{value: jsonCreation.getValue(component)},
                    children: [],
                    _type: 'component', // NO I18N
                    theme: 'Canvas Button', // NO I18N
                    zcanvasId : component.find('.zcanvas-data-node').attr('data-zcanvasid') // NO I18N
                }
				var holder = component.find(".zcanvas-holder");//NO I18N
				var field = component.find(".zcanvas-value-container");//NO I18N
				var label_ = component.find(".zcanvas-label");//NO I18N
				if(holder.length > 0){
					json.ui.holder = jsonCreation.getValue(holder);
				}
				if(field.length > 0){
					json.ui.field = jsonCreation.getValue(field);
				} 
				if(label_.length > 0){
					if(component.hasClass('zccbuttonicon')){
						json.ui.icon = jsonCreation.getValue(label_);
						json.ui.icon.icon = label_.attr('zc-icon'); // NO I18N
					}else{
						json.ui.label = jsonCreation.getValue(label_);
					}
				}
                json.ui.value.name = field.text();
            return json;
        }
        this.toView = function(json){
           var jsonclone = zutils.zcopyobj(json);
            if(!jsonclone.zcanvasId){
                jsonclone.zcanvasId = zutils.getRandomId();
            }
            jsonclone.theme = null;
            jsonclone._type = 'button'; // NO I18N
            jsonclone.zctype = 'button'; // NO I18N
            json.replacenode = true;
         /*   if(jsonclone.ui && jsonclone.ui.value && jsonclone.ui.value.class && jsonclone.ui.value.system_id){
                jsonclone.ui.value.class += ' canvasselectablebutton canvas-button-component'; // NO I18N
                jsonclone.ui.value.attr = {'data-id' : jsonclone.ui.value.system_id}; // NO I18N
            } */
            var base = $(createStruture.innerHtml(jsonclone)).addClass('zclayout');
            base.find('.zcanvas-value-container').text(json.ui.value.name); // NO I18N
            return base;
        }
        this.toDom = function(json, container, pl ,pt){
            var jsonclone = zutils.zcopyobjExternal(json);
            if(!jsonclone.zcanvasId){
                jsonclone.zcanvasId = zutils.getRandomId();
            }
            jsonclone._type = 'button'; // NO I18N
            jsonclone.zctype = 'button'; // NO I18N
            var inst = zutils.getdatabyelement(container);
            var element = inst && inst.addsingleElement(jsonclone , {ui:{value:{style:{default:{'padding-left': pl , 'padding-top': pt}}}}}); // NO I18N
            element.addClass('zclayout'); // NO I18N
            element.attr('data-layoutname',"Canvas Button"); // NO I18N
            element.find('.zcanvas-value-container').text(json.ui.value.name);
            element.data('zcanvas', {zcanvasId: jsonclone.zcanvasId ,  zctype: 'button' , zcvalue: json.ui.value.name , group: 'button'}); // NO I18N
            var parentinst = zutils.getParentData(element);
            parentinst && zutils.changelayoutscope(parentinst , 'Canvas Button' , 1); // NO I18N
            return element;
        }
        this.deletelayout = function(element, flag){
            var $parent = element.parent();
            var parentdata = zutils.getdatabyelement($parent);
            var json = canvasOutput.createJson(element);
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '.' + element.find('.zcanvas-data-node').attr('data-zcanvasid'), // NO I18N
                parent: '#' + $parent.attr('id'), // NO I18N
                previous: json,
                parentstyle: {ui: {value : { style : jsonCreation.getstyles($parent) }}},
                callback: function(data, method , node){
                    if(method === 'undo'){
                        var parentinst = zutils.getdatabyelement($(data.parent));
                        parentinst.addElement([data.previous], data.parentstyle);
                    }else{
                        var parentinst = zutils.getParentData(node);
                        parentinst && zutils.changelayoutscope(parentinst , 'Canvas Button'); // NO I18N
                        node.zremove();
                    }
                }
            }
        var parentinst = zutils.getParentData(element);
        parentinst && zutils.changelayoutscope(parentinst , 'Canvas Button'); // NO I18N
            element.zremove();
            if(!flag){
                parentdata.savecanvasaction(element , null, null, null, null, null, undoredoobj);
            }else{
                return undoredoobj;
            }
            
        }


        this.renamebutton = function(component , el , noundo , encode , flag , directtext){
            var previous = component.data('zcOldText'); // NO I18N
            var valc = component.find('.zcanvas-value-container'); // NO I18N
            var current = directtext || el.val().trim();
            if(encode){
                current = encode(current);
            }
            valc.html(current);
            var zcdata = component.data('zcanvas'); // NO I18N
            if(zcdata){
                zcdata.zcvalue = current;
            }
            if(previous !== current && !noundo){
                var undoobj = {
                    action: 'callback', // NO I18N
                    node: component, //NO I18N
                    current: current,
                    previous: previous,
                    callback: function(data , operation , node){
                        var isundo = operation === 'undo' ? true : false; // NO I18N
                        zclayout.prototype.layouts['Canvas Button'].renamebutton(node , null , false , null , true , isundo ? data.previous : data.current)
                    }
                }
                var parentinst = zutils.getParentData(component);
                !flag && parentinst && parentinst.savecanvasaction(component, null, null, null, null, null , undoobj);
                component.data('zcOldText' , current); // NO I18N
            }
        }
        
        this.newbutton = function(component){
            var parentdata = zutils.getParentData(component);
            var $parent = component.parent();
            if(parentdata){
                var parentstyle = jsonCreation.getstyles($parent);
                var undoredoobj = {
                    action: 'callback', // NO I18N
                    node: '.' + component.find('.zcanvas-data-node').attr('data-zcanvasid'), // NO I18N
                    previous: {},
                    parent: '#' + $parent.attr('id'), // NO I18N
                    parentstyle: parentstyle,
                    current: canvasOutput.createJson(component),
                    callback: function(data, method , node){
                        if(method === 'undo'){
                            zclayout.prototype.layouts['Canvas Button'].managescope(node);
                             node.zremove(); 
                        }else{
                            var pdata = zutils.getdatabyelement($(data.parent));
                            pdata.addElement([data.current], { ui: { value: { style:data.parentstyle  } } } );
                        }
                    }
                }
            
            var undoref = parentdata.savecanvasaction(component , null, null, null, null, null, undoredoobj);
            zutils.overlapHandling(component , undoref);
            }
        }
        this.managescope = function(element , flag){
            var parentinst = zutils.getParentData(element);
            parentinst && zutils.changelayoutscope(parentinst , 'Canvas Button' , flag); // NO I18N
        }
    }();
})();;(function(){ // eslint-disable-line zstandard/no-global-function-call
    zclayout.prototype.layouts.MERGEFIELD = new function(){
        this.hidden = true;

        var self_ = this;

        this.meta = {
            template: {
                mergefield: '<div class="zclayout zcanvas zcmergelayout zcdeletelayouthandler" data-layoutname="MERGEFIELD"><div class="zcanvas-merge-container"></div></div>',
                row: '<div class="zcanvas-row-seperator" data-zcanvasclass="zcanvas-row-seperator"></div>',
                seperator: '<div class="zcanvas zcanvas-seperator" data-zcanvasclass="zcanvas-seperator">-</div>'
            },
    
            basetemplate: {
                mergefield: '<div class="zclayout zcanvas zcmergelayout"></div>',
                row: '<div class="zcanvas zcanvas-row-seperator"></div>',
                seperator: '<div class="zcanvas zcanvas-seperator">-</div>'
            }
        }

       

        this.changesep = function(e , forced){
            var el = $('.zcanvas-editor-outer').data('zcanvas'); // NO I18N
            if(el && el.config && el.config.toolsRef && el.config.toolsRef.selectedfields){
                var prev = el.config.toolsRef.selectedfields.html();
                var current = forced || e.currentTarget.innerHTML;
                el.config.toolsRef.selectedfields.html(forced || e.currentTarget.innerHTML);
                el.savecanvasaction(el.config.toolsRef.selectedfields , null , null, null,null,null,{
                    action: 'callback', // NO I18N
                    node: '#' + el.config.toolsRef.selectedfields.attr('id'), // NO I18N
                    previous: prev,
                    current: current,
                    callback: function(data , method , node){
                        method === 'undo' ? node.html(data.previous) : node.html(data.current); // NO I18N
                    }
                })
            }
        }

        this.mergecache = [];

        this.sortbyposition = function(a,b){
            if(a.left > b.left){
                return -1;
            }
            if(a.left < b.left){
                return 1;
            }
            return 0;
        }

        this.checkhorizontalpos = function(elements){
            var len = elements.length;
            var ismergepos = true;
            for(var i = 1 ; i < len ; i++){
                if(!ismergepos){
                    continue;
                }
                var basel = elements[i - 1].pos;
                var mergeel = elements[i].pos;
                var checkingNodeStartY = basel.top;
                var checkingNodeEndY = basel.top + basel.height;
                var currentNodeStartY = mergeel.top;
                var currentNodeEndY = mergeel.top + mergeel.height;
                if(!(checkingNodeStartY >= currentNodeStartY && currentNodeEndY > checkingNodeStartY || 
                    checkingNodeStartY < currentNodeStartY && checkingNodeEndY > currentNodeStartY)){
                        ismergepos = false;
                }
            }
            return ismergepos;
        }

        this.canmerged = function(elements){
            if(this.hidden){
                return false;
            }
            var len = elements.length;
            this.mergecache = [];
            for(var i = 0 ; i < len ; i++){
                var _element = elements.eq(i);
                if(!_element.is('.zcanvas-field:not(.zcbdrbox):not(.zctextarea):not(.zcfilefield):not(.zcimagefield)') &&  // NO I18N
                !_element.hasClass('zcstaticicon') && !_element.hasClass('zcmergelayout')){ // NO I18N
                    return false;
                }
                var newpos = _element.position();
                newpos.height = _element.outerHeight();
                newpos.width = _element.outerWidth();
                this.mergecache.push({pos: newpos , el: _element});
            }
            var newelemts = this.mergecache.sort(this.sortbyposition);
            
            return this.checkhorizontalpos(newelemts);
        }

        this.merge = function(elements , baseel , inst){
            var elementsorted = elements.sort(function(a , b){
                if(a.offsetLeft > b.offsetLeft){
                    return 1;
                }
                if(a.offsetLeft < b.offsetLeft){
                    return -1;
                }
                return 0;
            });
            var previous = [];
            previous = elementsorted.map(function(){ return jsonCreation.createJson(this) });
            var baseelstyle = (baseel || elements.eq(0)).position();
            var mergeel = $(this.meta.template.mergefield);
            var $row = $(this.meta.template.row);
            var container =  mergeel.find('.zcanvas-merge-container');
            container.append($row);
            mergeel.css(baseelstyle);
            var len = elementsorted.length;
            for(var i = 0 ; i < len ; i++){
                var mel = elements.eq(i);
                if(mel.hasClass('zcmergelayout')){
                    var melel = mel.find('.zcanvas-row-seperator').children(); // NO I18N
                    var mellen = melel.length;
                    for(var  j = 0 ; j < mellen ; j++){
                        $row.append(melel.eq(j));
                    }
                    mel.zremove();
                }else{
                    $row.append(mel);
                }
                

                if( i !== len - 1){
                    // eslint-disable-next-line webperf/no-multipleDOMLookup
                    var sep = $(this.meta.template.seperator).attr('id' , zutils.getRandomId());
                    $row.append( sep );
                    sep.click(inst.selectfieldonEditor)
                    .mouseover(inst.highlightfieldsoneditor)
                    .mouseout(inst.highlightfieldsoneditor);
                }
            }
            mergeel.attr('id' , zutils.getRandomId()); // NO I18N
            $(inst.config && inst.config.editorcontainer).append(mergeel);
            this.init(mergeel , null , true);
            inst.config.toolsRef.selectfield(mergeel);
            var current = jsonCreation.createJson(mergeel);
            inst.savecanvasaction(mergeel , null , null , null , null , null , {
                action: 'callback', // NO I18N
                node: '#' + mergeel.attr('id'),
                previous: previous,
                current: current,
                callback: function(data , method){
                    if(method === 'undo'){
                        var _node = $(data.node);
                        var parentinst = zutils.getParentData(_node);
                        if(parentinst){
                            _node.zremove();
                            parentinst.addElement(data.previous);
                        }
                    }else{
                        var prevelements = $('');
                        var prevlen = data.previous.length;
                        for(var i = 0 ; i < prevlen ; i++){
                            if(data.previous[i]._type === 'field'){
                                prevelements = prevelements.add($('.' + data.previous[i].zcanvasId));
                            }else{
                                prevelements = prevelements.add($('#' + data.previous[i].zcanvasId));
                            }
                        }
                        
                        var _node = prevelements.eq(0);
                        var parentinst = zutils.getParentData(_node);
                        if(parentinst){
                            parentinst.addElement([data.current]);
                            prevelements.zremove();
                        }
                    }
                }
            })
        }

        this.convertToRelative = function(parent,value){
            var $poff = $(parent).offset()
            return { left: value.left - $poff.left, top: value.top - $poff.top };
        }

        this.unmerge = function(element){
            var closefield = element.closest('.zcanvas-field'); // NO I18N
            if(closefield.length){
                element =  closefield;
            }else{
                element = element.closest('.zcstaticicon'); // NO I18N
            }
           
            var pos = element.offset();
            var elementjson = canvasOutput.createJson(element);
            var $row = element.closest('.zcanvas-row-seperator'); // NO I18N
            var $layout = $row.closest('.zcmergelayout'); // NO I18N
            var zid = $layout.attr('id'); // NO I18N
            var ljson = canvasOutput.createJson($layout);
            var newjson;
            var $parentdata = zutils.getParentData($layout);
            var $parenteditor = $($parentdata.config.editorcontainer);
            var newPos = this.convertToRelative($parenteditor,{left: pos.left, top: pos.top});
            elementjson.ui.value.position.startX = newPos.left;
            elementjson.ui.value.position.startY = newPos.top;
            var otherfields = $row.find('.zcanvas-field , .zcstaticicon').not(element); // NO I18N
            var otherelementjson;
            if(otherfields.length === 1){
                otherelementjson = canvasOutput.createJson(otherfields);
                var otherpos = otherfields.offset();
                var othernewPos = this.convertToRelative($parenteditor,{left: otherpos.left, top: otherpos.top});
                otherelementjson.ui.value.position.startX = othernewPos.left;
                otherelementjson.ui.value.position.startY = othernewPos.top;
                $row.zremove();
            }else{
                var elnext = element.next();
                var elprev = element.prev();
                if(elnext.is('.zcanvas-seperator')){
                    elnext.zremove();
                }else if(elprev.length){
                    elprev.zremove();
                }
                element.zremove();
            }
            
            if($parentdata){
                var pjson = [elementjson];
                if(otherelementjson){
                    pjson.push(otherelementjson);
                }
                $parentdata.addElement(pjson);
            }
            if(!$layout.find('.zcanvas-field , .zcstaticicon ').length){
                $layout.zremove();
            }else{
                newjson = canvasOutput.createJson($layout);
            }
            
            $parentdata && $parentdata.savecanvasaction($layout , null , null , null , null , null , {
                action: 'callback', // NO I18N
                node: '#' + zid,
                json: ljson,
                eljson: elementjson,
                otherjson: otherelementjson,
                newjson: newjson,
                editor: $parentdata.config.editorcontainer,
                callback: function(data , method , node){
                    node.zremove();
                    var inst = $(data.editor).data('zcanvas');
                    if(method === 'undo'){
                        $((data.eljson._type === 'field' ? '.' : '#') + data.eljson.zcanvasId).remove();
                        if(data.otherjson){
                            $((data.otherjson._type === 'field' ? '.' : '#') + data.otherjson.zcanvasId).remove();
                        }
                        inst && inst.addElement([data.json]);
                    }else{
                        var pjson = [data.eljson];
                        if(data.otherjson){
                            pjson.push(data.otherjson);
                        }
                        if(data.newjson){
                            pjson.push(data.newjson);
                        }
                        inst && inst.addElement(pjson);
                    }
                }
            })
        }


        this.initialize = function(){
            if($('.zc-seperator-dropdown').length){
                 return;
            }
            var $sepdd = $('<div/>',{class: 'zc-seperator-dropdown'});
            var seplist = ['','-','+','|','/','//','||','=',',','.','&']; // NO I18N
            var seplen = seplist.length;

            for(var i = 0 ; i < seplen ; i++){
                var $sepc = $('<div>' + seplist[i] + '</div>');
                $sepdd.append($sepc);
                $sepc.click(self_.changesep);
            }
            $sepdd.hide();
            $('.zcanvas-editor-outer').append($sepdd);
        }

        this.init = function(component , zid , noprocess){
            component.attr('id' , zid || zutils.getRandomId()); // NO I18N
            var parentinst = zutils.getParentData(component);
            if(parentinst){
                component.draggable({
                    containment: parentinst.config.zdragcontainment || '.zcanvas-editor-outer', // NO I18N
                    cancel:'',
                    scroll: false,
                    znoposition: true,
                    start: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    drag: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    scope: parentinst.config.zcdropscope || 'default', // NO I18N
                    disabled: parentinst.config.alwaysdisabled
                });

                var resizeconfig = parentinst.getResizableOptionsByType('merge'); // NO I18N

                component.resizable(resizeconfig);

                component.css('position','absolute'); // NO I18N

                var compel = component.find('.zcanvas-seperator').add(component);
                compel.click(parentinst.selectfieldonEditor)
                .mouseover(parentinst.highlightfieldsoneditor)
                .mouseout(parentinst.highlightfieldsoneditor);

                if(noprocess){
                    component.find('.ui-draggable').draggable('destroy'); // NO I18N
                    component.find('.zcanvas-field.ui-resizable').resizable('destroy'); // NO I18N
                    
                    // var icons = component.find('.zcstaticicon.ui-resizable'); // NO I18N
                    // if(icons.length){
                    //     var compparent = zutils.getParentData(component);
                    //     compparent && icons.resizable('option','containment',compparent.config.editorcontainer)
                    // }
                }else{
                    this.processelements(component.find('.zcanvas-field') , parentinst); 
                }

            }
        }

        this.processelements = function(element , inst){
            if(!inst){
                inst = zutils.getParentData(element);
            }
            var currentmenuel = $(zcanvasrelatedList.currentmenu.opened);
            element.each(function(){
                var el = $(this);
                var eldata = el.zdata();
                if(eldata && eldata[0]){
                    el.data('zcanvas',eldata[0]);
                }else{
                    var uniquekey = el.attr('data-uniquekey'); // NO I18N
                    var menudata = currentmenuel.data('zcdatamap'); // NO I18N
                    if(menudata && menudata[uniquekey]){
                        el.find('.zcanvas-data-node').zdata(menudata[uniquekey]);
                        el.data(menudata[uniquekey]);
                    }
                }
               var fieldel = el.find('.zcanvas-inner-component').add(el);
               fieldel.click(inst.selectfieldonEditor)
               .mouseover(inst.highlightfieldsoneditor)
               .mouseout(inst.highlightfieldsoneditor);
            })
        }

        this.toDom = function(json , container , pl, pt){
            var base = $(this.meta.template.mergefield);
            var $cont = base.find('.zcanvas-merge-container')
            var child = json.children;
            var childlen = child.length;
            var jpos = json.ui.value.position;
            var fwidth = jpos.width;
            for(var i = 0 ; i < childlen ; i++){
                var row = child[i].children;
                var rowlen = row.length;
                var el = $(this.meta.template.row);
                for(var j = 0 ; j < rowlen ; j++){
                    var fjson = row[j];
                    if(fjson._type === 'field' || fjson._type === 'separator'){
                        var $html = canvasOutput.innerNode(fjson, true);
                        if(fjson._type === 'separator'){
                            $($html).attr('id', fjson.zcanvasId || zutils.getRandomId()).zccss(fjson.ui.value.style); // NO I18N
                        }
                        
                        el.append($html);
                    }else{
                        var _theme = fjson.theme;
                        if(zclayout.prototype.layouts[_theme]){
                            zclayout.prototype.layouts[_theme].toDom(fjson,el);
                        }
                    }
                    
                }
                el.attr('id' , child[i].zcanvasId || zutils.getRandomId());
                el.zccss(child[i].ui.value.style);
                $cont.append(el);
            }

            base.css({
                left: jpos.startX + (pl || 0),
                top: jpos.startY + (pt || 0),
                width: fwidth,
                zIndex: jpos.depth,
                position: 'absolute' // NO I18N
            });

            container.append(base);
            self_.init(base , json.zcanvasId);
            base.zccss(json.ui.value.style);
            return base;
        }

        this.toView = function(json){
            var component = $(this.meta.template.mergefield);
            var container = component.children();
            var rows = json.children;
            var rowlen = rows.length;
            for(var i = 0 ; i < rowlen ; i ++){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var $row = $(this.meta.template.row);
                var child = rows[i].children;
                var childlen = child.length;
                for(var j = 0 ; j < childlen ; j++){
                    if(child[j]._type === 'component' && child[j].theme === 'Static Icon'){ // NO I18N
                        var node = zclayout.prototype.layouts[child[j].theme].toView(child[j]);
                    }else{
                        var node = canvasOutput.innerNode(child[j]);
                    }
                    $row.append(node);
                }
                container.append($row);
                createStruture.applystyle($row , rows[i].ui.value.style);
            }
            createStruture.applystyle(container , json.ui.value.style);

            return component;

        }

        this.toJson = function(component){
            var result = [];
            component.find('.zcanvas-row-seperator').each(function(){
                var el = $(this);
                var json = canvasOutput.createJson(el);
                json.ui.value.position = {};
                // FIXME:
                json._type = 'component'; // NO I18N
                el.children().each(function(){
                    var node = $(this);
                    json.children.push(canvasOutput.createJson(node));
                })
                result.push(json);
            })
            return result;
        }

        this.deletelayout = function(element , flag){
            var $clayout = element.closest('.zclayout'); // NO I18N
            var zid = $clayout.attr('id');  // NO I18N
            var $parent = $clayout.parent();
            var parentdata = zutils.getdatabyelement($parent);
            var json = canvasOutput.createJson($clayout);
            var njson;
            var fields;
            if(element.is('.zcmergelayout')){
                fields = element.find('.zcanvas-field');
                json._delete = true;
            }else if(element.is('.zcanvas-row-seperator')){ // NO I18N
                fields = element.find('.zcanvas-field');
            }else if(element.is('.zcanvas-seperator')){ // NO I18N
                //element.html('');
                zclayout.prototype.layouts.MERGEFIELD.changesep({currentTarget:{innerHTML:''}});
                return;
            }else{
                var closestmerge = element.closest('.zcmergelayout'); // NO I18N
                if(element.is('.zcstaticicon')){ // NO I18N
                    zclayout.prototype.layouts['Static Icon'].deletelayout(element , true);
                }else{
                    fields = element = element.closest('.zcanvas-field'); // NO I18N
                }
                var otherel = closestmerge.find('.zcanvas-field , .zcstaticicon').not(element);
                if(otherel && otherel.length === 1){
                    var _parent = zutils.getParentEditor(closestmerge);
                    if(_parent){
                        otherel.css(closestmerge.position());
                        _parent.append(otherel);
                        closestmerge.zremove();
                        $clayout = otherel;
                    }
                }else{
                    var elnext = element.next();
                    var elprev = element.prev();
                    if(elnext.is('.zcanvas-seperator')){
                        elnext.zremove();
                    }else if(elprev.length){
                        elprev.zremove();
                    }
                    element.zremove();
                }
            }

            fields && fields.each(function(){
                zutils.deletefield($(this),true);
            });

            element.zremove();

            if(!json._delete){
                njson = canvasOutput.createJson($clayout);
            }

            var saveobj = {
                action: 'callback', // NO I18N
                node: '#' + zid,
                json: json,
                newjson: njson,
                parent: parentdata.config.editorcontainer,
                callback: function(data , method , node){
                    var inst = $(data.parent).data('zcanvas');
                    if(method === 'undo'){
                        !data.json._delete && node.zremove();
                        inst && inst.addElement([data.json]);
                        if(data.json._delete){
                            var fields = $(data.node).find('.zcanvas-field'); // NO I18N
                            var fieldlen = fields.length;
                            for(var i = 0 ; i < fieldlen ; i++){
                                var _field = fields.eq(i);
                                var _fdata = _field.zdata();
                                _fdata = _fdata.length ? _fdata[0] : null;
                                var menudata = $(_fdata.fieldContainer).data('zcanvasMenu'); // NO I18N
                                menudata && menudata.reduceScope(_fdata);
                            }
                        }
                    }else{
                        zclayout.prototype.layouts.MERGEFIELD.deletelayout(node , 1);
                        !data.json._delete && inst && inst.addElement([data.newjson] , null , {fieldscoping:true});
                    }
                }   
            }

            !flag && parentdata && parentdata.savecanvasaction($clayout , null , null , null , null , null , saveobj);
            
            if(flag){
                return saveobj;
            }
            
        }
    }();
})();;var zutils = {
    zcanvas_spaceBar: false,
        stylecompressionmap : {
            'stylekey': { // NO I18N
                'font-family': 'ff', // NO I18N
                'font-size':'fs', // NO I18N
                'width':'_width_' // NO I18N
            },
            'stylevalue': { // NO I18N
                'LatoThin':'t', // NO I18N
                'LatoThinItalic':'ti', // NO I18N
                'LatoLight': 'l', // NO I18N
                'LatoLightItalic': 'li', // NO I18N
                'LatoRegular': 'r', // NO I18N
                'LatoItalic': 'ri', // NO I18N
                'LatoMedium': 'm', // NO I18N
                'LatoMediumItalic': 'mi', // NO I18N
                'LatoSemibold': 's', // NO I18N
                'LatoSemiboldItalic': 'si', // NO I18N
                'LatoBold': 'b', // NO I18N
                'LatoBoldItalic': 'bi', // NO I18N
                'LatoBlack': 'x', // NO I18N
                'LatoBlackItalic': 'xi' // NO I18N
            }
        },
        classstyles: {
            'zcanvasuppercase':{ // NO I18N
                selector: ['.zcanvasuppercase'],style:{'text-transform': 'uppercase'} // NO I18N
            },
            'zcanvaslowercase':{ // NO I18N
                selector: ['.zcanvaslowercase'],style:{'text-transform': 'lowercase'} // NO I18N
            },
            'zcanvasuppercase_removed':{ // NO I18N
                selector: ['.zcanvasuppercase_removed'],style:{'text-transform': 'initial'} // NO I18N
            },
            'zcanvaslinethrough':{ // NO I18N
                selector:['.zcanvaslinethrough' , '.zcanvaslinethrough span:not(.zcs-dib)' , '.zcanvaslinethrough.zcanvas-value-container *' , '.zcanvaslinethrough .zcanvas-value-container *' ,  '.divClass .zcanvaslinethrough .canvasCruxComponent' , '.divClass .zcanvaslinethrough [zc-icon]'], // NO I18N
                style: {'text-decoration': 'line-through'}, // NO I18N
                noimportant: true,
                nodefault: true
            },
            'zcanvaslinethrough_removed':{ // NO I18N 
                selector:['.zcanvaslinethrough' , '.zcanvaslinethrough span:not(.zcs-dib)' , '.zcanvaslinethrough.zcanvas-value-container *' , '.zcanvaslinethrough .zcanvas-value-container *' ,  '.divClass .zcanvaslinethrough .canvasCruxComponent' , '.divClass .zcanvaslinethrough [zc-icon]'], // NO I18N
                style: {'text-decoration': 'initial'}, // NO I18N
                noimportant: true,
                nodefault: true
            },
            'zc-ta-left':{ // NO I18N
                selector: ['.zc-ta-left', '.zc-ta-left .zcanvas-holder'],style:{'text-align': 'left'} // NO I18N
            },
            'zc-ta-center':{ // NO I18N
                selector: ['.zc-ta-center', '.zc-ta-center .zcanvas-holder'],style:{'text-align': 'center'} // NO I18N
            },
            'zc-ta-right':{ // NO I18N
                selector: ['.zc-ta-right', '.zc-ta-right .zcanvas-holder'],style:{'text-align': 'right'} // NO I18N
            }
        },
        // Method to return tool obj
    getinstancetool: function(){
    	if( jsonCreation && jsonCreation.toolinst){
    		return jsonCreation.toolinst;
    	} else{
    		return createStruture.toolinst;
    	}
    },
    getReverseCompressionMapping: function(key, value){
    	var toolinst = zutils.getinstancetool();
    	if(toolinst){
    		return toolinst.getReverseCompressionMapping(key , value);
    	}else{
    		return value;
    	}
    },
    getCompressionMapping: function(key , value){
    	var toolinst = zutils.getinstancetool();
    	if(toolinst){
    		return toolinst.getCompressionMapping(key , value);
    	}else{
    		return value;
    	}
    },
    forceselect: function(el){
    	var toolinst = zutils.getinstancetool();
    	if(toolinst){
    		return toolinst.selectfield(el, null,true);
    	}
    },
    matchdefaultstyles: function(element , $parentdata , dataclone , olddataclone , menuinst){
    	var resizeconfig = $parentdata.getResizableOptionsByType(dataclone.zctype);
    	if(resizeconfig){
    		element.resizable('destroy'); // NO I18N
    		element.resizable(resizeconfig);
    		if(menuinst.config){
    			if(menuinst.config.defaultclass){
    				if(menuinst.config.defaultclass[dataclone.zctype]){
    					element.addClass(menuinst.config.defaultclass[dataclone.zctype]).zaddClass(menuinst.config.defaultclass[dataclone.zctype]);
    				}
    				if(menuinst.config.defaultclass[olddataclone.zctype]){
    					element.removeClass(menuinst.config.defaultclass[olddataclone.zctype]).zremoveClass(menuinst.config.defaultclass[olddataclone.zctype]);
    				}
    			}
    			// FIXME: this needs to be removed from config
    			element.css('height' , ''); // NO I18N
    			if(menuinst.config.defaultstyle && menuinst.config.defaultstyle[dataclone.zctype]){
    				element.css(menuinst.config.defaultstyle[dataclone.zctype]);
    			}
    		}
    	}
    },
    getdatafromelement : function(element){
        var $el = $(element);
        if(!$el.hasClass('zcanvas-field')){ //NO I18N
            element = $el.parent('.zcanvas-field'); //NO I18N
        }
        // return JSON.parse(decodeURI($(element).data('zcanvas'))); //NO I18N
        return $el.data('zcanvas'); // NO I18N

    },
    compresstheme: function(theme){
    	var inst = zutils.getinstancetool();
    	var newtheme = {};
    	for(var ikey in theme){
    		var newobj = {};
    		var obj = theme[ikey];
            for(var key in obj){
                var statestyle = obj[key];
                var newstyle = {};
                for(var k in statestyle){
                    var newkey = inst.getCompressionMapping('stylekey' , k);  // NO I18N
                    var newval = inst.getCompressionMapping('stylevalue' , statestyle[k]); // NO I18N
                    newstyle[newkey] = newval;
                }
                newobj[key] = newstyle;
            }
            newtheme[ikey] = newobj;
    	}
    	
        return newtheme;
    },
    decompresstheme: function(theme){
    	var inst = zutils.getinstancetool();
        
        var newtheme = {};
    	for(var ikey in theme){
    		var newobj = {};
    		var obj = theme[ikey];
            for(var key in obj){
                var statestyle = obj[key];
                var newstyle = {};
                for(var k in statestyle){
                    var newkey = inst.getReverseCompressionMapping('stylekey' , k);  // NO I18N
                    var newval = inst.getReverseCompressionMapping('stylevalue' , statestyle[k]); // NO I18N
                    newstyle[newkey] = newval;
                }
                newobj[key] = newstyle;
            }
            newtheme[ikey] = newobj;
    	}
    	
        return newtheme;
    },
    updateDataElement : function(element, data){
        data = encodeURI(JSON.stringify(data));
        $(element).attr({
            zcanvas: data
        });
    },
    getEditorView : function(data,flag){
        var element;
        if(!flag){
            data.zcanvasId = zutils.getRandomId();
        }
        if(data.hideLabel){
            element = zutils.generateTemplateString(zcanvasdefaults.templates.hiddenlabel)({data:data});
        }else{
            element = zutils.generateTemplateString(zcanvasdefaults.templates.label)({data:data});
        }
        // PURPOSE data is set here only to test.
       // $(element).zdata(data);
        return $(element);
    },

    resizeWidthHeight : function(nodes){
        var currentWidth = $(nodes).width();
        var resizeWidth = currentWidth + 20;
        $(nodes).css({
            width: resizeWidth
        });

    },

    findDisturbedNode : function(ui , editor){
        var parentEditor = editor || zutils.findParentEditor(ui);
        var helper = $(ui.helper);
        if(helper.hasClass('ui-draggable-container')){
            return;
        }
        var draggables = $.merge( $(parentEditor).find('.zcanvas-data-node').not(helper.find('.zcanvas-data-node')) , $('.zcanvastempell') ); // NO I18N

       return zutils.getInterceptedNodes(draggables,{x: ui.offset.left, y: ui.offset.top, width: helper.width(), height: helper.height()});
    },
    /**
     * Since there will be multiple editors can receive elements from sidebar. the disturbing nodes parent editor will be determined from here.
     * @param {JQuery Draggable UI element} ui 
     */
    findParentEditor : function(ui,tempEl){
        //TODO: Apply additional selection with fieldclass using options
        if(!ui){
            ui = {
                offset: {
                    left: tempEl.x,
                    top: tempEl.y
                },
                width: tempEl.width,
                height: tempEl.height
            }
        }
        // FIXME: Added quick fix as check only visible editors
        // FIXME: Must be handled with the droppable action ie ( onactive from droppable)
     var editors = $(".ui-droppable:visible:not(.ui-droppable-disabled)");
        var editorscount = editors.length;
        var helper = $(ui.helper);
        var hwidth = ui.width || helper.width();
        var hheight = ui.height || helper.height();
        for(var i = 0; i < editorscount; i++){
            var boundedRect = zutils.getBoundedRect(editors[i]);
            if(boundedRect.top < ui.offset.top && boundedRect.left < ui.offset.left && 
               boundedRect.right > ui.offset.left + hwidth && boundedRect.bottom > ui.offset.top + hheight){
                return editors[i];
            }
        }
    },

    /**
         * This method is used to return the disturbed node 
         * @param {Nodes in Editor except moving node} othernodes 
         * @param {Moving node} currentNode 
         */
    getInterceptedNodes : function(othernodes,currentNode){
        var currentdefaults = {x: 0, y: 0, width:  1, height: 1};
        currentNode = canvasObjUtils._.defaults(currentNode,currentdefaults);
        return  canvasObjUtils._.find(othernodes, function(n) {
                    var iElement = $(n);
                    var iElparent = iElement.parent('.zcanvas-row-separator'); // NO I18N
                    var fieldParent;
                    var isOnlyChild = zutils.isOnyChild(iElement);
                    if(isOnlyChild){
                        fieldParent = iElement.parents('.zcanvas-field'); //NO I18N
                    }else{
                        fieldParent = iElparent.parents('.zcanvas-field'); //NO I18N
                    }
                    var nodeRect = {
                        x: iElement.offset().left,
                        y: iElement.offset().top,
                        width: iElement.outerWidth(),
                        height: iElement.outerHeight()
                    }
                   
                    if(iElparent.length && iElement.is(':last-child') || isOnlyChild && fieldParent.length){
                        var rowwidth = fieldParent.outerWidth();
                        var elwidth = iElement.position().left + nodeRect.width;
                        var diffwidth = rowwidth - elwidth;
                        nodeRect.width += diffwidth;
                    }
                    return zutils.isIntercepted(nodeRect, currentNode);
                }.bind(this));
    },

    isOnyChild : function(element){
        var $parent = element.parents('.zcanvas-field'); // NO I18N
        var child = $parent.children('.zcanvas-data-node'); // NO I18N
        return child.length ? true : false;
    },
    /**
         * This method used to find whether two node intercepted ie disturbed
         * @param {Node A} a 
         * @param {Node B} b 
         */
    isIntercepted : function(a,b){
        return !(a.x + a.width <= b.x || b.x + b.width <= a.x || a.y + a.height - 2 <= b.y || b.y + b.height <= a.y + 2);
    },

    isInterceptedByPosition: function(a,b){
        return !(a.left + a.width <= b.left || b.left + b.width <= a.left || a.top + a.height - 2 <= b.top || b.top + b.height <= a.top + 2);
    },

    /**
     * To find the element positions
     * @param {Element for getting rect details} el 
     */
    getBoundedRect : function(el){
        var element = $(el);
        return {
                top: element.position().top,
                left: element.position().left,
                bottom: element.position().top + element.height(),
                right: element.position().left + element.width()
        };
    },

    deleteElement : function(node,flag){
        if(!node){
            node = $(".zcanvas-selected-element , .zcanvas-multiselect");//NO I18N
        } else {
            node = $(node);
        }
        if(node.length > 1){
            var nodelen = node.length;
            var undoobj = [];
            var selector = $('.zcanvas-selectbox');
            var inst;
            if(!selector.length){
               var closesteditor =  zutils.getClosestEditor(node);
               inst = zutils.getdatabyelement(closesteditor);
            }else{
                inst = zutils.getParentData(selector);
            }
            for(var i = 0 ; i < nodelen ; i++){
                var uobj = zutils.deleteElement(node.eq(i),true);
                uobj && undoobj.push(uobj);
            }
            inst.savecanvasaction({}, 'link' , null , null , null , null , {
                action: 'link', // NO I18N
                node: '',
                actionarray: undoobj
            })
            selector.zremove();
            return;
        }
        if(node.is('.zcanvas-ignore')){ // NO I18N
        	node.zremove();
        	return;
        }
        /*if(node.closest('.zc-fieldsection').length){ // NO I18N
            return;
        }*/
        var delhandler = node.closest('.zcdeletelayouthandler'); // NO I18N
        if(delhandler.length){
            var layoutname = delhandler.attr('data-layoutname'); // NO I18N
            var editorInstance = zclayout.prototype.layouts[layoutname];
            return editorInstance.deletelayout(node, flag);
        }
        if(node.is('.zcanvas-editor')){
            return zutils.deleteEditor(node,flag);
        }

        if(node.is('.zcanvas-static-editor')){
            return zutils.deletestaticeditor(node,flag);
        }

        if(node.is('.zc-rl-sub-selectable')){
            node = node.closest('.zcanvas-static-editor');  // NO I18N
            return zutils.deletestaticeditor(node,flag);
        }

        if(node.is('.zclayout') || node.is('.zclayoutselectable') || node.is('.zclayoutdeletable')){ 
            node = node.is('.zclayoutselectable') ? node.closest('.zclayout') : node; // NO I18N 
            return zutils.deleteLayout(node,flag);
        } 

        return zutils.deletefield(node , flag);
    },
    deletefield: function(node, flag){
        var previousData, currentData, currentNode, referenceNode, editorInstance;
        referenceNode = node.is('.zcanvas-field') ? node : node.closest('.zcanvas-field'); // NO I18N
        var ref_ = zutils.getSelectorByElement(referenceNode);
        previousData = canvasOutput.createJson(referenceNode);
        var prevstyle = zutils.getParentStyles(referenceNode);
        var parenteditor = zutils.getSelectorByElement( zutils.getParentEditor(referenceNode) );
        editorInstance = zutils.getParentData(referenceNode);
        var getNodeData = node.zdata()[0]; 
        if(getNodeData) {
            var getMenuData = $(getNodeData.fieldContainer).data("zcanvasMenu");//NO I18N
            getMenuData && getMenuData.addElement(getNodeData); 
        } 

        zutils.zremoveData(node);
        
        if(node.hasClass("zcanvas-field") || node.hasClass("zcanvas-row-separator")){
            node.zremove();
        }else if(node.hasClass("zcanvas-holder")){ // NO I18N
            referenceNode.zremove();
        } else if(node.hasClass("zcanvas-inner-component")){
            var fieldOuterNode = node.parents(".zcanvas-field"); // NO I18N
            var rowOuterNode = node.parents(".zcanvas-row-separator"); //No I18N
            var fieldCount = fieldOuterNode.find(".zcanvas-value-container").length;
            var rowFieldCount = rowOuterNode.find(".zcanvas-value-container").length;
            if(fieldCount <= 1){
                fieldOuterNode.zremove();
            } else if(rowFieldCount <= 1){
                rowOuterNode.zremove(); 
            } else {
                var holder = node.parent(".zcanvas-holder"); //No I18N
                var nextSeparator = holder.next(".zcanvas-seperator"); //No I18N
                var prevSeparator = holder.prev(".zcanvas-seperator"); //No I18N
                holder.zremove()
                nextSeparator.zremove();    
                if(nextSeparator.length === 0){
                    if(prevSeparator.next().length === 0){
                        prevSeparator.zremove();
                    }    
                }
            }
        }
        // eslint-disable-next-line webperf/layout-thrashing
        currentData = referenceNode.is(':visible') ? canvasOutput.createJson(referenceNode) : {}; // NO I18N
        currentNode = referenceNode;
        var undoobj = {
            node: ref_,
            action: 'delete', // NO I18N
            previous: previousData,
            current: currentData,
            prevstyle: prevstyle,
            data: getNodeData,
            editor: parenteditor
        }
        if(!flag){
            editorInstance && editorInstance.savecanvasaction(currentNode , 'delete' , null , null, null , null , undoobj); 
        }else{
            return undoobj;
        }
    },
    deleteEditor : function(editor,flag){
        var $editor = $(editor);
        if($editor.is('.zcanvas-non-delete') || $editor.is('.zcanvas-title-editor')){
            return;
        }
        var baseeditor = $editor.parent();
        if(baseeditor.hasClass('zcanvas-skip-selection')){
            baseeditor = baseeditor.parent();
        }
        var editorInstance = baseeditor.data('zcanvas'); // NO I18N
        var previousData = {
            editor : $editor.attr('id'), // NO I18N
            json: canvasOutput.createJson(editor),
            previousstyle: {ui: {value : { style : jsonCreation.getstyles(baseeditor) }}}
        }
        var isTable = $editor.hasClass('zclayout-table'); // NO I18N
        var elements;
        if(isTable && !$editor.zhasClass('zcrestricttable')){
            elements = $editor.find('.zcanvas-field'); // NO I18N
        }else{
            elements = $editor.children('.zcanvas-field , .zcanvas-editor , .zcanvas-static-editor , .zclayout'); // NO I18N
        }
        elements.each(function(){ // NO I18N
            var $el = $(this);
            if($el.is('.zcanvas-editor')){
                zutils.deleteEditor($el,true);
            }else if($el.is('.zcanvas-field')){ // NO I18N
                zutils.deleteElement($el,true);
            }else if($el.is('.zcanvas-static-editor')){ // NO I18N
                zutils.deletestaticeditor($el , true);
            }else if($el.is('.zclayout')){ // NO I18N
                zutils.deleteLayout($el , true);
            }
        });
        $editor.remove();
        if($editor.zhasClass('zc-lsection')){
            zutils.changelayoutscope(editorInstance , "Section Layout"); // NO I18N
        }else if($editor.hasClass('zclayout-table')){ // NO I18N
            zutils.changelayoutscope(editorInstance , "Table Layout"); // NO I18N
        }
        if(!flag){
            editorInstance.savecanvasaction({},'deleteeditor',previousData,{});
            
        }else{
            return {
                node: $editor,
                action: 'deleteeditor', // NO I18N
                previous: previousData,
                editor: zutils.getSelectorByElement(  baseeditor )
            }
        }
    },

    deletestaticeditor: function(editor,flag){
        var $editor = $(editor);
        var _editorparent = zutils.getParentEditor($editor);
        if(_editorparent.is('.zcanvas-restricted-drop') && !flag){
            var _tabzid = _editorparent.attr('id'); // NO I18N
            var _tabelement = $( '.zctablist' + _tabzid + ' .deletetabicon'); // NO I18N
            _tabelement.click();
            return;
        }
        if($editor.hasClass('zcnoaction')){
        	var parenteditor = zutils.getParentEditor($editor);
        	var editorinst = zutils.getdatabyelement(parenteditor);
        	var previousdata = {
        			editor: $editor.attr('id'), // NO I18n
        			parent: '#' + parenteditor.attr('id'), // NO I18N
        			json: canvasOutput.createJson($editor), // NO I18N
        			action: 'callback', // NO I18N
        			node: $editor,
        			callback: function(data , method){
        				var $node = $(data.node);
        				if(method === 'undo'){
        					var parentinst = zutils.getdatabyelement($(data.parent));
        					parentinst && parentinst.addElement([data.json]);
        				}else{
        					$node.zremove();
        				}
        			}
        	}
        	$editor.zremove();
        	if(!flag){
        		editorinst && editorinst.savecanvasaction($editor , 'callback' , null , null ,null, null, previousdata );
        		return;
            }else{
                return previousdata;
            }
        }
        var baseeditor = $editor.parent();
        if(baseeditor.hasClass('zcanvas-skip-selection')){
            baseeditor = baseeditor.parent();
        }
        var editorInstance = baseeditor.data('zcanvas'); // NO I18N
        var titledata = canvasOutput.createJson($editor.find('.zcanvas-title-editor')); // NO I18N
        var editorpos = jsonCreation.getposition($editor);
        editorpos.left = editorpos.startX;
        editorpos.top = editorpos.startY;
        var previousData = {
            editor : $editor.attr('id'), // NO I18N
            json: $editor.data('zcanvas'), // NO I18N
            style: editorpos,
            titledata: titledata,
            cdata: $editor.data('zcanvasdata') // NO I18N
        }
        zcanvasrelatedList.filltemplates($editor , null, true, previousData.json.data);
        $editor.remove();
        var menuinst = $(previousData.json.fieldContainer).data('zcanvasMenu'); // NO I18N
        menuinst.addElement(previousData.json);
        if(!flag){
            editorInstance.savecanvasaction({},'deletestaticeditor',previousData,{});
        }else{
            return {
                node: $editor,
                action: 'deletestaticeditor', // NO I18N
                previous: previousData,
                editor:  zutils.getSelectorByElement( baseeditor )
            }
        }
        
    },


    deleteLayout: function(element, flag){
        var layoutname = element.attr('data-layoutname'); // NO I18N
        var editorInstance = zclayout.prototype.layouts[layoutname];
        return editorInstance.deletelayout(element, flag);
    },

    getzdataIds : function(elm){
        if($(elm).hasClass("zcanvas-data-node")){
            var id = $(elm).map(function(){
                return $(this).attr('data-zcanvasid');//NO I18N  
            })
        } else if($(elm).hasClass("zcanvas-inner-component")){//NO I18N
            var id = $(elm).map(function(){
                return $(this).parent('.zcanvas-data-node').attr('data-zcanvasid');//NO I18N  
            });
        } else if($(elm).hasClass("zcanvas-field") || $(elm).hasClass("zcanvas-row-separator")){//NO I18N
            var valueContainers = $(elm).find(".zcanvas-value-container");//NO I18N
            var id = valueContainers.map(function(count, nodes){
                if($(nodes).parent().hasClass("zcanvas-holder")){
                    return $(this).parent('.zcanvas-data-node').attr('data-zcanvasid');
                } else {
                    return $(this).attr('data-zcanvasid'); //NO I18N
                }
            });
        }

        return id;
    },

    zremoveData : function(node){
        var getId = zutils.getzdataIds(node);

        $(getId).each(function(count, id){
            delete window.zcanvasdata[id];
        });
    },

    search : function(element , menu , searchclass, subclass, hideclass , nomatch , subselection){
        element = element ? element : '#sidemenuSearchInput'; // NO I18N
        var $el = $(element);
        var inputValue = $el.val() || '';
        var $parent = $el.parent();
        if(inputValue === ''){
            $parent.find('.zc_searchIcon').removeClass('zc-search-hide');
            $parent.find('.zc-closesearch-icon').addClass('zc-search-hide');
        }else{
            $parent.find('.zc_searchIcon').addClass('zc-search-hide');
            $parent.find('.zc-closesearch-icon').removeClass('zc-search-hide');
        }
        if(!subclass){
            subclass = {}
        }
        var activemenu = zcanvasrelatedList && zcanvasrelatedList.currentmenu && zcanvasrelatedList.currentmenu.opened ? zcanvasrelatedList.currentmenu.opened : "#zcanvas_menu"; // NO I18N
        
        var fields_outer_container = $(menu || activemenu);
        if(!fields_outer_container.length){
        	fields_outer_container = $('#zcanvas_menu'); // NO I18N
        }
        var container_valHolder = fields_outer_container.find(searchclass || ".zcanvas-on-menu:not(.zc-strict-hide)").not('.zcanvas-menuhidden').not('.zcmenu-disable-item'); // NO I18N

     /*   var containFieldsLowerCase = _.chain(container_valHolder).filter(function(d){
            var string = $(d).clone().children().remove().end().text();
            return string.includes(inputValue.toLowerCase())}).value();
        var containFieldsUpperCase = _.chain(container_valHolder).filter(function(d){
            var string = $(d).clone().children().remove().end().text();
            return string.includes(inputValue.toUpperCase())}).value();
        var containFieldsCamelizeCase = _.chain(container_valHolder).filter(function(d){
            var string = $(d).clone().children().remove().end().text();
            return string.includes(zhelpers.camelize(inputValue))}).value();
        var containFields = $(containFieldsLowerCase).add(containFieldsUpperCase).add(containFieldsCamelizeCase); */

        var containFields = _.chain(container_valHolder).filter(function(d){
            var searchel = $(d);
        	if(subselection){
        		var subselectionel = searchel.find(subselection);
        		if(subselectionel && subselectionel.length){
        			searchel = subselectionel;
        		}
        	}
        	var string = '';
        	if(searchel.hasClass('zcanvas-searchby-title')) {
        		var titlestring = searchel.attr('title'); // NO I18N
        		if(titlestring) {
        			string = titlestring.toLowerCase();
        		}
        	}else {
        		string = searchel.clone().children().remove().end().text().toLowerCase();
        	}
            return string.includes(inputValue.toLowerCase())}).value();

        containFields = $(containFields);
        
        var fields = searchclass ?  $(hideclass || searchclass) : fields_outer_container.find(".zcanvas-on-menu , .zcanvas-submenu-heading, .zcanvas-menu-heading , .zcanvas-submenu-container");
      //  fields.hide();

        
        var noMatchElem = $(nomatch || "#sidebarnomatch");
        var nomatchflag = false;
        var outcontainerflag = false;
        var result = $('');
        var searchmatchsource = $el.is(noMatchElem.attr('data-search-source')); // NO I18N
        if(containFields.length > 0){
            containFields.each(function(){
                var outfield = $(this);
               // outfield.show();
               result = result.add(outfield);
                var subcont = outfield.parent(subclass.submenucontainer || '.zcanvas-submenu-container'); // NO I18N
                if(!subcont.length && subclass.closest){
                    subcont = outfield.closest(subclass.submenucontainer);
                }
                result = result.add(subcont);
              //  subcont.show();
                var subhead = subcont.prev(subclass.submenu || '.zcanvas-submenu-heading'); // NO I18N
               // subhead.show();
               result = result.add(subhead);
                var mainparent = outfield.parent(subclass.fieldwrapper || '.zcanvas-field-wrapper'); // NO I18N
                if(!mainparent.length){
                    mainparent = subcont.parent(subclass.fieldwrapper || '.zcanvas-field-wrapper'); // NO I18N
                }
                var mainhead = mainparent.prev( subclass.menuheading || '.zcanvas-menu-heading') // NO I18N
                result = result.add(mainhead);
              //  mainhead.show(); 
                if(noMatchElem.is(":visible")){
                  //  fields_outer_container.show();
                  outcontainerflag = true;
                   if( searchmatchsource ) {
                    // noMatchElem.hide();
                    nomatchflag = true;
                   } 
                }
                
                
            });

            if(nomatchflag){
                noMatchElem.hide();
            }

            if(outcontainerflag){
                fields_outer_container.show();
            }

            fields.not(result).not('.zc-strict-hide').not('.zcanvas-menuhidden').not('.zcmenu-disable-item').hide(); // NO I18N

            result.show();
            
           
        }else{
            // fields_outer_container.hide();
            fields.not('.zc-strict-hide').not('.zcanvas-menuhidden').not('.zcmenu-disable-item').hide(); // NO I18N
            searchmatchsource && noMatchElem.show();      
        }

       // fields_outer_container.scrollTop(0);
    },

    menuSearchClear : function(flag,el,searchclass,menu, subclass, hideclass , nomatch){
        var focusneeded = el ? true : false;
        var searchel = el ?  $(el) :  $("#sidemenuSearchInput");
        if(searchel.val() || flag){
            searchel.val("");
            zutils.search(el,menu,searchclass , subclass, hideclass , nomatch);
            var $parent = searchel.parent();
            $parent.find('.zc_searchIcon').removeClass('zc-search-hide');
            $parent.find('.zc-closesearch-icon').addClass('zc-search-hide');
            if(focusneeded){
            	searchel.focus();
            }
        }

    },

    bindHoverBorder : function(nodes){
        // if(!nodes) {
        //     nodes = jSortable.cd_selectedGridItem;
        // }
        $(nodes).each(function(count, eachNode){
            var eachNodeFields = $(eachNode).find(".zcanvas-inner-component");
            if(eachNodeFields.length === 1) {
                $(eachNode).unbind('mousemove mouseout');
                return true;
            }
            
            $(eachNode).mousemove(function(event){
                var $target = $(event.target);
                if(!$target.hasClass("canvas_hoverOutline")){
                    $(".canvas_hoverOutline").removeClass("canvas_hoverOutline");
                    $(".cd_hoverBdr").removeClass("cd_hoverBdr");
                    var closestField = $target.closest(".zcanvas-inner-component"); // NO I18N
                    var closestRow = $target.closest(".zcanvas-row-separator"); // NO I18N
                    var closestSep = $target.closest(".zcanvas-seperator"); // NO I18N
                    
                    if(closestField.length > 0){
                        closestField.addClass("canvas_hoverOutline");//NO I18N
                    } else if(closestSep.length > 0){
                        closestSep.addClass("canvas_hoverOutline");//NO I18N
                    } else {
                        closestRow.addClass("canvas_hoverOutline");//NO I18N
                    }
                }
            });
            $(eachNode).mouseout(function(){
                $(".canvas_hoverOutline").removeClass("canvas_hoverOutline");//NO I18N
            });
        });
    },

    triggerEvent : function(eventName,element,event,ui){
        $(element).trigger({
            type: eventName,
            message: {
                target: event.target,
                ui: ui
            }
        });
    },
    generateTemplateString: (function () {
        var cache = {};
    
        function generateTemplate(template) {
            var fn = cache[template];
    
            if (!fn) {
                // Replace ${expressions} (etc) with ${map.expressions}.
                // eslint-disable-next-line no-useless-escape
                var sanitized = template.replace(/\$\{([\s]*[^;\s\{]+[\s]*)\}/g, function (_, match) {
                    return '${map.' + match.trim() + '}'; //NO I18N
                })
                // Afterwards, replace anything that's not ${map.expressions}' (etc) with a blank string.
                .replace(/(\$\{(?!map\.)[^}]+\})/g, '');
    
                fn = Function('map', 'return `' + sanitized + '`');
            }
            return fn;
        }
    
        return generateTemplate;
    })(),
    getRandomId: function(){
        return 'zcanvas_' + Math.random().toString(36).substring(2, 15); // NO I18N
    },
    adjustWidth: function(el,scrollWidthflag){
        var $el = $(el);
        var scrollWidth = $el.get(0).scrollWidth;
        var width = $el.width();
        var minWidth;
        if(scrollWidth > width || !scrollWidthflag){
            minWidth = scrollWidth;
        }else{
            var rsep = $el.find('.zcanvas-row-separator');
            if(rsep.length){
                minWidth = canvasObjUtils._.max(rsep,function(d){return $(d).width()}).scrollWidth;
            }else{
                var zdn = $el.find('.zcanvas-data-node');
                if(zdn.length){
                    minWidth = zdn.width();
                }
            }   
        }
        return minWidth;
       // $el.css('min-width',minWidth); // NO I18N
    },
    findDistrubNodeRight : function(allElm, currentNode, allOrMin){
        // if(allElm == undefined){
        //     allElm = $("#grid1").find(".grid-stack-item");
        // }
        var currentNodeStartY = $(currentNode).position().top;
        var currentNodeStartX = $(currentNode).position().left;
        var currentNodeEndY = currentNodeStartY + $(currentNode).height();
        var distrubedNodeArray = [];
        var allelmlen = allElm.length;
        for(var i = 0; i < allelmlen; i++){ 
            var checkingNode = allElm[i];
            var checkingNodeStartY = $(checkingNode).position().top;
            var checkingNodeStartX = $(checkingNode).position().left;
            // id = avoid same node return,, startX = after space join
            if(checkingNodeStartX !== currentNodeStartX && currentNodeStartX < checkingNodeStartX){
//              var checkingNodeStartY = checkingNode.ui.position.startY;
                var checkingNodeEndY = checkingNodeStartY + $(checkingNode).height();
                // 1.same row or less than same row 2.
                if(checkingNodeStartY >= currentNodeStartY && currentNodeEndY > checkingNodeStartY || 
                        checkingNodeStartY < currentNodeStartY && checkingNodeEndY > currentNodeStartY) {
                    distrubedNodeArray.push(allElm[i]);
                }
            }
        }
        if(distrubedNodeArray.length !== 0){
            if(allOrMin){
                return distrubedNodeArray;
            } else {
                var closestNode = canvasObjUtils._.min(distrubedNodeArray,function(num){return $(num).position().left});
                return closestNode;
            }
        }
    },

    loadDefaultWorkspace : function(){
        var editorWorkspace = zcanvasdefaults.templates.editorNode;
        // eslint-disable-next-line zstandard/no-body-events
        $("body").append(editorWorkspace);
    },

    canvasWorkspaceResize : function(workspaceEdit){
        if(workspaceEdit){
            zutils.zcanvas_spaceBar = true;
            document.body.style.cursor = "grab";
        } else {
            zutils.zcanvas_spaceBar = false;
            document.body.style.cursor = "default";
        }
    },
    tabPress : function(){
        $("#zcanvas_menu, #canvas-toolbar").toggle();
    },
    zcopyobj: function(src){
        return Object.assign({}, src);
    },
    zcopyobj2: function(src){
        return JSON.parse(JSON.stringify(src));
    },
    findpositionAndWidth : function(el,pos,cont,target,flag,mindata){
        var $el = $(el);
        var $target = $(target);
        var outerContainerOffset = $el.offset();
        var outWidth = cont.outerWidth();
        var leftPosi =   pos.left - outerContainerOffset.left;
        var minw = mindata || target.attr('data-zc-min-width'); // NO I18N
        if(minw){
            var minwidth = parseInt(minw);
            if(leftPosi + minwidth > outWidth){
                leftPosi = outWidth - minwidth;
            }
        }
        var  toppos =  pos.top - outerContainerOffset.top;
        var nodeWidth = 0;
        var nowidthflag = $target.is('.zc-no-resize'); // NO I18N

        if(!flag && !nowidthflag){
            var allNodes = cont.children(".zcanvas-editor, .zcanvas-static-editor, .zclayout");//NO I18N
            var distrubNode = zutils.findDistrubNodeRight(allNodes, target);
            if(!distrubNode){
                nodeWidth = cont.width() - leftPosi - 10;
            } else {
                nodeWidth = $(distrubNode).position().left - leftPosi - 10;
            }

            if(minw){
                var minwidth = parseInt(minw);
                if(nodeWidth < minwidth){
                    nodeWidth = minwidth;
                }
            }
        }else if(nowidthflag){
            nodeWidth = $target.width();
        }
     
        return {
            leftpos:  leftPosi,
            toppos:   toppos,
            targetwidth: nodeWidth
        } 
    },
    findImmediateDisturb: function(parent, node, side, json){
        var allnodes = Array.from(parent.children('.zcanvas').not(node)); // NO I18N
        var sortednodes = [];
        if(side === 'top' || side === 'bottom'){
            sortednodes =  canvasObjUtils._.sortBy(allnodes, function(snode) { return snode.offsetTop + snode.offsetHeight } )
            if(side === 'top'){
                sortednodes = sortednodes.reverse();
            }
        }else{
            sortednodes = canvasObjUtils._.sortBy(allnodes, function(snode) { return snode.offsetLeft + snode.offsetWidth } );
            if(side === 'left'){
                sortednodes = sortednodes.reverse();
            }
        }
        allnodes = $(sortednodes);
        var pos;
        if(json){
            pos = json;
        }else{
            pos = node.position();
            pos.width = pos.left + node.outerWidth();
            pos.height = pos.top + node.outerHeight();
        }
        
        var allnodelen = allnodes.length;
        for(var i = 0 ; i < allnodelen ; i++){
            var $el = allnodes.eq(i); // $(allnodes[i]);
            var dpos = $el.position();
            dpos.width = dpos.left + $el.outerWidth();
            dpos.height = dpos.top + $el.outerHeight();
            switch(side){
                case 'top':
                    if(dpos.top < pos.top && ( dpos.left >= pos.left && pos.width > dpos.left || dpos.left < pos.left && dpos.width > pos.left )){
                        return $el;
                    }
                    break;
                case 'bottom':
                    if(dpos.top > pos.top && ( dpos.left >= pos.left && pos.width > dpos.left || dpos.left < pos.left && dpos.width > pos.left )){
                        return $el;
                    }
                    break;
                case 'left':
                    if(dpos.left < pos.left && ( dpos.top >= pos.top && pos.height > dpos.top || dpos.top < pos.top && dpos.height > pos.top )){
                        return $el;
                    }
                    break;
                case 'right':
                    if(dpos.left > pos.left && ( dpos.top >= pos.top && pos.height > dpos.top || dpos.top < pos.top && dpos.height > pos.top )){
                        return $el;
                    }
                    break;
            }
        }
        return;

    },
    getBoxdimensions: function(el){
        var dimensions = {
            left: canvasObjUtils._.min(el , function(item){ return item.offsetLeft }).offsetLeft,
            top: canvasObjUtils._.min(el , function(item) { return item.offsetTop }).offsetTop
        }
        var endxel = canvasObjUtils._.max(el , function(item) { return item.offsetLeft + item.offsetWidth });
        dimensions.width =  endxel.offsetLeft  + endxel.offsetWidth; //  - dimensions.left removed for PURPOSE

        var endyl = canvasObjUtils._.max(el , function(item){ return item.offsetTop + item.offsetHeight  });
        dimensions.height = endyl.offsetTop + endyl.offsetHeight; // - dimensions.top removed for PURPOSE

        dimensions.elheight = endyl.offsetTop - dimensions.top + endyl.offsetHeight; 
        dimensions.elwidth = endxel.offsetLeft - dimensions.left + endxel.offsetWidth; 
        return dimensions;
    },
    zobjdiff: function(obj1, obj2) {
        var result = {};
        if (Object.is(obj1, obj2)) {
            return undefined;
        }
        if (!obj2 || typeof obj2 !== 'object') {
            return obj2;
        }
        Object.keys(obj1 || {}).concat(Object.keys(obj2 || {})).forEach(function(key) {
            if(obj2[key] !== obj1[key] && !Object.is(obj1[key], obj2[key])) {
                result[key] = obj2[key];
            }
            if(typeof obj2[key] === 'object' && typeof obj1[key] === 'object') {
                var value = zutils.zobjdiff(obj1[key], obj2[key]);
                if (value !== undefined) {
                    result[key] = value;
                }
            }
        });
        return result;
    },
    getParentData: function(element){
        var $parent = element.parent('.zcanvas-editor');   // NO I18N
        if($parent.is('.zcanvas-selectbox')){
            $parent = zutils.getParentEditor($parent);
        }
        if(!$parent.length && element.parent().is('.zcanvas-row-seperator')){
            $parent = zutils.getParentEditor(element.closest('.zcmergelayout')); // NO I18N
        }
        var parentdata = {};
        if(!$parent.length){
            $parent = element.parent('.zcanvas-editor-outer');  // NO I18N
        }
        parentdata = $parent.data('zcanvas')  // NO I18N
        return parentdata;
    },
    getParentEditor: function(element ){
        var $parent = element.parent('.zcanvas-editor'); // NO I18N
        if(!$parent.length){
            $parent = element.parent('.zcanvas-editor-outer'); // NO I18N
        }

        return $parent;
    },
    getClosestEditor: function(element){
        var $editor = element.closest('.zcanvas-editor:not(.zclayout)'); // NO I18N
        if(!$editor.length){
            $editor = element.closest('.zcanvas-editor-outer'); // NO I18N
        }
        return $editor;
    },
    getParentStyles: function(e){
        var editor = zutils.getParentEditor(e);
        return {ui: {value : { style : jsonCreation.getstyles(editor) }}};
    },
    // FIXME: simplify logic
    getdatabyelement: function(element){
        if(element.is('.zcanvas-editor-outer')){ // NO I18N
            return element.data('zcanvas'); // NO I18N
        }else if(element.is('.zcanvas-editor')){ // NO I18N
            return element.data('zcanvas'); // NO I18N
        }
    },
    getClosefield: function(element){
        if(element){
            if(element.classList.contains('zcanvas-field')){
                return element;
            }else if(element.classList.contains('zcanvas-data-node')){  // NO I18N
                return element.parentElement;
            }else if(element.classList.contains('zcanvas-inner-component')){  // NO I18N
                return element.parentElement.parentElement;
            }
        }
        return;
    },
    getSelectorByElement: function(element){  
        if(element.hasClass('zcanvas-field')){
            var datanode = element[0].querySelector('.zcanvas-data-node'); // NO I18N
            var zid = datanode ? datanode.getAttribute('data-zcanvasid') : undefined; // NO I18N
            return '.zcanvas-field.' + zid;  // NO I18N
        } 
       // var closefield = element.closest('.zcanvas-field'); // NO I18N
       var closefield = zutils.getClosefield(element[0]);
        if(closefield){ // NO I18N
            var datanode = closefield.querySelector('.zcanvas-data-node'); // NO I18N
            var zid = datanode ? datanode.getAttribute('data-zcanvasid') : undefined; // NO I18N
            if(element.hasClass('zcanvas-holder')){
                return '.' + zid + ' .zcanvas-holder'; // NO I18N
            }else if(element.hasClass('zcanvas-label')){ // NO I18N
                return  '.' + zid + ' .zcanvas-label'; // NO I18N
            }else if(element.hasClass('zcanvas-value-container')){ // NO I18N
                return  '.' + zid + ' .zcanvas-value-container'; // NO I18N
            }
        }else if( element.hasClass('zcanvas-editor') || element.hasClass('zcanvas-static-editor') || element.hasClass('zclayout') || element.hasClass('zcanvas-editor-outer') || element.hasClass('zcanvas-row') || element.hasClass('zcanvas-row-seperator') || element.hasClass('zcanvas-seperator')){ // NO I18N
            return '#' + element.attr('id');
        }
    },
    getElementBySelector: function(selector){
        if(selector.indexOf(':parent()') > -1){
            selector.replace(':parent()' , '');
            return $(selector).parent();
        }
        return $(selector);
    },
    objectEquals: function objectEquals(obj1, obj2) {
        for (var i in obj1) {
            if (obj1.hasOwnProperty(i)) {
                if (!obj2.hasOwnProperty(i)) {return false};
                if (obj1[i] !== obj2[i]) {return false};
            }
        }
        for (var i in obj2) {
            if (obj2.hasOwnProperty(i)) {
                if (!obj1.hasOwnProperty(i)) {return false};
                if (obj1[i] !== obj2[i]) {return false};
            }
        }
        return true;
    },
    getadjustpadding: function(style){
        var result = { paddingLeft: 0 , paddingTop: 0 };
        if(style.padding){
            result.paddingLeft = result.paddingTop = parseInt( style.padding || 0 )
        }
        if(style['padding-left']){
            result.paddingLeft = parseInt( style['padding-left'] || 0 ); // NO I18N
        }
        if(style['padding-top']){
            result.paddingTop = parseInt( style['padding-top'] || 0 ); // NO I18N
        }
        return result;
    },
    blinkelement : function(el , config){
        $('.zc-blink-bg').removeClass('zc-blink-bg'); // NO I18N
        el.addClass('zc-blink-bg');
        var duration = 1000;
        if(config && config.time){
            duration = config.time;
        }
        setTimeout(function(){
            el.removeClass('zc-blink-bg');
        },duration);
    },
    getOverlappedNodes: function(el){
        var $parent = zutils.getParentEditor(el);
        var othernode = $parent.children('.zcanvas').not(el); // NO I18N

        var sourcedim = el.offset();
        sourcedim.width = el.outerWidth();
        sourcedim.height = el.outerHeight();

        return canvasObjUtils._.filter( othernode , function(d) { 
            var nodedim = $(d).offset();
            nodedim.width = $(d).outerWidth();
            nodedim.height = $(d).outerHeight();
            return zutils.isInterceptedByPosition(sourcedim , nodedim);
        })

    },
    overlapHandling: function(el , ref){
        var overlapnodes = zutils.getOverlappedNodes(el);
        var undoredoobj = {action: 'link' , node: ref.node , actionarray: [ zutils.zcopyobj(ref) ]};
        var newindex = 1;
        var overlapindex = 1;
        if(overlapnodes && overlapnodes.length){
            var overlapelength = overlapindex = overlapnodes.length;
            overlapnodes = canvasObjUtils._.sortBy(overlapnodes , function(d){ return d.style.zIndex; })
            for(var i = 0 ; i < overlapelength ; i ++){
                var $node = $(overlapnodes[i])
                var currentindex = i;
                var $currentnodeindex = $node[0].style.zIndex; //NO I18N
                if(parseInt($currentnodeindex) > 1){
                    var secondlab = zutils.getOverlappedNodes($node);
                    if(secondlab && secondlab.length){
                        currentindex = parseInt($currentnodeindex);
                        overlapindex = currentindex > overlapindex ? currentindex : overlapindex;
                        continue;
                    }
                }
                
                $node.css('z-index',currentindex + 1); // NO I18N
                var undoobj = {
                    action: 'cssaction', node: zutils.getSelectorByElement($node) , previous: {'z-index': $currentnodeindex} , current:  {'z-index': currentindex + 1} // NO I18N
                }
                undoredoobj.actionarray.push(undoobj);
            }
            var undoobj = {
                action: 'cssaction', node: zutils.getSelectorByElement(el) , previous: {'z-index': el[0].style.zIndex} , current:  {'z-index':  overlapnodes.length + 1} // NO I18N
            }
            undoredoobj.actionarray.push(undoobj);
            el.css('z-index', overlapindex + 1); // NO I18N
            ref.action = 'link'; // NO I18N
            ref.actionarray = undoredoobj.actionarray;
            newindex = overlapindex + 1;
           // zutils.reinitarrange(el);
        }else if(el && el[0] && el[0].style.zIndex !== '1'){
                var undoredoobj = {action: 'link' , node: ref.node , actionarray: [ zutils.zcopyobj(ref) ]};
                var undoobj = {
                    action: 'cssaction', node: zutils.getSelectorByElement(el) , previous: {'z-index': el[0].style.zIndex} , current:  {'z-index': 1} // NO I18N
                }
                undoredoobj.actionarray.push(undoobj);
                ref.action = 'link'; // NO I18N
                ref.actionarray = undoredoobj.actionarray;
                el.css('z-index',1); // NO I18N
        }
            zutils.reinitarrange(el);
        $('.zcanvas-editor-outer').data('zcanvas').config.toolsRef.availabletools.depthbackward.populate( null ,{'z-index': newindex} , el , overlapnodes); // NO I18N
    },
    adjustoverlap: function(el , ref , index){
        var undoredoobj = {action: 'link' , node: ref.node , actionarray: [ zutils.zcopyobj(ref) ]};
        var overlapnodes = canvasObjUtils._.sortBy( zutils.getOverlappedNodes(el) || [] , function(d){  return d.style.zIndex; } );
        overlapnodes.splice(index - 1 , 0 , el[0]);
        var overlaplen = overlapnodes.length;
        for(var i = 0 ; i < overlaplen ; i++){
            var $overnode = $(overlapnodes[i]);
            if(!$overnode.is(el)){
                var undoobj = {
                    action: 'cssaction', node: zutils.getSelectorByElement($overnode) , previous: {'z-index': $overnode[0].style.zIndex} , current:  {'z-index': i + 1} // NO I18N
                }
                undoredoobj.actionarray.push(undoobj);
            }
            $overnode.css('z-index' , i + 1); // NO I18N
        }
        ref.action = 'link';
        ref.actionarray = undoredoobj.actionarray;
    },
    changelayoutscope: function(editorInstance , layout , flag){
        if(editorInstance.config && editorInstance.config.zclayoutcontainer){
            var zdata = $(editorInstance.config.zclayoutcontainer).data('zcanvasMenu'); // NO I18N
            if(zdata){
                var drg = zdata.getElementByKey('layoutname' , layout); // NO I18N
                if(drg && drg.length){
                    var zidata = drg.data('zcanvas'); // NO I18N
                    !flag ? zdata.addElement(zidata) : zdata.reduceScope(zidata);
                    if(!flag){
                    	editorInstance.config && editorInstance.config.toolsRef && editorInstance.config.toolsRef.selectfield(editorInstance.container);
                    }
                }
            }
        }
    },
    reinitarrange: function(node){
        if(node && (node.hasClass('ui-droppable') || node.hasClass('zclayout-table') || node.hasClass('zctablayout'))){ // NO I18N
            var dinst = node.data('uiDroppable'); // NO I18N
            if(dinst){
                dinst._updatedepth();
            }else{
                dinst = $('.zcanvas-editor-outer').data('uiDroppable'); // NO I18N
            }
            dinst && dinst._rearrangescopes(dinst.options.scope || 'default'); // NO I18N
        }
    },
    pauseScoping: function(flag){
    	var menu = '#zcanvas_menu'; // NO I18N
    	if(zcanvasrelatedList && zcanvasrelatedList.currentmenu && zcanvasrelatedList.currentmenu.opened){
    		menu = zcanvasrelatedList.currentmenu.opened;
    	}
    	var insert = menu + '_insert'; // NO I18N
    	var inst = $(menu).data('zcanvasMenu'); // NO I18N
    	inst && inst.pause(flag);
    	var iinst = $(insert).data('zcanvasMenu'); // NO I18N
    	iinst && iinst.pause(flag);
    },
    throttle: function(fn, delay) {
	  zutils.timeout = null;

	  return function throttledFn() {
	    window.clearTimeout(zutils.timeout);
	    var ctx = this;
	    var args = Array.prototype.slice.call(arguments);// eslint-disable-line zstandard/no-reserved-words
	    zutils.timeout = window.setTimeout(function callThrottledFn() {
	      fn.apply(ctx, args);
	    }, delay);
	  }
    },
    destroyevents: function(){
		// eslint-disable-next-line zstandard/no-body-events
		$(document).off('keydown.zcanvaskey'); // NO I18N
	},
    getBorderWidth: function(value){
        if(value){
            var split = value.split(' '); // NO I18N
            return parseInt(split[0] || 0);
        }
        return 0;
    },
    getBorderProperties : function(json){
        var result = {
            'border-left-width' : 0, // NO I18N
            'border-right-width' : 0, // NO I18N
            'border-top-width' : 0, // NO I18N
            'border-bottom-width' : 0 // NO I18N
        }
        if(json){
            if(json.border){
                var borderwidth = zutils.getBorderWidth(json.border);
                result['border-top-width'] = result['border-bottom-width'] = result['border-left-width'] = result['border-right-width'] = borderwidth; // NO I18N
            }else{
                result['border-top-width'] = zutils.getBorderWidth(json['border-top']); // NO I18N
                result['border-left-width'] = zutils.getBorderWidth(json['border-left']); // NO I18N
                result['border-bottom-width'] = zutils.getBorderWidth(json['border-bottom']); // NO I18N
                result['border-right-width'] = zutils.getBorderWidth(json['border-right']); // NO I18N
            }
        }
        return result;
    },
    getSpacingProperties: function(key , json){
        var result = {};
        result[ key + '-top' ] = 0; // NO I18N
        result[ key + '-right'] = 0; // NO I18N
        result[ key + '-left'] = 0; // NO I18N
        result[ key + '-bottom'] = 0; // NO I18N

        if(json){
            if(json[key]){
                result[ key + '-top' ] = result[ key + '-right'] =  result[ key + '-left'] = result[ key + '-bottom'] = parseInt(json[key] || 0); // NO I18N
            }else{
                result[ key + '-top' ] = parseInt( json[ key + '-top' ] || 0); // NO I18N
                result[ key + '-right'] = parseInt( json[ key + '-right' ] || 0); // NO I18N
                result[ key + '-left'] = parseInt( json[ key + '-left' ] || 0); // NO I18N
                result[ key + '-bottom'] = parseInt( json[ key + '-bottom' ] || 0); // NO I18N
            }
        }
        return result;
    }
}
;(function(){
    var zcanvasdefaults = {
        templates: {
            label:  '<span class="zcanvas zcanvas-holder zcanvas-data-node" data-zcanvasclass="" data-zcanvasid="${data.zcanvasId}">' + 
                    '<span class="zcanvas zcanvas-label zcanvas-inner-component" data-zcanvasclass="">${data.zclabel} </span>' + 
                    '<span class="zcanvas zcanvas-value-container zcanvas-inner-component" data-zcanvasclass="">${data.zcvalue}</span>' + 
                    '</span>',
            hiddenlabel: '<span class="zcanvas zcanvas-value-container zcanvas-inner-component zcanvas-data-node" data-zcanvasid="${data.zcanvasId}" data-zcanvasclass="">${data.zcvalue}</span>' ,
    
            editorNode: '<div class="zcanvas-workspace" id="zcanvas-workspace"></div>',
    
            menuNode: '<div class="zcanvas-menu-container" id="zcanvas-menu-container"></div>',
    
            toolNode: '<div class="zcanvas-tool-container" id="zcanvas-tool-container"></div>'
        }
    }
    window.zcanvasdefaults = zcanvasdefaults;
})();
;(function(){
    var zcanvasrelatedList = {
        renderrelatedList: function(data, template, evt, uioffset,config,style,zid, title, noselection , rendercallback){
            data = zutils.zcopyobjExternal ? zutils.zcopyobjExternal(data) : zutils.zcopyobj(data);
            var error = data.exception;
            var self_ = this;
            var editorcontainer = self_.container;
            var innertemplate = $('<div class="zcanvas-relatedlist-container"></div>');
            var outertemplate = $('<div class="zcanvas zcanvas-static-editor" data-zcanvasclass="zc-list-component"></div>');
            var settingstemplate = $('<div class="zcanvas-settings"></div>');
            var outercontainer = self_.container.is('.zcanvas-editor-outer') ? self_.container : self_.container.parents('.zcanvas-editor-outer'); // NO I18N
            var outinstance = outercontainer.data('zcanvas'); // NO I18N
            
            if(error){
            	outertemplate.append('<div class="zc-disabled-menu zcanvas zcnopermissiondiv"><div class="zcnopermission">' + I18n.getMsg('crm.canvas.component.permission.denied') + '</div></div>');
            	outertemplate.addClass('zcnoaction');
            }
           
            !error && outertemplate.append(innertemplate);
            //innertemplate.append(template);
            editorcontainer.append(outertemplate);
            var scopeid = self_.prepareRelatedList(outertemplate,data,zid);
            // eslint-disable-next-line jQuery-chaining
            outertemplate.data('zcanvas',data); // NO I18N
            
            // eslint-disable-next-line jQuery-chaining
            !error && outertemplate.append(settingstemplate);
         //   var $titleedit = $('<div class="zcanvas-title zcanvas zcanvas-selectable" data-zcanvastooltype="title">' + data.zclabel + '</div>');
         //   $titleedit.insertBefore(innertemplate);
            !error &&  self_.createtitle(data, innertemplate,outinstance, title, scopeid);
            outertemplate.click(function(e){
                config && config.toolsRef && config.toolsRef.selectfield(e);
            }).mouseover(function(e){
                config && config.toolsRef && config.toolsRef.hoverfield(e, true);
            }).mouseout(function(e){
                config && config.toolsRef && config.toolsRef.hoverfield(e);
            });
            // $titleedit.click(function(e){
            //     config && config.toolsRef && 
            //     config.undoredomanager && config.toolsRef.selectfield(e,config.undoredomanager,config);
            // });
            zutils.menuSearchClear();
            if(this.config.onBeforeChange){
                this.config.onBeforeChange('new', template); // NO I18N
            }
            if(style && style._locked_ === 'true'){
                this.config.lockhandler && this.config.lockhandler(null , outertemplate , true);
            }
            !error && self_.createeditors(outertemplate,config,scopeid, noselection);
            // eslint-disable-next-line jQuery-chaining
            noselection || outertemplate.click();
            if(evt && uioffset){
                var posel = evt.target ? evt.target : evt;
                var targetpos = zutils.findpositionAndWidth(posel, uioffset, editorcontainer, outertemplate, true);
                outertemplate.css({
                    position: 'absolute', // NO I18N
                    left: targetpos.leftpos,
                    top: targetpos.toppos
                });
                var targetwidth = zutils.findpositionAndWidth(posel, uioffset, editorcontainer, outertemplate, false);
                // eslint-disable-next-line zstandard/combine-properties
                outertemplate.css('width',targetwidth.targetwidth); // NO I18N
            }else{
                outertemplate.css(style);
            }
            self_.initgallery(settingstemplate , outertemplate , innertemplate , data, config);
            // !zid && outinstance.resetheight();
            if(this.config.onChange){
                this.config.onChange('new', outertemplate); // NO I18N
            }
            if(rendercallback && typeof rendercallback === 'function'){
                rendercallback(outertemplate);
            }else if(outertemplate.parent().hasClass('zcanvas-restricted-drop')){ // NO I18N
                var inst = zutils.getParentData(outertemplate);
                if(inst && inst.container && inst.container.hasClass('zcanvas-restricted-drop')){
                    var elt = inst.container;
                    var zcopeid = elt.attr('id'); // NO I18N
                    elt.droppable('option','scope',zcopeid); // NO I18N
                    outertemplate.draggable('option','scope',zcopeid); // NO I18N
                }
            }
            if(!zid){
                self_.newstaticeditor(outertemplate);
            }
            
            return outertemplate;
        },
        initgallery: function(settingstemplate , outertemplate , innertemplate , data, config){
        	var self_ = this;
        	 // Gallery Selection
            var formgallery = function(gallery){
                if(!gallery){
                    return;
                }
                var galtemp = '<div class="relatedgallery"><span class="relatedprevgallery zcanvas-tool-disable" data-zcqa="canvas-detail-prev-template"><</span>';
                
                var keys = canvasObjUtils._.keys(gallery);
                var gallen =  keys.length;
                var galname = keys[0];
                var galindex = 0;
                var getnonedit = function(){
                    for(var j = 0 ; j < gallen ; j++){
                        if(gallery[keys[j]].userdefined){
                            delete gallery[keys[j]];
                            continue;
                        }
                        if(gallery[keys[j]].noneditable  ){
                            galname = keys[j];
                            galindex = j;
                        }
                    }
                }
                for(var i = 0 ; i < gallen ; i++){
                    if(gallery[keys[i]].userdefined){
                        galname = keys[i];
                        galindex = -1;
                        if(gallery[keys[i]].noneditable){
                            getnonedit();
                            break;
                        }
                    }
                }
                 galtemp += '<span class="relatedgalname" data-index="' + galindex + '">' + galname + '</span>';
                 galtemp += '<span class="relatednextgallery" data-zcqa="canvas-detail-next-template">></span><div>';
                 var $gallery = $(galtemp);
                 return $gallery;
            }
            var gallerynav = function(type, gallery, event){
                 var namefield = this.find('.relatedgalname');
                 var currentindex = parseInt( namefield.attr('data-index') ); // NO I18N
                 gallery = data.gallery;
                 var keys = canvasObjUtils._.keys(gallery);
                 if(type === 'next' && keys.length - 1 > currentindex){ // NO I18N
                     currentindex++;
                 }else if(type === 'prev' &&  currentindex > 0){ // NO I18N
                     currentindex--;
                 }else{
                     return;
                 }
                 var prevel = this.find('.relatedprevgallery'); // NO I18N
                 if(currentindex < 1){
                    prevel.addClass('zcanvas-tool-disable'); // NO I18N
                 }else{
                    prevel.removeClass('zcanvas-tool-disable'); // NO I18N
                 }

                 var nextel = this.find('.relatednextgallery'); // NO I18N
                 if(currentindex  >= keys.length - 1){
                    nextel.addClass('zcanvas-tool-disable'); // NO I18N
                 }else{
                    nextel.removeClass('zcanvas-tool-disable'); // NO I18N
                 }
                 namefield.attr('data-index',currentindex); // NO I18N
                 namefield.html(keys[currentindex]);
                 innertemplate.removeClass('zc-rl-sub-selectable'); // NO I18N
                 data.data = zutils.zcopyobj(gallery[keys[currentindex]].data);
                 data.template = gallery[keys[currentindex]].template;
                 self_.cleareditors(innertemplate);
                 self_.createeditors(outertemplate,config);
                 if(gallery[keys[currentindex]].noneditable){
                     innertemplate.addClass('zc-noneditable-rl');

                 }else{
                     innertemplate.removeClass('zc-noneditable-rl');
                     delete data.template;
                 }

                 if(gallery[keys[currentindex]].card){
                    self_.changelisttype(outertemplate , null , true);
                 }

                 if(gallery[keys[currentindex]].noneditable){
                     innertemplate.click();
                 }else{
                    // innertemplate.parent().click();
                    self_.config && self_.config.toolsRef && self_.config.toolsRef.selectfield(innertemplate.parent() , null ,true);
                 }
                 event.stopPropagation();
                 
                 if(!zcanvasrelatedList.galleryrestrict){
                	 self_.savecanvasaction('#' , null ,null ,null ,null ,null ,{
                		 action: 'callback', // NO I18N
                		 node: '#' + this.closest('.zcanvas-static-editor').attr('id'), // NO I18N
                		 type: type,
                		 callback: function(data , method , node){
                			 var settingsel = node.find('.relatedgallery'); // NO I118N
                			 var prevel = settingsel.find('.relatedprevgallery'); // NO I18N
                			 var nexel = settingsel.find('.relatednextgallery'); // NO I18N
                			 zcanvasrelatedList.galleryrestrict = true;
                			 if(method === 'undo'){
                				 if(type === 'prev'){  // NO I18N
                					 nexel.click();
                				 }else{
                					 prevel.click();
                				 }
                			 }else if(type === 'prev'){ // NO I18N
                					 prevel.click();
                				 }else{
                					 nexel.click();
                				 }
                			 zcanvasrelatedList.galleryrestrict = false;
                		 }
                	 }) 
                 }
             }
            settingstemplate.prepend(formgallery(data.gallery));
            settingstemplate.find('.relatedprevgallery').click(gallerynav.bind(settingstemplate,'prev',data.gallery));
            settingstemplate.find('.relatednextgallery').click(gallerynav.bind(settingstemplate,'next',data.gallery));
        },
        recompiletemplate: function(json){
        	json.zcanvasId = zutils.getRandomId();
        	var updatechild = function(child){
                if(!child){
                    child = [];
                }
        		var clen = child.length;
        		for(var i = 0 ; i < clen ; i++){
        			child[i].zcanvasId = zutils.getRandomId();
        			updatechild(child[i].children);
        		}
        	}
        	updatechild(json.children);
        	return json;
        },
        applygallery: function(element , name , customremove){
        	var data = element.data('zcanvas'); // NO I18N
        	if(data && data.gallery && data.gallery[name]){
        		if(data.gallery['Designed Component'] && customremove){ // NO I18N
        			delete data.gallery['Designed Component']; 
        		}
        		var keys = canvasObjUtils._.keys(data.gallery);
        		var setting = element.find('.zcanvas-settings'); 
        		var namefield = setting.find('.relatedgalname');
        		var index = keys.indexOf(name);
        		if(index === 0){
        			setting.find('.relatedprevgallery').addClass('zcanvas-tool-disable'); // NO I18N
        		}
        		namefield.html(name).attr('data-index',index); // NO I18N
        	}
        },
        updategallery: function(element , data , json , template){
        	var settinsel = element.find('.zcanvas-settings'); // NO I18N
        	var namefield = settinsel.find('.relatedgalname'); // NO I18N
        	var prevgal = settinsel.find('.relatedprevgallery'); // NO I18N
            var currentindex = parseInt( namefield.attr('data-index') ); // NO I18N
        	var gal = data.gallery || {};
        	var galkeys = canvasObjUtils._.keys(gal);
        	var gallen = galkeys.length;
        	var newgal = {};
        	var getparenttemplate = function(gall , parent){
        		var tgal = [];
        		for(var k in gall){
        			var kobj = gall[k];
        			if(kobj && kobj.parent && kobj.parent === parent){
        				tgal.push(kobj);
        			}
        		}
        		return tgal;
        	}
        	for(var i = 0 ; i < gallen ; i++){
        		newgal[galkeys[i]] = gal[galkeys[i]];
        		if(i === currentindex){
        		 if(!gal[galkeys[i]].usergallery){
        			var availparents = getparenttemplate(gal ,galkeys[i]);
        			var newgalname = 'Custom ' + galkeys[i] + ' ' + availparents.length; // NO I18N
        			
        			newgal[newgalname] = { // NO I18N
        					data: zutils.zcopyobjExternal ? zutils.zcopyobjExternal(json) : zutils.zcopyobj(json),
        					template: template,
        					usergallery: true,
        					parent: galkeys[i]
        			}
        			
        			namefield.attr('data-index',i + 1); // NO I18N
        			
        			namefield.html(newgalname); // NO I18N
        			
        			prevgal.removeClass('zcanvas-tool-disable'); // NO I18N
        			
        			newgal[galkeys[i]].data = zcanvasrelatedList.recompiletemplate(newgal[galkeys[i]].data);
        			
        		}else {
                    newgal[galkeys[i]].data = zutils.zcopyobjExternal ? zutils.zcopyobjExternal(json) : zutils.zcopyobj(json);
                    newgal[galkeys[i]].template = template;
        		}
        	}
        	}
        	data.gallery = newgal;
        },
        createtitle: function(data, parent, instance, json, scopeid){
            var newid = zutils.getRandomId();
            var $el = $("<div />");//NO I18N
            $el.addClass("editor zcanvas-editor zcanvas zcanvas-title-editor").attr('id', newid).zaddClass('zcanvas-title-editor'); // NO I18N

            var mainconfig =  zutils.zcopyobj(instance.config);
            mainconfig.draggable = false;
            mainconfig.editorcontainer = '#' + newid;
            mainconfig.staticelement = false;
            mainconfig.restrictresize = false;
            mainconfig.zdragcontainment = "parent"; // NO I18N
            mainconfig.zcdropscope = scopeid;
            mainconfig.isPage = false;
            mainconfig.zclayoutcontainer = null;
            mainconfig.onChange = function(action,node){
                if(action === 'new'){
                    $(node).draggable('option','containment','parent');
                    $(node).draggable('option','scope',scopeid);
                }
                if(node && node.hasClass && node.hasClass('zclayout')){ // NO I18N
                	zcanvasrelatedList.reducelayoutscope(node.closest('.zcanvas-static-editor')); // NO I18N
                }
            }
            $el.attr('id',newid).css('background-color','transparent'); // NO I18N
           // mainconfig.acceptWidgets = '.zcstaticicon';
           if(mainconfig.acceptWidgets){
                mainconfig.acceptWidgets += ':not(.zc-rl-fieldsection)'; // NO I18N
            }
            $el.zcanvas(mainconfig);
            // eslint-disable-next-line jQuery-chaining
            $el.insertBefore(parent);
            var titledata;
            if(!json){
                titledata = {"children":[],"ui":{"value":{"position":{"startX":10,"startY":11,"endX":174,"width":164,"height":27},"style":{ "default": {"background-color":"transparent"} },"value":"Some Title"}},"_type":"component","theme":"Static Text"}; // NO I18N
                titledata.ui.value.value = data.zclabel;
                titledata.ui.value.class = 'zc_disabled'; // NO I18N
                titledata.zcanvasId = zutils.getRandomId();
                titledata = [titledata]; 
                if(data.actions && data.actions.length){
                    //var btndata = {"datatype":"button","_type":"action","ui":{"value":{"style":{"default":{"background-color":"rgba(255, 255, 255, 0)","font-size":"18px","padding-top":"0px","padding-bottom":"0px","padding-left":"0px","padding-right":"0px"}},"position":{"startX":1214,"startY":12,"endX":1319,"width":105,"height":25},"class":"zcanvas-field zcanvas-no-img-default zc-ta-center zccbutton zccrlaction zc-rl-field zccbuttonicon zccbuttonnotext"},"holder":{"style":{},"class":""},"field":{"style":{},"class":""},"icon":{"style":{},"class":"","icon":"icon-Icon_plus"}},"children":[]}; // NO I18N
                	var btndata = {"datatype":"button","_type":"action","ui":{"value":{"style":{"default":{"background-color":"rgba(255,255,255,0)","border-radius":"4px","border": "1px solid rgba(236, 236, 238,1)","font-size":"14px","padding-top":"4px","padding-bottom":"4px","padding-left":"0px","padding-right":"0px"}},"position":{"startX":1214,"startY":12,"endX":1319,"width":54,"height":25},"class":"zcanvas-field zcanvas-no-img-default zc-ta-center zccbutton zccrlaction zc-rl-field zccbuttonicon zccbuttonnotext"},"holder":{"style":{},"class":""},"field":{"style":{},"class":""},"icon":{"style":{"default" : {"color": "rgba(39, 38, 58, 1)"}},"class":"","icon":"icon-Icon_plus"}},"children":[]}; // NO I18N
                    var actions = {};
                    if(data.actions.length > 2){
                        actions = canvasObjUtils._.filter(data.actions , function(item){ return item.id.indexOf('moreRLAction') > -1 ;  });
                        actions = actions[0];
                        btndata.ui.icon.icon = 'icon-Icon_dot_three'; // NO I18N
                        btndata.ui.value.class += ' zc-only-icon'; // NO I18N
                    }else{
                        actions = data.actions[0];
                    }
                    canvasObjUtils._.extend(btndata , actions);
                    btndata.zcanvasId = zutils.getRandomId();
                    btndata.zcvalue = actions.value;
                    btndata.zclabel = actions.label;
                    btndata.zctype = btndata.datatype;
                    titledata.push(btndata);
                }
                
            }else{
                titledata = json.children;
                $el.css({width: json.ui.value.position.width , height: json.ui.value.position.height});
                $el.zccss(json.ui.value.style);
                $el.addClass(json.ui.value.class);
            }
            var titleinst = $el.data('zcanvas'); // NO I18N
            titleinst.addElement(titledata);
            var $titledrags = $el.find('.ui-draggable')
            $titledrags.draggable('option','containment','parent'); // NO I18N
            $titledrags.draggable('option','scope',scopeid); // NO I18N
            if(!json){
                $el.find('.zccbutton').css({'left':'initial' , 'right':'10px'}).addClass('zcanvas-temp-cancel'); // NO I18N
            }
        },
        createeditors: function(element,config,scopeid,noselection){
            var data = element.data('zcanvas'); // NO I18N
            var innercontainer = element.find('.zcanvas-relatedlist-container');
            if(!scopeid){
                scopeid = element.attr('id'); // NO I18N
            }
            var metadata = {};
            if(data.data && data.data.meta){
            	metadata = zutils.zcopyobj2(data.data.meta);
            	delete data.data.meta;
            }
            if(canvasObjUtils._.isEmpty(data.data)){
                // FIXME: relatedlistcomp class should be added from config
                data.template = '<div class="zc-replaceclass zc-rl-outcontainer relatedlistcomp">' + data.template + '</div>';
                innercontainer.html(data.template);
                innercontainer.addClass('zc-noneditable-rl');
                config && config.statictypecallback && config.statictypecallback(element,config);
                config && config.afterrelatedlistplace && config.afterrelatedlistplace(data , element);
                if(data && data.contextstyles){
                   var zid = scopeid;
                   var $st = zcanvasrelatedList.getStyleElement(data.contextstyles , zid);
                   element.append($st);
                }
               !noselection && setTimeout(function(){
                    var context = $('#' + this.contextid);
                    zutils.invokeResize(context);
                }.bind({contextid: scopeid}),1000)
                zcanvasrelatedList.refilltemplates(element ,{meta: metadata});

                return;
            }else if(data && data.data && data.data.theme === 'LazyLoad Component') { // NO I18N
               config && config.lazyloadeditor && config.lazyloadeditor(element , innercontainer , data);
                return;
            }
            var listwidth = '100%'; // NO I18N
            var editortemplate = '<div class=" zcanvas zcanvas-editor zcanvas-non-delete" data-zcanvasclass="zcanvas-non-delete"></div>';
            var $parent = element.parent('.zcanvas-editor-outer'); // NO I18N
            var outercontainer = $parent.is('.zcanvas-editor-outer') ? $parent : element.parents('.zcanvas-editor-outer'); // NO I18N
            var cloneconfig = canvasObjUtils._.clone(outercontainer.data('zcanvas').config); // NO I18N
          
            var onBeforeChangeHandler = function(action , node){
                if(action === 'new' &&  (node.hasClass('zctextarea') || node.hasClass('zcfilefield') || node.hasClass('zcimagefield') )){
                    var uioffset = node.offset();
                    var inst = zutils.getParentData(node);
                    var tpos = zutils.findpositionAndWidth( inst.container , uioffset , inst.container , node , false);
                    node.css({'width':  tpos.targetwidth > 400 ? 400 : tpos.targetwidth}); // NO I18N
                }
            }
            var changehandler = function(action, node){
                
                if(config && config.relatedlistdata){ 
                    var currenteditor = $(this.editorcontainer || this.config.editorcontainer);
                    if(!innercontainer.is(':visible')){
                        innercontainer = currenteditor.parent('.zcanvas-relatedlist-container'); // NO I18N
                    }
                    var othereditors = innercontainer.children('.zcanvas-editor').not(currenteditor); // NO I18N
                    if(action === 'changefield'){
                        var newrecord = zutils.zcopyobj(data.rellistdata);
                        var $container = node.is('.zcanvas-value-container') ? node : node.find('.zcanvas-value-container'); // NO I18N
                        var currentindex = parseInt(currenteditor.attr('zcanvas-rl-index')); // NO I18N
                        var ddata = node.zdata()[0]; 
                        var newvalue = config.relatedlistmenu(ddata.id,data,newrecord[currentindex]);
                        $container.html(newvalue);
                    }else if(action === 'converttable'){ // NO I18N
                        assignconfig.bind(this)(currenteditor);
                    }
                    if(node && node.hasClass && node.hasClass('zclayout')){ // NO I18N
                    	zcanvasrelatedList.reducelayoutscope(element);
                    }
                    var tempjson = currenteditor.data('zctempjson'); // NO I18N
                    var json = {};
                    if(tempjson){
                        json = tempjson;
                    }else{
                        json = canvasOutput.createJson(currenteditor);
                    }
                    currenteditor.removeData('zctempjson');// NO I18N
                    if(innercontainer.hasClass('zc-rl-cards')){
                        json.ui.value.listtypeclass = 'zc-rl-cards'; // NO I18N
                    }else if(json.ui.value.listtypeclass){
                        delete json.ui.value.listtypeclass;
                   }
                    data.data = json;
                    data.template = undefined;// config.relatedlistcompile(json,data,true);
                    if(data.gallery){
                    	zcanvasrelatedList.updategallery(element , data , json , data.template);
                    }
                    if(json.ui.value.listtypeclass === 'zc-rl-cards' && data.template){
                       data.template = data.template.replace('zc-replaceclass','zc-rl-cards');
                       data.template = $(data.template);
                     //   data.template = $('<div class="zc-rl-cards">' + data.template + '</div>'); // NO I18N
                        data.template.children('.zcanvassection').each(function(){ // NO I18N
                            // eslint-disable-next-line  webperf/layout-thrashing
                            $(this).width(json.ui.value.listtypewidth || json.ui.value.position.width);
                        })
                    }
                    // FIXME: Create editors with maintained zcanvasId
                  //  jsonCreation.styleAttribute().map( function(i) { othereditors.css(i , '') } );
                    othereditors.zccss(json.ui.value.style);
                    othereditors.addClass(json.ui.value.class).zaddClass(json.ui.value.class);
                    othereditors.each(function(){
                        var $this = $(this);
                        var $contheight = '100%'; // NO I18N
                        if(json && json.ui && json.ui.value && json.ui.value.listtypeclass){
                            $contheight = json.ui.value.position.width;
                        }
                        var index = parseInt($this.attr('zcanvas-rl-index')); // NO I18N
                        var ljson = config.relatedlistdata(json , zutils.zcopyobj(data), zutils.zcopyobj(data.rellistdata[index]) , true );
                         // eslint-disable-next-line  webperf/layout-thrashing
                         $this.css( {'height':json.ui.value.position.height , 'width': !tempjson && $contheight }).find('.zcanvas').zremove(); // NO I18N
                        var inst = $(this).data('zcanvas');
                        inst.addElement(ljson.children);
                        assignconfig.bind(inst)($this);
                        $this.find('.ui-draggable').draggable('option','scope',scopeid); // NO I18n
                    });
                    
                }
            }
            
            var assignconfig = function(element){
                if(element){
                    var tableconfig = {
                        containment: element.attr('id'), // NO I18N
                        onChange: changehandler.bind(this)
                    }
                    var $table = element.find('.zclayout-table'); // NO I18N
                    $table.each(function(){
                        var $el = $(this);
                        $el.data('zclayoutconfig',tableconfig); // NO I18N
                        $el.draggable('option','containment','parent'); // NO I18N
                    })
                }
            }
            var overhandler = function(ui ){
                var ddata = ui.draggable.data('zcanvas'); // NO I18N
                var $editor = $(this.editorcontainer);
                var parenteditor = ui.helper.parents('.zcanvas-non-delete'); // NO I18N
                if(config && config.relatedlistmenu && !parenteditor.length && !parenteditor.is($editor) && ddata.zctype !== 'layout'){  // NO I18N
                    var newrecord = zutils.zcopyobj(data.rellistdata);
                    var currentindex = parseInt($editor.attr('zcanvas-rl-index')); // NO I18N
                    var newvalue = config.relatedlistmenu(ddata.id,data,newrecord[currentindex]);
                    ui.helper.find('.zcanvas-value-container').html(newvalue);
                    if(ddata && ddata.zctype && ddata.zctype.indexOf('profileimage') > -1){
                        var zinst = $editor.data('zcanvas'); // NO I18N
                        zinst && zinst.adjustimagetooriginal(ui.helper);
                    }
                }
            }
            var recordlength = data.rellistdata && data.rellistdata.length || 1;
            for(var i = 0; i < recordlength; i++) {
                if(!data.creatededitors || !data.creatededitors.length){
                    data.creatededitors = [zutils.getRandomId() ,zutils.getRandomId() ,zutils.getRandomId() ];
                }
                var zid = data.creatededitors[i];
                var record = canvasObjUtils._.clone(data.rellistdata[i] || {});
                var $editor = $(editortemplate);
                $editor.attr('zcanvas-rl-index', i).zaddClass('zcanvas-non-delete'); // NO I18N
                var zconfig = canvasObjUtils._.clone(cloneconfig);
                zconfig.editorcontainer = '#' + zid;
                zconfig.staticelement = false;
                zconfig.restrictresize = false;
                zconfig.zdragcontainment = "parent"; // NO I18N
                zconfig.onBeforeChange = onBeforeChangeHandler;
                zconfig.onChange = canvasObjUtils._.debounce(changehandler , 800);// 
                zconfig.onOver = overhandler;
                zconfig.zcdropscope = scopeid;
                zconfig.zclayoutcontainer = null;
                // eslint-disable-next-line zstandard/combine-properties
                $editor.attr('id',zid); // NO I18N
                if(zconfig.acceptWidgets){
                    zconfig.acceptWidgets += ':not(.zccrlaction)'; // NO I18N
                }
                $editor.zcanvas(zconfig);
                innercontainer.append($editor);
                var inst = $editor.data('zcanvas'); // NO I18N
                var newdata = config.relatedlistdata(data.data, data, record, true);
                inst.addElement(newdata.children);
                $editor.css({'width': listwidth, height: newdata.ui.value.position.height}); // NO I18N
                $editor.zccss(newdata.ui.value.style);
                assignconfig.bind(inst)($editor);
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                $editor.find('.ui-draggable').draggable('option','scope',scopeid).draggable('option','containment','parent');; // NO I18n
            }
            if(data.data && data.data.ui && data.data.ui.value && data.data.ui.value.listtypeclass){
                innercontainer.addClass(data.data.ui.value.listtypeclass);
                listwidth = data.data.ui.value.listtypewidth || data.data.ui.value.position.width;
                zcanvasrelatedList.changelisttype(element , listwidth , true);
            }else{
                innercontainer.removeClass('zc-rl-cards');
                zcanvasrelatedList.changetolist(element , listwidth, true);
            }
            config && config.statictypecallback && config.statictypecallback(element,config);
            zcanvasrelatedList.refilltemplates(element , {meta: metadata})
        },
        currentmenu : {
            _default: '',
             opened: ''
        },
        cleareditors: function(innertemplate){
            innertemplate.find('.zcanvas-editor:not(.zclayout)').each(function(){
                var _this = $(this);
                var _selector = '#' +  _this.attr('id');
                jsonCreation.toolinst && jsonCreation.toolinst.deleterule(_selector);

                var customstates = _this.data('zccustomstate'); // NO I18N
                if(customstates){
                    var customstatelen = customstates.length;
                    for(var i = 0 ; i < customstatelen ; i++){
                        var newselector = '.' + customstates[i] + _selector;
                        jsonCreation.toolinst && jsonCreation.toolinst.deleterule(newselector);
                    }
                }

                _this.droppable('destroy').zremove(); // NO I18N
            });
            innertemplate.html('');
        },
        switchmenu: function(element){
            var $rlclosest = element.closest('.zcanvas-static-editor:not(.zc-non-insertable)'); // NO I18N
            var eldata = $rlclosest.data('zcanvas'); // NO I18N
            var isexception = eldata && eldata.exception ? true : false;
            var $nonrl = $rlclosest.children('.zc-noneditable-rl'); // NO I18N
            if(!$nonrl.length){
                $nonrl = $rlclosest.children('.zc-section-element'); // NO I18N
            }
            if($rlclosest.length && !isexception){ // NO I18N
                element = $rlclosest; // NO I18N
                var scopeid = element.attr('id'); // NO I18N
                var data = element.data('zcanvas'); // NO I18N
                var ismenuaccess = true;
                var islayoutaccess = true;
                if(data.openedmenu === zcanvasrelatedList.currentmenu.opened && $(data.openedmenu).length){
                	if(data.menu){
                		if($nonrl.length && !data.restrictedmenu){
                			ismenuaccess = false;
                    		data.restrictedmenu = true;
                		}else if(!data.restrictedmenu){
                			return;
                		}
                	}else{
                		return;
                	}
                }else if(!data.menu || $nonrl.length){
                	ismenuaccess = false;
                }
                
                if(zcanvasrelatedList.currentmenu._default !== zcanvasrelatedList.currentmenu.opened){
                    $(zcanvasrelatedList.currentmenu.opened).remove();
                    $(zcanvasrelatedList.currentmenu.opened + '_insert').zremove();
                    $(zcanvasrelatedList.currentmenu._default).show();
                }

                var menuel = $(data.fieldContainer);
                zcanvasrelatedList.currentmenu._default = data.fieldContainer;
                var newid = zutils.getRandomId();
                var menuconfig = zutils.zcopyobj(menuel.data('zcanvasMenu').config) ; // NO I18N
                
                if(ismenuaccess){
                	data.restrictedmenu = false;
	                menuel.hide('slide',{direction: 'left'},200); // NO I18N
	                menuconfig.fieldContainer = '#' + newid;
	                menuconfig.manualconfig = false;
	                menuconfig.groups = {};
	                menuconfig.groups.field = data.menu ;
	                menuconfig.defaultscope =  1;
	                menuconfig.disablelimit = [{type: 'lookup' , limit: 5}]; // NO I18N
	                menuconfig.defaultclass =  {'button':'zcanvas-no-img-default zc-ta-center zccbutton zccrlaction','profileimage':'zcbdrbox','text-area':'zctextarea','fileupload':'zcfilefield','image':'zcimagefield'}; // NO I18N
	                menuconfig.defaultstyle = {"profileimage":{"width":"45px","height":"45px"}, "text-area":{"height":"40px"},"fileupload":{"height": "50px"},"image":{"height": "50px"}}; // NO I18N
	                menuconfig.formationclassbykey = { key: '_type' , value: 'field' , class: 'zc-rl-fieldsection' }; // NO I18N
	                menuconfig.zmenustart = function(data , ui, event){
	                    var $target = $(event.target)
	                    if(data && data.zctype && data.zctype.indexOf('profileimage') > -1){
	                        var el = ui.helper;
	                        if($target.is('.zcanvas-field')){
	                        	var eldata = $target.draggable('option','scope'); // NO I18N
		                        var scopeeditor = $('#' + eldata + ' .zcanvas-non-delete');
	                        }else if($target.is('.zcanvas-editor')){ // NO I18N
	                        	var scopeeditor = $target;
	                        }
	                        
	                        var height = scopeeditor.height();
	                        if(height){
	                            var newheight = height * 3 / 5;
	                            if(newheight > 120){
	                                newheight = 120;
	                            }
	                            el.css({width: newheight  , height: newheight});
	                            var zinst = scopeeditor && scopeeditor.data('zcanvas'); // NO I18N
	                            zinst && zinst.adjustimagetooriginal(el);
	                        }
	                    }
	
	                    if(data && data.id && data.id.indexOf('moreRLActions') > -1){
	                        $target.addClass('zc-only-icon').zaddClass('zc-only-icon'); // NO I18N
	                    }
	                }
	                if(data.actions){
	                    menuconfig.groups.actions = {data: data.actions};
	                }
	                menuconfig.classforall = 'zc-rl-field'; // NO I18N
	                menuconfig.nosearch = true;
	                menuconfig.zcdropscope = scopeid;
	                var newmenuel = $('<div class="zcanvasmenu menu-container"></div>');
	                newmenuel.attr('id',newid).insertBefore(menuel).zcanvasMenu(menuconfig); // NO I18N
                
                }
                
                if(islayoutaccess){

	                $(data.fieldContainer + '_insert').hide('slide',{direction: 'left'},200); // NO I18N
	                var layoutid = newid + '_insert'; // NO I18N
	                var currentlayout = $(menuconfig.layoutContainer);
	                var layoutconfig = zutils.zcopyobj(currentlayout.data('zcanvasMenu').config) ; // NO I18N
	                layoutconfig.fieldContainer = '#' + layoutid;
	                layoutconfig.zcdropscope = scopeid;
	                layoutconfig.groups = {};
	                layoutconfig.groups.layouts =  {
	                    data : new zclayout('id',['Static Text','Static Icon']) // NO I18N
	                }
	                layoutconfig.defaultscope = 10;
	                var newlayoutel = $('<div class="zcanvasmenu menu-container"></div>');
	                newlayoutel.attr('id',layoutid).insertBefore(currentlayout).zcanvasMenu(layoutconfig); // NO I18N
	                
	                zcanvasrelatedList.reducelayoutscope(element , '#' + newid);
                
                }

                zcanvasrelatedList.currentmenu.opened = '#' + newid;
                data.openedmenu = zcanvasrelatedList.currentmenu.opened;
                var eligibleeditors = element.find('.zcanvas-editor.ui-droppable'); // NO I18N
                var titleeditor = element.find('.zcanvas-title-editor').find('.zcanvas-field'); // NO I18N
                var eligiblesortables = element.find('.zcanvas-editor.zclayout:not(.zcnochange) .zctable-sortable'); // NO I18N
                 eligiblesortables.sortable('option','disabled',false); // NO I18N
                // eligibleeditors.droppable('option','disabled',false); // NO I18N
                eligibleeditors.each(function(){
                    zcanvasrelatedList.updatemenudata($(this), newid);
                })
                eligibleeditors.eq(eligibleeditors.length - 1).find('.zcanvas-field').add(titleeditor).each(function(){
                    var fdata = $(this).data('zcanvas');
                    if(fdata){
                        var menuinst = $(fdata.fieldContainer).data('zcanvasMenu');
                        menuinst && menuinst.reduceScope(fdata);
                    }
                })
                // var othereditors = $('.zcanvas-editor-outer.ui-droppable , .zcanvas-editor.ui-droppable:not(.zcanvas-title-editor)').not(eligibleeditors).not('.zcanvas-editor.ui-droppable:has(.zcanvas-static-editor)'); // NO I18N
                // othereditors.droppable('option','disabled',true); // NO I18N
                 var sortables = $('.zcanvas-editor .ui-sortable').not(eligiblesortables); // NO I18N
                 sortables.sortable('option','disabled',true); // NO I18N

                var configdata = zutils.getParentData(element);
                configdata && configdata.config && configdata.config.onmenuswitch && configdata.config.onmenuswitch('#' + newid , element); // NO I18N
                zutils.menuSearchClear();
            }else if(zcanvasrelatedList.currentmenu._default !== zcanvasrelatedList.currentmenu.opened){
                var menuel = $(zcanvasrelatedList.currentmenu._default);
                menuel.show();
                $(zcanvasrelatedList.currentmenu._default + '_insert').show();
                $(zcanvasrelatedList.currentmenu.opened).zremove();
                $(zcanvasrelatedList.currentmenu.opened + '_insert').zremove();
                zcanvasrelatedList.currentmenu.opened = zcanvasrelatedList.currentmenu._default;
                // var staticeditors = $('.zcanvas-static-editor .zcanvas-editor.ui-droppable:not(.zcanvas-title-editor)');
                 var staticsorts = $('.zcanvas-static-editor .zcanvas-editor .ui-sortable');
                // var alleditors = $('.zcanvas-editor-outer.ui-droppable , .zcanvas-editor.ui-droppable');
                 var sortables = $('.zcanvas-editor .ui-sortable:not(.zctable-disabled)'); // NO I18N
                // staticeditors.droppable('option','disabled',true); // NO I18N
                 staticsorts.sortable('option','disabled',true); // NO I18N
                 sortables.not(staticsorts).sortable('option','disabled',false); // NO I18N
                // alleditors.not(staticeditors).droppable('option','disabled',false); // NO I18N
                zutils.menuSearchClear(true);
            }
        },
        updatemenudata: function(editorel, newid){
            var fields = editorel.find('.zcanvas-field');
            fields.each(function(i,fieldel){
                var $fieldel = $(fieldel);
                var data = $fieldel.data('zcanvas'); // NO I18N
                if(data){
                    data.fieldContainer = '#' + newid; // NO I18N
                    data.group = 'field'; // NO I18N
                    var zdata = $fieldel.zdata();
                    zdata.map(function(item){
                        item.fieldContainer = '#' + newid; // NO I18N
                        item.group = 'field'; // NO I18N
                    })
                }
            })
        },
        prepareRelatedList : function(element,data,zcid){
            
            var self_ = this;
            var zid = zcid || zutils.getRandomId();
            element.attr('id',zid); // NO I18N
            element.zdata(data);

            var stophandler = function(e , ui){
                if(e.shiftKey){
                    return false;
                }
                var outercontainer = self_.container.is('.zcanvas-editor-outer') ? self_.container : self_.container.parents('.zcanvas-editor-outer'); // NO I18N
                var outinstance = outercontainer.data('zcanvas'); // NO i18N
                outinstance && outinstance.resetheight();
                var stid = '#' + ui.helper.attr('id'); // NO I18N
                if(this.method === 'resize'){
                    self_.savecanvasaction(stid,'resize', null , null , null , null , { node: stid ,  action: 'resize' , previous: canvasObjUtils._.extend( ui.originalSize , ui.originalPosition ), current: canvasObjUtils._.extend( ui.size , ui.position)});
                }else if(this.method === 'drag'){ // NO I18N
                    var $helper = ui.helper;
                    if($helper && $helper.hasClass('zcanvas-new-editor')){
                        $helper.removeClass('zcanvas-new-editor');
                        return;
                    }
                    // eslint-disable-next-line webperf/layout-thrashing
                    self_.savecanvasaction(stid,'drag', null , null , null , null , { node: stid ,  action: 'drag' , previous: ui.originalPosition , current: ui.position})
                }
            }
         //   var selector = self_.config.editorcontainer+" > .zcanvas:not('.ui-draggable-dragging')";//NO I18N
          //  var selectorResizing = self_.config.editorcontainer+" > .zcanvas:not('.ui-resizable-resizing')";//NO I18N
            element.draggable({
                containment: self_.config.zccontainment || "parent",  // NO I18N
                zcGuide: true,
                snapTolerance: 5,
                znoposition: true,
                appendGuideTo: self_.config.editorcontainer,
                start: function(e){
                    if(e.shiftKey){
                        return false;
                    }
                },
                drag: function(e){
                    if(e.shiftKey){
                        return false;
                    }
                },
                scroll: false,
                disabled: self_.config.alwaysdisabled,
                stop: stophandler.bind({method: 'drag'})
            });

            element.resizable({
                handles: "e, s, se, w, sw , n , nw , ne",//NO I18N
                zcGuide: true,
                snapTolerance: 5,
                zhandlevisible: true,
                appendGuideTo: self_.config.zccontainment,
                classes: {'ui-resizable-se':'zcanvas-resizable-se'},//No I18N
                containment: "parent", // NO I18N
                zrestricteditor: {
                    sourceselector: '.zcanvas-editor:first > .zcanvas' // NO I18N
                },
                stop: stophandler.bind({method: 'resize'})
            });
            return zid;

        },
        updatereference: function(json){
        	if(json.zcanvasId){
        		json.zcanvasId = zutils.getRandomId();
        	};
        	var chlen = json.children.length;
        	for(var i = 0 ; i < chlen ; i++){
        		// eslint-disable-next-line webperf/no-multipleDOMLookup
        		json.children[i] = zcanvasrelatedList.updatereference(json.children[i]);
        	}
        	return json;
        },
        listhandler: function(data,event,ui,callback,success){
            var self_ = this;
            var container;
            if(data.data){
                if(data.data instanceof Promise){
                    if(ui){
                        var uioffset = ui.offset;
                        var $temp = $('<div/>' , {class: 'zcanvas-loading-component zcanvatstatictemp' , style: 'height:300px'}); // NO I18N
                        self_.container.append($temp);
                        var tpos = zutils.findpositionAndWidth( event.target , uioffset , self_.container , $temp , true)
                        $temp.css({'position': 'absolute' , left: tpos.leftpos , top: tpos.toppos}); // NO I18N
                        var twidth = zutils.findpositionAndWidth( event.target , uioffset , self_.container , $temp , false)
                        // eslint-disable-next-line jQuery-chaining
                        $temp.width(twidth.targetwidth)
                    }
                    

                    data.data.then(function(res){
                        data.data = res.data;
                        data.template = res.template;
                        data.menu = res.menu;
                        data.rellistdata = res.rellistdata;
                        data.module = res.module;
                        data.fieldid = data.menu.data.map(function(item){ return item.id;});
                        data.gallery = res.gallery;
                        data.actions = res.actions;
                        callback ? callback(data) : container = self_.renderrelatedList(data, data.template,event, ui.offset,self_.config);
                        ui && $temp.remove();
                        success && success(container);
                    });

                    

                } else if(data.async){
                    data.asyncloader && data.asyncloader.then(function(){
                        delete data.asyncloader;
                        data.async = false;
                        callback ? callback(data) : container = self_.renderrelatedList(data, data.template,event, ui.offset,self_.config);
                        success && success(container);
                    })
                } else{
                    if(!canvasObjUtils._.isEmpty(data.data)){
                        data.data = zcanvasrelatedList.updatereference(zutils.zcopyobj(data.data)); 
                        data.template = self_.config.relatedlistcompile(data.data , data , true);
                    }
                        callback ? callback(data) : container = self_.renderrelatedList(data, data.template,event, ui.offset,self_.config);
                        success && success(container);
                }
            }
            return container;
        },
        addrelatedlist: function(json,parentjson){
            // FIXME: Static component check is temperory
            var titlejson = canvasObjUtils._.filter(parentjson, function(item){ return item._type === 'component' || item._type === 'static_content' }); // NO I18N
            titlejson = titlejson[0];
            
            var self_ = this;
            var data = {};
            if(json.children.length && !json.components){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                json.components = json.children;
            }
            var resultdata;
           
            if(json.id){ // && !json.rerender
             //   var availabledata = $('[data-uniquekey = "' + json.id +'"').data('zcanvas');
                var availabledata = null;
                var datamap = $('#zcanvas_menu').data('zcdatamap'); // NO I18N
                if(datamap && datamap[json.id]){
                	availabledata = datamap[json.id];
                }
                // eslint-disable-next-line no-extra-parens
                if(availabledata && (availabledata.menu || json.skip ||  (availabledata.data && !availabledata.async && !(availabledata.data instanceof Promise) && canvasObjUtils._.isEmpty(availabledata.data)))){
                    data = resultdata = availabledata;
                    if(json.theme !== 'Table Layout'){
                    	data.data = json;
                    }else{
                    	var _menuinst = $(resultdata.fieldContainer).data('zcanvasMenu'); // NO I18N
                    	if(_menuinst && _menuinst.config && _menuinst.config.zmenustart){
                    		_menuinst.config.zmenustart(resultdata);
                    	}
                    }
                }
            }
            var datahandler = function(result){
                var element = $(self_.config.editorcontainer);
                var _dimension = element.data('zcanvasdimensions'); // NO I18N
                if(_dimension){
                    var style = _dimension;
                }else{
                    // Copy style 
                    var style = {left : element.css('left') , top : element.css('top')}; // NO I18N
                    var widthfromstyle = parseInt( element[0] && element[0].style.width );
                    var heightfromstyle = parseInt( element[0] && element[0].style.height );
                    var outwidth = element.outerWidth();
                    var outheight = element.outerHeight();
                    style.width = widthfromstyle > outwidth ?  widthfromstyle  : outwidth;
                    style.height = heightfromstyle > outheight ? heightfromstyle : outheight;
                    style['z-index'] =  parseInt(element.css('z-index')) || 1; // NO I18N
                    style.position = 'absolute'; // NO I18N
                    // Copy data
                }
                
                if(json.theme === 'Table Layout' && result.gallery){
                    data.data = zutils.zcopyobj(result.gallery.Table.data);
                    data.template = result.gallery.Table.template;
                }else{
                    data.data = result.data;
                    data.template = result.template;
                }
                if(json.theme === "Table Layout" && json.noMapAvail) {
                	data.data = {};
                	result.data = json;
                	result.rellistdata = [];
                }
                if(json.theme === "LazyLoad Component"){ 
                    data.data = result;
                    if(!data.fieldContainer){
                        data.fieldContainer = zcanvasrelatedList.currentmenu._default;
                    }
                }
                data.actions = result.actions;
                data.menu = result.menu;
                data.module = result.module;
                data.rellistdata = result.rellistdata;
                data.exception = json.exception || json.tempexception;
                if(json.ui.context){
                    data.contextstyles = json.ui.context;
                }
                if(data.menu){
                    data.fieldid = data.menu.data.map(function(item){ return item.id;})
                }
                data.gallery = result.gallery;

                // Title Button Normalization

                var titlechild = titlejson.children;
                var childlen = titlechild.length;
                for(var i = 0 ; i < childlen ; i ++){
                    var actions = data.actions || [];
                    var actionlen = actions.length;
                    for(var j = 0 ; j < actionlen ; j++){
                        if(actions[j].id === titlechild[i].id){
                        	var isupdateneed = false;
                        	if(actions[j].value !== titlechild[i].zcvalue && json.theme === "Table Layout"){ // NO I18N
                        		isupdateneed = actions[j].value;
                            }
                        	var islabelupdateneed = false;
                        	if(titlechild[i].labelupdate){
                        		islabelupdateneed = actions[j].label;
                        	}
                            titlechild[i] = canvasObjUtils._.extend(actions[j],titlechild[i]);
                            // FIXME: Should be depend on Menu formation .. This is a quick fix
                            titlechild[i].zctype = titlechild[i].datatype;
                            
                            // For Canvas Custom Components
                            if(isupdateneed){
                            	titlechild[i].zcvalue = isupdateneed;
                            	titlechild[i].value = isupdateneed;
                            }
                            if(islabelupdateneed){
                            	titlechild[i].label = islabelupdateneed;
                        	}
                        }
                    }
                }

                // End of Button Normalization

                
                var isFixed = element.attr('fixed'); // NO I18N
                var isFixedX = element.attr('data-fixed-x'); // NO I18N
                var isFixedY = element.attr('data-fixed-y');  // NO I18N
                // Delete the Parent Editor // FIXME: Try alternative
                var id = element.attr('id'); // NO I18N
                var parenteditor = element.parent();
                var instance = parenteditor.data('zcanvas'); // NO I18N
                var copydata = self_.copypasteresource.bind(instance)(element);
                var canvasdata = element.data('zcanvasdata'); // NO I18N
                var newelementdata = element.data('zcelementdata'); // NO I18N
                var staticreplace = null;
                if(newelementdata && !canvasdata) {
                	staticreplace = {ui : {value : { 'system_id' : newelementdata }}}; // NO I18N
                	instance.config.onaddelement(element , staticreplace);
                	canvasdata = element.data('zcanvasdata'); // NO I18N
                }
                element.zremove();
                instance.renderrelatedList(data,data.template,undefined,undefined,self_.config,style,id, titlejson,true);
                var rlel = $('#' + id);
                if(data.exception){
                	var _title = zutils.zcopyobj(titlejson);
                	_title._type = 'static_content'; //NO I18N
                	_title.theme = 'Custom Component'; // NO I18N
                	var _mainjson = zutils.zcopyobj(json);
                	rlel.data('zcnoactiondata',[_title , _mainjson]); // NO I18N
                }
                isFixed && rlel.attr('fixed',true); // NO I18N
                // eslint-disable-next-line zstandard/combine-properties
                isFixedX && rlel.attr('data-fixed-x',true); // NO I18N
                // eslint-disable-next-line zstandard/combine-properties
                isFixedY && rlel.attr('data-fixed-y',true); // NO I18N
                
                self_.copypasteresource(rlel,copydata);
                var elcontainer  =   rlel.find('.zcanvas-relatedlist-container')
                elcontainer.addClass(json.ui.class);// NO I18N
                rlel.removeClass('zcanvas-editor').zremoveClass('zcanvas-editor'); // NO I18N
                if(data.data && data.data.ui && data.data.ui.value && data.data.ui.value.listtypeclass === 'zc-rl-cards'){
                    self_.changelisttype(rlel , data.data.ui.value.listtypewidth, true);
                }
                if(self_.config && self_.config.listinterceptor && !self_.config.listinterceptor(result.data)){
            		return;
            	}
                var innerfirsteditor = rlel.find('.zcanvas-editor.zcanvas-non-delete:not(.zcanvas-title-editor)'); // NO I18N
                if(innerfirsteditor.length){
                    var instdata = innerfirsteditor.data('zcanvas'); // NO I18N
                    innerfirsteditor.data('zctempjson',data.data); // NO I18N
                    instdata.config && instdata.config.onChange && instdata.config.onChange();
                }

                var $nodedata = rlel.data('zcanvas'); // NO I18N
                if($nodedata && $nodedata.fieldContainer && !json.rerender){
                    var _menudata = $($nodedata.fieldContainer).data('zcanvasMenu');
                    _menudata && _menudata.reduceScope($nodedata);
                }

                if(instance && instance.config && instance.config.preformattr){
                    var attrdata = $nodedata[instance.config.preformattr.key] || $nodedata[instance.config.preformattr.key2];
            
                        for(attr in instance.config.preformattr.attr){
                            attrdata && rlel.attr( attr ,   instance.config.preformattr.attr[attr] + attrdata);
                        }
                }

                if(instance && instance.config && instance.config.onaddelement){
                    rlel.data('zcanvasdata',canvasdata); // NO I18N
                    instance.config.onaddelement(rlel , result.data);
                }


            }
            if(resultdata){
            //    datahandler(resultdata);

                if(resultdata.async && resultdata.asyncloader){
                    resultdata.asyncloader.then(function(){
                        resultdata.async = false;
                        delete resultdata.asyncloader;
                        datahandler(resultdata);
                    });
                }else{
                    datahandler(resultdata);
                }
            }else if(self_.config && self_.config.relatedlistcreate && json.components && json.theme !== "LazyLoad Component" ){ // NO I18N
        		data = self_.config.relatedlistcreate(json);
        		if(data.data instanceof Promise){
        			data.data.then(function(result){
                        if(result.async){
                            result.asyncloader && result.asyncloader.then(function(){
                                result.async = false;
                                delete result.asyncloader;
                                datahandler(result);
                            });
                        }else{
                            datahandler(result);
                        }
                    });
        		}
        	}else if(json.theme === "LazyLoad Component"){ // NO I18N
                datahandler(json);
            }	
        },
        copypasteresource: function(element, json){
            if(!json){
                var copydata = {};
                var toolsinst = this.config.toolsRef;
                copydata.zstyle = toolsinst.copystyle(element);
                copydata.zclass = element.attr('data-zcanvasclass');  // NO I18N
                return copydata;
            }else{
                var copydata = json;
                if(!copydata){
                    return;
                }
                element.zccss(copydata.zstyle);
                var classnames = copydata.zclass;
                if(classnames){
                    var classlist = classnames.split(" ");
                    var classlen = classlist.length;
                    for(var i = 0 ; i < classlen ; i++){
                        element.addClass(classlist[i]);
                        element.zaddClass(classlist[i]);
                    }
                }
            }
        },
        toJson: function(element, outjson){
            if(element.hasClass('zcnoaction')){
                outjson.ui.value.editorclass = 'zcanvas-loading-component'; // NO I18N
        		var _data = element.data('zcnoactiondata'); // NO I18N
        		return _data; // NO I18N
        	}
            var title = element.find('.zcanvas-title-editor');
            var isNonRL = element.has('.zc-noneditable-rl').length; // NO I18N
            var isCallback = element.hasClass('zc-static-callback'); // NO I18N
            var titlejson = canvasOutput.createJson(title);
            var mainjson = element.data('zcanvas') || {}; // NO I18N
            var inst = zutils.getParentData(element);
            var maindata = !isNonRL && !isCallback ? canvasOutput.createJson(element.find('.zcanvas-non-delete').get(0)) : zutils.zcopyobj(mainjson.data || {});
            var rlcontainer = element.find('.zcanvas-relatedlist-container');
           //  var editor = rlcontainer.find('.zcanvas-editor')
            /* if(editor && editor.length){
                 var ins = editor.eq(0).data('zcanvas'); // No I18N
                 ins && ins.config && ins.config.onChange();
             } */

            maindata.id = mainjson.id;
            titlejson._type = 'static_content'; //NO I18N
            titlejson.theme = 'Custom Layout'; // NO I18N
//            titlejson.skipInnerPadding = true;
            if(isNonRL || isCallback){
                if(isCallback){
                    maindata = inst && inst.config && inst.config.customstaticjson && inst.config.customstaticjson(element,maindata);
                }else{
                    maindata.theme = 'Table Layout';// NO i18N
                    maindata.children = [];
                    maindata.ui = { value: { position: jsonCreation.getposition(element.find('.zc-noneditable-rl')), style: {} } };
                    if(mainjson.contextstyles){
                        maindata.ui.context = mainjson.contextstyles;
                    }
                }
            } else {
                maindata.theme = 'Custom Layout'; // NO I18N
                var oldposheight = zutils.zcopyobj( maindata.ui.value.position );
                maindata.ui.value.position = canvasObjUtils._.extend(maindata.ui.value.position , jsonCreation.getposition(rlcontainer));
                maindata.ui.value.position.height = oldposheight.height;

                if(rlcontainer.hasClass('zc-rl-cards')){
                    maindata.ui.value.listtypeclass = 'zc-rl-cards'; // NO I18N
                    maindata.ui.value.position.width = rlcontainer.outerWidth();
                    maindata.ui.value.listtypewidth = oldposheight.width;
                }else{
                    maindata.ui.value.position.width = oldposheight.width;
                }
                
            }
            if(element){
            		maindata.data = JSON.parse(JSON.stringify(mainjson));
            }
            if(outjson.ui.value.fixed || outjson.ui.value.fixedHeight){
                maindata.ui.rlcontainer = { position: jsonCreation.getposition(rlcontainer), style: {} }
            }
//            outjson.skipSlice = true;

            outjson.ui.value.editorclass = 'zcanvas-loading-component'; // NO I18N

            // FIXME:: should be handled dynamically

            if(mainjson._type === 'subform'){
                maindata.subformid = mainjson.id;
            }
            if(mainjson.personalityName){
                maindata.personalityName = mainjson.personalityName;
        }
            zcanvasrelatedList.filltemplates(element , outjson, true, maindata);
            var inst = zutils.getParentData(element);
            if(inst && inst.config && inst.config.listjson){
                maindata = inst.config.listjson(maindata);
            }

            // if(mainjson.ui.value.listtypeclass){
            //     maindata.ui.value.listtypeclass = mainjson.ui.value.listtypeclass;
            // }

            maindata._type = 'relatedlist'; // NO I18N
            return [titlejson , maindata || {}];
        },
        toView: function( json , data , dtemplate , rendermode){
        	var template = $('<div class="zcanvas"></div>'); // NO I18N
            var titlejson = canvasObjUtils._.filter(json.children , function(item){ return item._type === 'static_content' }); // NO I18N
            var compjson = canvasObjUtils._.filter(json.children , function(item){ return item._type === 'relatedlist' }); // NO I18N
            compjson = zutils.zcopyobj(compjson[0]);
            titlejson = zutils.zcopyobj(titlejson[0]);
        	if(!data) {
        		data = zutils.zcopyobjExternal(createStruture.menuData ? createStruture.menuData[compjson.id] : $('#zcanvas_menu').data('zcdatamap')[compjson.id]);
            }
            if(rendermode && !dtemplate ){
                dtemplate =  zcanvasrelatedList.toCompileView(compjson ,data , dtemplate);
            }
            
            if(compjson.exception){
            	template.append('<div class="zcnopermission">' + I18n.getMsg('crm.canvas.component.permission.denied') + '</div>'); // NO I18N
            	return template.outerHTML();
            }
            titlejson._type = 'component'; // NO I18N
            titlejson.theme = 'Custom Layout'; // NO I18N
            var compel = canvasOutput.html(undefined , titlejson, true);
            if(json._type === "component"){
            		template.addClass("zcanvassection zcanvas-static-content-container");//NO I18N
            }
            template.append(compel).append(dtemplate);
            if(compjson && compjson.ui && compjson.ui.context){
                var zid = zutils.getRandomId();
                template.append(zcanvasrelatedList.getStyleElement(compjson.ui.context,zid)).attr('id',zid); // NO I18N
            }
            if(json.ui.value.fixedHeight || json.ui.value.fixed ){
                if(compjson.ui.rlcontainer && compjson.ui.rlcontainer.position){
                    var sheight = compjson.ui.rlcontainer.position.height;
                    template.find('.zc-rl-outcontainer').css({'height':sheight , 'overflow': 'auto'}); // NO I18N
                    template.find('.zcanvas-non-delete').css('height','auto'); // NO I18N
                }
            }
            return template.outerHTML();
        },
        toCompileView: function(json , data , dtemplate){
        	if($u.isEmpty(json) && !data){
        		return false;
        	}
        	if(json.exception){
        		return '<div class="zcnopermission">' + I18n.getMsg('crm.canvas.component.permission.denied') + '</div>';
        	}
        	var menuinst = $('#zcanvas-editor-outer').data('zcanvas'); // NO I18N
            if(json.theme !== 'Table Layout'){
                var islazyload = json.theme === 'LazyLoad Component'; // NO I18N
                if(islazyload){
                	if(menuinst && menuinst.config && menuinst.config.customstaticview){
                		 dtemplate = menuinst.config.customstaticview(json);
                	}else if(createStruture && createStruture.toolinst && createStruture.toolinst.customstaticview){
                		 dtemplate = createStruture.toolinst.customstaticview(json);
                	}
                   
                }else if((menuinst && menuinst.config && menuinst.config.relatedlistcompile) || (createStruture && createStruture.toolinst && createStruture.toolinst.rellistcompile)){
                    dtemplate = menuinst ? menuinst.config.relatedlistcompile(json , json.data || data ) : createStruture.toolinst.rellistcompile(json , json.data || data );
                    if(json.ui.value.listtypeclass === 'zc-rl-cards' && dtemplate){
                       dtemplate = dtemplate.replace('zc-replaceclass','zc-rl-cards');
                       dtemplate = $(dtemplate);
                       dtemplate.children('.zcanvassection').each(function(){ // NO I18N
                            // eslint-disable-next-line  webperf/layout-thrashing
                            $(this).width(json.ui.value.listtypewidth || json.ui.value.position.width);
                        });
                       dtemplate = dtemplate.outerHTML();
                    }
                }
            } else {
                dtemplate = dtemplate || (json.data && json.data.template ? json.data.template : false)  || data.template;
                if(!menuinst || createStruture.galleryrender) {
                	dtemplate = '<div class="zc-replaceclass zc-rl-outcontainer relatedlistcomp">' + dtemplate + '</div>'; // NO I18n
                }
            }
            return dtemplate;
       },
        getStyleElement: function(styles, id){
            var $st = $('<style/>'); // NO I18N
            var style = '';
            for(key in styles){
                var stprop = ''
                for(prop in styles[key]){
                    stprop += zutils.getReverseCompressionMapping( 'stylekey' , prop ) + ' : ' + zutils.getReverseCompressionMapping( 'stylevalue' , styles[key][prop]) + ' !important;' // NO I18N
                }
                style += '#' + id + ' ' + key + '{' +  stprop  + '}';
            }
            $st.html(style);
            return $st;
        },
        inserttitle: function(obj, title, container){
            var zid = zutils.getRandomId();;
            var titledata = {"children":[],"ui":{"value":{"position":{"startX":10,"startY":11,"endX":174,"width":164,"height":27},"style":{ "default": {"background-color":"transparent"} },"value":"Some Title"}},"_type":"component","theme":"Static Text"}; // NO I18N
            titledata.ui.value.value = title;
            titledata.ui.value.class = 'zc_disabled'; // NO I18N
            titledata.zcanvasId = zid;
            if(obj.h < titledata.ui.value.position.height + obj.y){
                var diff = titledata.ui.value.position.height + obj.y - obj.h;
                obj.y = obj.y - diff;
            }
            titledata.ui.value.position.startX = obj.x;
            titledata.ui.value.position.startY = obj.y;
            titledata = [titledata]; 
            this.addElement(titledata);
            var refresheditor = function(el ){
                var scopeid = el.droppable('option','scope'); // NO I18N
                var $titledrags = el.find('.ui-draggable'); // NO I18N
                $titledrags.draggable('option','containment','parent'); // NO I18N
                $titledrags.draggable('option','scope',scopeid); // NO I18N
            }
            refresheditor(container);

            var undoobj = {
                action: 'callback', // NO I18N
                node: '#' + zid, // NO I18N
                editor: '#' + this.container.parent('.zcanvas-static-editor').attr('id') + ' .zcanvas-title-editor', // NO I18N
                titledata: titledata,
                callback: function(data , method ){
                    if(method === 'undo'){ // NO I18N
                        $(data.node).zremove();
                    } else{
                        var $editor = $(data.editor);
                        var parentinst = $editor.data('zcanvas'); // NO I18N
                        parentinst.addElement(titledata);
                        refresheditor($editor);
                    }
                }
            }

            this.savecanvasaction($('#' + zid) , null , null , null , null, null, undoobj); // NO I18N
        },
        insertaction: function(obj, actions, container, icon){
            var zid = zutils.getRandomId();;
            var titledata = {"datatype":"button","_type":"action","ui":{"value":{"style":{"default":{"background-color":"rgba(255, 255, 255, 0)","font-size":"18px","padding-top":"0px","padding-bottom":"0px","padding-left":"0px","padding-right":"0px"}},"position":{"startX":1214,"startY":12,"endX":1319,"width":105,"height":25},"class":"zcanvas-field zcanvas-no-img-default zc-ta-center zccbutton zccrlaction zc-rl-field zccbuttonicon zccbuttonnotext"},"holder":{"style":{},"class":""},"field":{"style":{},"class":""},"icon":{"style":{},"class":"","icon":"icon-Icon_plus"}},"children":[]}; // NO I18N
            canvasObjUtils._.extend(titledata , actions);
            titledata.zcanvasId = zid;
            titledata.zcvalue = actions.value;
            titledata.zclabel = actions.label;
            titledata.zctype = titledata.datatype;

            if(icon){
                titledata.ui.icon.icon = 'icon-Icon_dot_three'; // NO I18N
            }

            if(obj.h < titledata.ui.value.position.height + obj.y){
                var diff = titledata.ui.value.position.height + obj.y - obj.h;
                obj.y = obj.y - diff;
            }
            titledata.ui.value.position.startX = obj.x;
            titledata.ui.value.position.startY = obj.y;
            var menuinsttitle = $(zcanvasrelatedList.currentmenu && zcanvasrelatedList.currentmenu.opened).data('zcanvasMenu'); // NO I18N
            if(menuinsttitle){
            	menuinsttitle.reduceScope(titledata);
            }
            titledata = [titledata]; 
            this.addElement(titledata);
            var refresheditor = function(el ){
                var scopeid = el.droppable('option','scope'); // NO I18N
                var $titledrags = el.find('.ui-draggable'); // NO I18N
                $titledrags.draggable('option','containment','parent'); // NO I18N
                $titledrags.draggable('option','scope',scopeid); // NO I18N
            }
            refresheditor(container);

            var undoobj = {
                action: 'callback', // NO I18N
                node: '.' + zid, // NO I18N
                editor: '#' + this.container.parent('.zcanvas-static-editor').attr('id') + ' .zcanvas-title-editor', // NO I18N
                titledata: titledata,
                callback: function(data , method ){
                    if(method === 'undo'){ // NO I18N
                        $(data.node).zremove();
                    } else{
                        var $editor = $(data.editor);
                        var parentinst = $editor.data('zcanvas'); // NO I18N
                        parentinst.addElement(titledata);
                        refresheditor($editor);
                    }
                }
            }

            this.savecanvasaction($('#' + zid) , null , null , null , null, null, undoobj); // NO I18N
        },
        changelist: function(element , eldata , flag){
            
            var self_ = this;
            var previous = canvasOutput.createJson(element);
            var currentmenudata = element.data('zcanvas'); // NO I18N
            var currentmenu = {
                id: currentmenudata.id,
                fieldContainer: currentmenudata.fieldContainer,
                zclabel: currentmenudata.zclabel
            }
            previous._menudata = currentmenu;
            var currentstyle = jsonCreation.compress(currentmenudata.data, ['zcanvasId','datatype','type','_type','ui','customComponent','theme','name'] , null , true);  // NO I18N 
            var _rlcontain = element.find('.zcanvas-relatedlist-container');
            self_.cleareditors(_rlcontain); // NO I18N
            _rlcontain.removeClass('zc-rl-sub-selectable'); // NO I18N
            element.addClass("zcanvas-loading-component zcanvas-rl-change"); // NO I18N
            self_.listhandler(eldata , null , null, function(data){
                element.removeClass("zcanvas-loading-component"); // NO I18N
                data = zutils.zcopyobjExternal ? zutils.zcopyobjExternal(data) : zutils.zcopyobj(data);
                if(!canvasObjUtils._.isEmpty(data.data) && currentstyle.ui){
                    data.data = self_.config.relatedlistdata(currentstyle,data,data.rellistdata[0]);
                }
                element.data('zcanvas',data); // NO I18N
                self_.createeditors(element, self_.config);
                element.find('.zcanvas-title-editor .zc_disabled .zctextcontent').html(data.zclabel);
                var $buttons = element.find('.zcanvas-title-editor .zccrlaction'); // NO I18N
                var $btnlen = $buttons.length;
                var $copyaction = JSON.parse(JSON.stringify(data.actions || {}));
                for(var i = 0 ; i < $btnlen ; i ++){
                    if($copyaction[0]){
                        $buttons.eq(i).find('.zcanvas-value-container').html($copyaction[0].value);
                        var btndata = $buttons.eq(i).data('zcanvas'); // NO I18N
                        btndata = canvasObjUtils._.extend(btndata,$copyaction[0]);
                        $buttons.eq(i).data('zcanvas',btndata); // NO I18N
                        $buttons.eq(i).zdata(btndata);
                        $copyaction.splice(0,1);
                    }else{
                        $buttons.eq(i).addClass('zccemptybtn');
                    }
                }
                element.find('.zccemptybtn').zremove();
                var rlcontainer = element.find('.zcanvas-relatedlist-container'); // NO I18N
                if(canvasObjUtils._.isEmpty(data.data)){
                    rlcontainer.addClass('zc-noneditable-rl'); // NO I18N
                }else{
                    rlcontainer.removeClass('zc-noneditable-rl'); // NO I18N
                    data.template = undefined ; // self_.config.relatedlistcompile(data.data,data);
                    if(data.ui && data.ui.value && data.ui.value.listtypeclass === 'zc-rl-cards' && data.template){
                        data.template = data.template.replace('zc-replaceclass','zc-rl-cards');
                    }
                }
                var settingcont = element.find('.zcanvas-settings'); // NO I18N
                settingcont.empty();
                self_.initgallery(settingcont ,  element , rlcontainer , data , self_.config);
                self_.switchmenu(element);
                var current = canvasOutput.createJson(element);
                current._menudata = eldata;
                var menuinst = $(eldata.fieldContainer).data('zcanvasMenu'); // NO I18N
                menuinst.addElement(previous._menudata);
                menuinst.reduceScope(eldata);
                if(self_.container && self_.container.hasClass('zcanvas-restricted-drop')){
                	var zcontid =  self_.container.attr('id'); // NO I18N
                	var tabclose = self_.container.closest('.zctablayout'); // NO I18N
                //	tabclose.find('.tab[data-tab=' + zcontid + '] .tabname').html(data.zclabel);
                tabclose.find('.tab.zctablist' + zcontid + ' .tabname').html(data.zclabel);
                }
                !flag && self_.rerender(element, previous , current);
            })
            
        },
        changelisttype: function(element , flag, changeflag){
            var rlcontainer = element.find('.zcanvas-relatedlist-container'); // NO I18N
            rlcontainer.addClass('zc-rl-cards');
            var $editors = rlcontainer.children('.zcanvas-editor.zcanvas-non-delete'); // NO I18N
            var finalwidth = flag;
            var lasteditor = {};
            $editors.each(function(){
                var $editor = $(this);
                if(!flag){
                    var $fields = $editor.children('.zcanvas'); // NO I18N
                    var _maxel = $(canvasObjUtils._.max($fields , function(item ){ 
                    	var $item = $(item);
                    	return  $item.outerWidth() + $item.position().left  }));
                    var _max =  _maxel.outerWidth() + _maxel.position().left;
                    finalwidth = _max + 50;
                  //  $editor.attr('fixed', true); // NO I18N
                }
                var $chandles = $editor.children('.ui-resizable-handle'); // NO I18N
                // eslint-disable-next-line webperf/layout-thrashing
                $editor.width(finalwidth);
                // FIXME: coz of Jquery bug in handle update
                 // eslint-disable-next-line webperf/layout-thrashing
                $chandles.remove();
                $editor.resizable('option','handles','s,e'); // NO I18N
                lasteditor = $editor;
            });
           
            var data = lasteditor.data('zcanvas'); // NO I18N
            !changeflag && data && data.config && data.config.onChange();
        },
        changetolist: function(element , changeflag){
            var rlcontainer = element.find('.zcanvas-relatedlist-container'); // NO I18N
            rlcontainer.removeClass('zc-rl-cards');
            var $editors = rlcontainer.children('.zcanvas-editor.zcanvas-non-delete'); // NO I18N
            var lasteditor = {};
            $editors.each(function(){
                var $editor = $(this);
                var $chandles = $editor.children('.ui-resizable-handle'); // NO I18N
                $editor.css('width','100%'); // NO I18N
                 // eslint-disable-next-line webperf/layout-thrashing
                $chandles.remove();
                $editor.resizable('option','handles','s'); // NO I18N
                lasteditor = $editor;
            });
            var data = lasteditor.data('zcanvas'); // NO I18N
            !changeflag && data && data.config && data.config.onChange();
        },
        filltemplates: function(element , json, flag , rjson){
            var eldata = element.data('zcanvas'); // NO I18N
            if(!rjson){
                 var rljson = canvasObjUtils._.filter(json.children , function(i){ return i._type === 'relatedlist'; }) //NO I18N
                 if(rljson && rljson.length){
                     rjson = rljson[0];
                 }
             }
            if(eldata && eldata.gallery){
                var settingsel = element.find('.zcanvas-settings');
                var namefield =  settingsel.find('.relatedgalname');
                var nameindex = parseInt( namefield.attr('data-index') ); // NO I18N
                var keys = canvasObjUtils._.keys(eldata.gallery) || [];
                if(rjson){
                    if(!rjson.meta){
                        rjson.meta = {};
                    }
                    rjson.meta.currenttemplate = keys[nameindex] || keys[0];
                    var galkeys = Object.keys(eldata.gallery);
                    var customresults = canvasObjUtils._.filter( galkeys, function(i) {  if(this[i].usergallery){this[i].tempname = i; return true} }.bind(eldata.gallery));
                   rjson.meta.customtemplates = customresults.map(function(galname){ return this[galname] }.bind(eldata.gallery))
                   rjson.meta.customremove = flag;

                }
            }
            
            if(eldata && eldata.creatededitors){
                if(!rjson.meta){
                    rjson.meta = {};
                 }
               rjson.meta.zcids = eldata.creatededitors;
               rjson.meta.zcf = true;
            }
       },
       refilltemplates: function(element , rljson ){
           var eldata = element.data('zcanvas'); // NO I18N
           var json = rljson.meta || {};
           if(eldata && eldata.gallery){
               //var settingsel = element.find('.zcanvas-settings');
                //var namefield =  settingsel.find('.relatedgalname');
               setTimeout(function(){
                   if(json.customtemplates && json.customtemplates.length){
                       var newgal = {};
                       var keys = canvasObjUtils._.keys(eldata.gallery);
                       var keylen = keys.length;
                       
                       
                       for(var i = 0 ; i < keylen ; i++){
                           newgal[keys[i]] = eldata.gallery[keys[i]];
                           // eslint-disable-next-line no-loop-func
                           var descendent = canvasObjUtils._.filter(json.customtemplates , function(k){return k.parent === keys[i]});
                           if(descendent){
                               var deslen = descendent.length;
                               for(var j =  0 ; j < deslen ; j++){
                                   newgal[descendent[j].tempname] = descendent[j];
                               }
                           }
                       }
                       eldata.gallery = newgal;
                   }
                   zcanvasrelatedList.applygallery(element , json.currenttemplate , json.customremove);
               }, 500);
               
               if(json.zcids && json.zcids.length){
                   var $editors = element.find('.zcanvas-relatedlist-container > .zcanvas-non-delete'); // NO I18N
                   var $edlen = $editors.length;
                   for(var i = 0 ; i < $edlen ; i ++){
                       var zdata = $editors.eq(i).data('zcanvas'); // NO I18N
                       zdata.config.editorcontainer = '#' + json.zcids[i];
                       $editors.eq(i).attr('id', json.zcids[i]);
                   }
                   var snodedata = element.data('zcanvas'); // NO I18N
                   snodedata.creatededitors = json.zcids;
               }
                
           }
               
       },
        newstaticeditor: function(element){
            
            var self_ = this;
            var $parent = element.parent();
            var parentid = $parent.attr('id'); // NO I18N
            var parentstyle = jsonCreation.getstyles($parent);
            var json = canvasOutput.createJson(element);
            var zcids = element.data('zcanvas').creatededitors; // NO I18N
            var undoobj = {
                action: 'callback', // NO I18N
                node: '#' + element.attr('id'),
                parent: parentid,
                parentstyle: parentstyle,
                json: json,
                zcids: zcids,
                callback: function(data, method , node){
                    if(method === 'undo'){
                        var $parentedit = zutils.getParentEditor(node);
                        var $nodedata = node.data('zcanvas'); // NO I18N
                        if($nodedata && $nodedata.fieldContainer){
                            var _menudata = $($nodedata.fieldContainer).data('zcanvasMenu');
                            _menudata.addElement($nodedata);
                        }
                        node.zremove();
                        $parentedit.click();

                    }else{
                        var parentdata = zutils.getdatabyelement($('#' + data.parent));
                        data.json.children.map(function(el){ if(el.theme === 'Table Layout') {el.skip = true;}}); // NO I18N
                        parentdata.addElement([data.json], { ui: { value: { style:data.parentstyle  } } } );
                        var snode = $(data.node);
                        var $editors = snode.find('.zcanvas-relatedlist-container > .zcanvas-non-delete'); // NO I18N
                        if(data.zcids && data.zcids.length){
                            var $edlen = $editors.length;
                            for(var i = 0 ; i < $edlen ; i ++){
                                var zdata = $editors.eq(i).data('zcanvas'); // NO I18N
                                zdata.config.editorcontainer = '#' + data.zcids[i];
                                $editors.eq(i).attr('id', data.zcids[i]);
                            }
                            var snodedata = snode.data('zcanvas'); // NO I18N
                            snodedata.creatededitors = data.zcids;

                            if(snodedata && snodedata.fieldContainer){
                                var _menudata = $(snodedata.fieldContainer).data('zcanvasMenu');
                                _menudata.reduceScope(snodedata);
                            }
                        }


                    }
                }
            }
           var undoref =  self_.savecanvasaction(element , null, null, null, null, null, undoobj);
           zutils.overlapHandling( element , undoref );
        },
        rerender: function(element , previous ,current){
            var self_ = this;
            var $parent = element.parent();
            var undoredoobj = {
                action: 'callback', // NO I18N
                node: '#' + element.attr('id'), // NO I18N
                parent: '#' + $parent.attr('id'), // NO I18N
                previous: previous,
                current: current,
                parentstyle: jsonCreation.getstyles($parent),
                callback: function(data , method , node){
                    node.zremove();
                    var parentdata =  zutils.getdatabyelement($(data.parent));
                    var parentstyle = data.parentstyle;
                    var menuinst;
                    if(data.previous && data.previous._menudata){
                        menuinst = $(data.previous._menudata.fieldContainer).data('zcanvasMenu'); // NO I18N
                    } 
                    var menulabel = '';
                    if(method === 'undo'){
                        var prevjson = canvasObjUtils._.filter(data.previous.children, function(item){ return item._type === "relatedlist" }); // NO I18N
                        prevjson[0].rerender = true;
                        parentdata.addElement([data.previous], { ui: { value: { style:parentstyle  } } } );
                        menuinst && menuinst.addElement(data.current._menudata);
                        menuinst && menuinst.reduceScope(data.previous._menudata);
                        menulabel = data.previous._menudata.zclabel;
                    }else{
                        var prevjson = canvasObjUtils._.filter(data.current.children, function(item){ return item._type === "relatedlist" }); // NO I18N
                        prevjson[0].rerender = true;
                        parentdata.addElement([data.current], { ui: { value: { style:parentstyle  } } } );
                        menuinst && menuinst.addElement(data.previous._menudata);
                        menuinst && menuinst.reduceScope(data.current._menudata);
                        menulabel = data.current._menudata.zclabel;
                    }
                    
                    if(parentdata && parentdata.container && parentdata.container.hasClass('zcanvas-restricted-drop')){
                    	var zcontid =  parentdata.container.attr('id'); // NO I18N
                    	var tabclose = parentdata.container.closest('.zctablayout'); // NO I18N
                    	tabclose.find('.tab.zctablist' + zcontid + ' .tabname').html(menulabel);
                    }
                }
            }
            self_.savecanvasaction(element , null, null, null, null, null, undoredoobj);
        },
        reducelayoutscope: function(rlelement , opened){
        	var menuel = $((opened || zcanvasrelatedList.currentmenu.opened) + '_insert'); // NO I18N
        	
        	 var element = $('');
        	 element = element.add(rlelement.find('.zcanvas-title-editor'));
        	 element = element.add(rlelement.find('.zcanvas-non-delete').eq(0));
        	 
        	 var txtlen = element.find('.zcstatictext:not(.zc_disabled)').length; // NO I18N
             var iconlen = element.find('.zcstaticicon .zciconcontainer span:not(.zcstaticempty)').length; // NO I18N

             var inst = menuel.data('zcanvasMenu'); // NO I18N
             if(inst){
            	 var txtel = inst.getElementByKey('layoutname','Static Text'); // NO I18N
                 var iconel = inst.getElementByKey('layoutname','Static Icon'); // NO I18N

                 txtlen && inst.setScope( $(txtel).data('zcanvas') || {} , txtlen > inst.config.defaultscope ? 0 : inst.config.defaultscope - txtlen ); // NO I18N
                 iconlen && inst.setScope( $(iconel).data('zcanvas') || {} , iconlen > inst.config.defaultscope ? 0 : inst.config.defaultscope - iconlen  ); // NO I18N
                 
                 inst.stopscope = true;
             }
             
        }
    };
    window.zcanvasrelatedList = zcanvasrelatedList;
})();;//$Id$
(function(){
    var zcanvas = function(el, config){
        var self_ = this;
        this.container = $(el);
        var selectedField = this.container; 
        var undoredo = config.undoredomanager || new CanvasUndoRedoManager();
        this.config = canvasObjUtils._.defaults(config || {}, {
                itemClass: "zcanvas-on-editor",//NO I18N
                acceptWidgets: ".ui-draggable",//NO I18N
                editorcontainer: "#zcanvas_editor",//NO I18N
                outercontainer: "#zcanvas-editor-outer",//NO I18N
                editorType: "component",//NO I18N
                toolbarContainer:"",
                draggable: false,
                droppable:true,
                editorHeight: 200,
                handles: "bottom",//NO I18N
                editorWidth : 1000,
                zccontainment: "parent",//NO I18N
                overlaping: false,
                onChange: function(){ return; },
                onBeforeChange: function() { return; },
                disableundoredo: false
        });
        if(!this.config.isPage){
            this.container.addClass('zcanvas-editor');
        }
        var tools;
        var canvasFieldmerge;
        var selectable;
        if(!config){
            return;
        }

        // FIXME: Split this Method
        this.init = function(){
            var $editor = this.container;
            var selector = self_.config.outercontainer + " > .zcanvas:not('.ui-draggable-dragging')";//NO I18N
           // var selectorResizing = self_.config.outercontainer+" > .zcanvas:not('.ui-resizable-resizing')";//NO I18N
            if(self_.config.draggable){
                $editor.draggable({
                    containment: self_.config.zccontainment || "parent",//NO I18N
                    zcGuide: true,
                    znoposition: true,
                    snapTolerance: 5,
                    appendGuideTo: self_.config.zccontainment,
                    disabled: self_.config.alwaysdisabled,
                    scroll: false,
                   //  zconnectToSortable:'.zcanvas:not(.zc-non-linkable)', //NO I18N
                    start: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    drag: function(e){
                        if(e.shiftKey){
                            return false;
                        }
                    },
                    stop: function(e,ui){
                        var $helper = ui.helper;
                        if($helper && $helper.hasClass('zcanvas-new-editor')){
                            $helper.removeClass('zcanvas-new-editor');
                            return;
                        }
                        if($helper && $helper.hasClass('zcanvas-overflow-node')){
                            var targetWidth = zutils.findpositionAndWidth(self_.config.outercontainer, ui.offset, $(self_.config.outercontainer), $helper,false); // eslint-disable-line webperf/layout-thrashing
                            var finalwidth = targetWidth.targetwidth;
                            if(parseInt($helper[0].style.width) > finalwidth){
                                $helper.css({'max-width':finalwidth}); // NO I18N
                                $helper.addClass('zcanvas-overflow-node'); // NO I18N
                            }else{
                                $helper.css('max-width',targetWidth.targetwidth); // NO I18N
                                $helper.removeClass('zcanvas-overflow-node'); // NO I18N
                            }
                        }
                        // FIXME:: Commented to check Dual Entry on Drag
                        // var previousvalue = ui.originalPosition;
                        // // eslint-disable-next-line webperf/layout-thrashing
                        // var currentValue = ui.position;
                        // self_.savecanvasaction($(e.target),'drag',previousvalue,currentValue);
                    },
                    // smartGuides: self_.config.outercontainer+'>.zcanvas-editor:not(".zcanvas-selected-element"),'+ self_.config.outercontainer+'>.editor>.zcanvas-field',//NO I18N
                    // snapTolerance: 5,
                    revert: 'invalid' // NO I18N
                 //   zscrollparent: '#zcanvas-editor-outer' // NO I18N
                });
            }
            if(self_.config.handles === "bottom"){
                var chooseHandle = "s";//NO I18N
                var conClasses = {"ui-resizable-s": "zcanvas-editor-resize"};//NO I18N
            } else {
                var chooseHandle = "e, s, se, w, sw , n , nw , ne";//NO I18N
                var conClasses = {'ui-resizable-se':'zcanvas-resizable-se'};//No I18N
            }

            if(this.config.droppable){
                $editor.droppable({
                    // accept: this.config.acceptWidgets+',.zcanvas-editor',
                    accept: this.config.acceptWidgets,
                    tolerance: "fit",//NO I18N
                    // FIXME: Greedy should remain true. This can be handled by rejecting the element in parent droppable
                    greedy: true,
                    ultragreedy: true,
                    drop: this.drophandler,
                    over: this.dragoverhandler,
                    out: this.dragouthandler,
                    zcswitch: true                
                });

                if(this.config.zcdropscope){
                    $editor.droppable('option','scope',this.config.zcdropscope); //NO I18N
                }
            } 
            $editor.click(function(e){
                if($(this).is($(e.target))){
                    self_.editorClickHandler(e);
                }
            });
            if(!this.config.restrictresize){
                $editor.resizable({
                    handles: chooseHandle,
                    classes: conClasses,
                    zhandlevisible: true,
                    zcGuide: true,
                    snapTolerance: 5,
                    appendGuideTo: self_.config.zccontainment,
                    containment: "parent",//NO I18N
                    zrestricteditor: true,
                    start: self_.fieldresizestarthandler,
                    stop: function(event,ui){
                        var inst = $(self_.config.outercontainer).data('zcanvas');
                        inst && inst.resizehandle();
                        self_.fieldresizestophandler(event, ui);
                    }
                    // smartGuides: self_.config.outercontainer+'>.zcanvas-editor:not(".zcanvas-selected-element"),'+self_.config.outercontainer+'>.editor>.zcanvas-field',//NO I18N
                    // snapTolerance: 5
                })
            }
            if(this.config.contextmenu && !self_.config.draggable){
                $editor.zcontextmenu({
                    selection: self_.selectfieldonEditor,
                    config: self_.config
                });
            }
            var selectables = document.querySelectorAll(self_.config.editorcontainer + '> .zcanvas')//NO I18N
            var selector = document.getElementById('rectangle');
            var area = self_.container[0];
            this.selectable = selectable = new DragSelect({
                selectables: selectables,
                selector: selector, 
                area: area,
                multiSelectKeys: [],
                onElementSelect: function(){
                  event.type !== 'click' && tools.multiselect(self_.config,undoredo); // NO I18N
                },
                onElementUnselect: function(){
                    tools.multiselect(self_.config,undoredo);
                },
                onDragStartBegin: function(){
                    $editor.addClass('zc-selection-start'); // NO I18N
                    selectable.setSelectables(document.querySelectorAll(self_.config.editorcontainer + '> .zcanvas:not(.zcanvas-ignore)'),false,false);//NO I18N
                    $('.zcanvas-selected-element').removeClass('zcanvas-selected-element'); //NO I18N
                },
                callback: function(selection , event, flag){
                    $editor.removeClass('zc-selection-start'); // NO I18N
                    
                    if(selection.length && flag){
                        if(selection.length === 1){
                            var $selection = $(selection);
                             $selection.removeClass('zcanvas-multiselect');
                            tools.selectfield($selection);
                        }else{
                            tools.multiselect(self_.config , undoredo , false , true);
                        }
                        tools.stopPropogate = true;
                        setTimeout(function(){ 
                            this.stopPropogate = false;
                        }.bind(tools) , 100);
                    }
                    return true;
                }


            });
            tools = this.config.toolsRef || new zcanvastools(this.config.toolbarContainer,this.toolCallback,this.config.postStyleApplyConditions);
           // this.initilizeTools('background'); //No I18N
            // initialize merge options
            // canvasFieldmerge = new zcanvasmerge({
            //     merge: this.mergeHandler,
            //     unmerge: this.unmergeHandler,
            //     editor: self_.config.editorcontainer
            // });

            if(self_.config.staticelement){
                $editor.append(self_.config.staticelement.clone(true));
            }

           !self_.config.nohover && $editor.mouseover(self_.highlightfieldsoneditor).mouseout(self_.highlightfieldsoneditor);

            
            this.__proto__ = canvasObjUtils._.extend(this.__proto__ , zcanvasrelatedList);

        }
        
        this.drophandler = function(event,ui,external,callback){
            if(!ui.draggable && ui.item){
                ui.draggable = ui.item;
                ui.gridList = true;
            }
            var $draggable = $(ui.draggable);
            var dragdata = $draggable.data('uiDraggable'); // NO I18N
            var previousvalue = dragdata.originalPosition;
            var $helper = $(ui.helper);
            if($helper.hasClass('zc-ignore-drop')){
                return;
            }
            self_.highlightfields(true);
            // FIXME: Temp fix to check overlapping
            // if(!self_.config.overlaping) {
            //     var distrubNode = zutils.findDisturbedNode(ui);
            //     if(distrubNode){
            //         return;
            //     }
            // }

            $draggable.removeClass('zcanvas-temp-cancel'); // NO I18N
            if($draggable.is('.zcanvas-selectbox')){
                self_.boxhanlder(event , ui, $draggable);
                return;
            }
            if($draggable.parent(config.editorcontainer).length > 0){
                    // eslint-disable-next-line webperf/layout-thrashing
                    var currentValue = dragdata.position;
                    self_.normalizefield($draggable , $(config.editorcontainer));
                    
                    var undoref = self_.savecanvasaction($draggable,'drag',previousvalue,currentValue);
                    zutils.overlapHandling($draggable , undoref);
                return;
            }
            if($helper.hasClass("zcanvas-on-editor")){//No I18N
                var data = $draggable.data('zcanvas'); // NO I18N
               // var id = zutils.getRandomId();
                if(data && data.zctype === 'canvas_component'){
                    var createNode = self_.canvascomponenthandler(event , ui, $draggable);
                }else if(data && data.zctype === 'component'){ // NO I18N
                    var createNode = self_.neweditorhandler(event,ui,$draggable);
                }else if(data && data.zctype === 'layouts'){ // NO I18N
                        var createNode = self_.layouthandler(event,ui,$draggable);
                }else if(data && self_.config.listtypes.indexOf(data.zctype) > -1){ // NO I18N
                        var createNode = self_.listhandler(data,event,ui,null,callback);
                        callback = false;
                        var instance = $(data.fieldContainer).data('zcanvasMenu');
                        instance.reduceScope(data);
                } else{
                        var createNode = self_.fieldhandler(event,ui,$draggable,external);
                }
                createNode && createNode.removeClass("ui-draggable-dragging") && callback && callback(createNode);//NO I18N
                return createNode;
            }else if($draggable.is($('.zclayout'))){
                previousvalue.container = zutils.getSelectorByElement(zutils.getParentEditor($draggable));
                self_.oneditorfieldpositionconvert($draggable, config.editorcontainer,$draggable);
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                $(config.editorcontainer).append($draggable);
                // eslint-disable-next-line webperf/layout-thrashing
                var currentValue = $draggable.position();
                currentValue.container = zutils.getSelectorByElement(self_.container);
                
                var undoref = self_.savecanvasaction($draggable,'editordrag',previousvalue,currentValue);
                zutils.overlapHandling($draggable , undoref);
            }else if($draggable.is($('.zcanvas-editor'))){
                self_.editorhandler(event,ui,$draggable);
            }else if($draggable.is($('.zcanvas-static-editor'))){
                // eslint-disable-next-line webperf/no-multipleDOMLookup
                var currenteditor =  $(config.editorcontainer);
                var currentValue = {};
                var selector = self_.config.editorcontainer + " > .zcanvas:not('.ui-draggable-dragging')";//NO I18N
                var selectorResizing = self_.config.editorcontainer + " > .zcanvas:not('.ui-resizable-resizing')";//NO I18N
                self_.oneditorfieldpositionconvert($draggable, config.editorcontainer,$draggable);
                // eslint-disable-next-line webperf/layout-thrashing
                currentValue = $draggable.position();
                currentValue.container = '#' + currenteditor.attr('id'); // NO I18N
                previousvalue.container = zutils.getSelectorByElement(dragdata.relativeContainer);
                if(!$draggable.parent().is(config.editorcontainer)){
                    if($draggable.has('.zc-noneditable-rl').length){
                        var nodedata = $draggable.data('zcanvas'); // NO I18N
                        var container = $draggable.find('.zcanvas-relatedlist-container'); // NO I18N
                        container.html(nodedata.template);
                    }
                    currenteditor.append($draggable);
                }
                $draggable.addClass('zcanvas-new-editor'); // NO I18N
               
                var undoref = self_.savecanvasaction($draggable,'editordrag',previousvalue,currentValue);
                zutils.overlapHandling($draggable , undoref);
                
            } else {
                    self_.fieldhandler(event,ui,$draggable,external);
            }
            if(!$helper.hasClass("zcanvas-on-editor")){
                var selector = self_.config.editorcontainer + " > .zcanvas:not('.ui-draggable-dragging,.zcanvas-multiselect')";//NO I18N
                var selectorResizing = self_.config.editorcontainer + " > .zcanvas:not('.ui-resizable-resizing,.zcanvas-multiselect')";//NO I18N
                var dragOption = $draggable.draggable( "option" );//NO I18N
                dragOption.zcGuide = selector;
                dragOption.appendGuideTo = self_.config.editorcontainer;
               // $draggable.draggable( "option", dragOption);//NO I18N
                if($draggable.hasClass("ui-resizable")){
                    var resizeOption = $draggable.resizable( "option" );//NO I18N
                    resizeOption.zcGuide = selectorResizing;
                    resizeOption.appendGuideTo = self_.config.editorcontainer;
                    // $draggable.resizable( "option", resizeOption);//NO I18N
                }
            } 
            
    //            else if($draggable.is($('.zcanvas-editor'))){ 
    //            		self_.fieldhandler(event,ui,$draggable,external);
    //            } 
    //            self_.config.onChange && self_.config.onChange('drop',$clone); // NO I18N
        
        }

        

        this.fieldhandler = function(event,ui,$draggable,external){
            var data = zutils.zcopyobj(zutils.getdatafromelement(ui.draggable));
            var zelementdata = ui.helper.data('zcanvasdata'); // NO I18N
            var helperClone = $(ui.helper).clone();  
            // Removed data("zcanvasclass", "zcanvas-field")
            helperClone.addClass("zcanvas");//NO I18N 
            $(helperClone).find(".zcanvas-holder").data("zcanvas-field", data);
            var droppedField = self_.prepareElement(helperClone, data);
            var holderNode = $(helperClone).find(".zcanvas-data-node");//NO I18N
            holderNode.zdata(data);
            var $editor = $(config.editorcontainer);
            $editor.append(droppedField);
            if(data && data.zctype && data.zctype.indexOf("profileimage") > -1){
                self_.adjustimagetooriginal(droppedField);
            }
            var draginst = $draggable.draggable('instance') || {}; // NO I18N
            var $dragitem = $(draginst.currentItem || draginst.element);
            if($dragitem.hasClass('zcanvas-on-editor')){
                self_.oneditorfieldpositionconvert($draggable, config.editorcontainer,droppedField,external);
                $draggable.trigger('dragstop',[ui]);
                var previous = {};
                var dragdata = $draggable.data('uiDraggable'); // NO I18N
                previous.position = dragdata.originalPosition;
                previous.editor = '#' + dragdata.offsetParent.attr('id');  // eslint-disable-line webperf/layout-thrashing
                var current = {};
                current.position = droppedField.position(); // eslint-disable-line webperf/layout-thrashing
                current.editor = self_.config.editorcontainer; // eslint-disable-line webperf/layout-thrashing
                
                var undoref = self_.savecanvasaction(droppedField,'editorswitch',previous,current);
                zutils.overlapHandling(droppedField , undoref);
                $draggable.zremove();
            }else{
                self_.convertAbsoluteToRelative(droppedField, config.editorcontainer,external);
                var instance = $(data.fieldContainer).data('zcanvasMenu');
                instance.reduceScope(data);
                if(!external){
                    var undoref = self_.savecanvasaction(droppedField,'new'); //NO I18N
                    zutils.overlapHandling(droppedField , undoref);
                }
            }

          //  self_.selectfieldonEditor(droppedField);
            droppedField.attr('id', data.unique_key); //NO I18N

            if(zelementdata){
                droppedField.data('zcanvasdata' , zelementdata); // NO I18N
            }
            
            zutils.triggerEvent('fieldAdded',config.editorcontainer,event,ui); //NO I18N
            zutils.adjustWidth(droppedField);
            selectable.setSelectables(document.querySelectorAll(self_.config.editorcontainer + '> .zcanvas'),false,false);//NO I18N
            zutils.menuSearchClear();
            self_.normalizefield(droppedField,$editor);

            return droppedField;
        }

        this.normalizefield = function(field, $editor){
            var $editorpos = $editor.offset().left + $editor.outerWidth();
            var $fieldwidth = field.width();
            var $fieldOuter = field.outerWidth();
            var $fieldpos = field.offset().left;
            var $fieldScrollwidth = field[0].scrollWidth;
            var $fdimension = $fieldpos + ( field.hasClass('zcanvas-overflow-field') ? field[0].scrollWidth  : $fieldOuter);
            if($fdimension > $editorpos){
                field.addClass('zcanvas-overflow-field').width( $editorpos - $fieldpos - (($fieldOuter - $fieldwidth)) );
            }else if(field.hasClass('zcanvas-overflow-field')){ // NO I18N
                field.removeClass('zcanvas-overflow-field');
                field.width($fieldScrollwidth);
            }
        }

        this.editorhandler = function(event,ui,$draggable){
            var draggbaleinst = $draggable.data('ui-draggable'); //NO I18N
            var previousvalue = draggbaleinst.originalPosition;
            previousvalue.container = zutils.getSelectorByElement(draggbaleinst.relativeContainer);
            self_.oneditorfieldpositionconvert($draggable, config.editorcontainer,$draggable);
            $(config.editorcontainer).append($draggable);
            // eslint-disable-next-line webperf/layout-thrashing
            var currentValue = $draggable.position();
            currentValue.container = zutils.getSelectorByElement(self_.container);
            $draggable.addClass('zcanvas-new-editor'); // NO i18N
            var undoref = self_.savecanvasaction($draggable,'editordrag',previousvalue,currentValue);
            zutils.overlapHandling($draggable , undoref);
        }

        // This will be pretty same as neweditorhanlder but handles all type of elements without creating the addition target canvas
        // FIXME: need to merge both in future with same data structure.
        this.canvascomponenthandler = function(event , ui , $draggable){
            var zdata = $draggable.data('zcanvas'); // NO I18N
            var elementjson = zdata.data;
            if(elementjson){
                var uioffset_ = ui.offset;
                var _container = $(this.config.editorcontainer);
                var _containeroffset = _container.offset();
                var positions  = {
                    l : uioffset_.left - _containeroffset.left,
                    t: uioffset_.top - _containeroffset.top
                }

                var jsonpos = elementjson.ui.value.position;
                jsonpos.startX = positions.l;
                jsonpos.startY = positions.t;

                this.addElement([elementjson]);
                var createelement = $('#' + elementjson.zcanvasId); 
                var undoref = this.savecanvasaction(createelement,'neweditor', null , elementjson); // NO I18N
                zutils.overlapHandling(createelement , undoref);
                return createelement;
            }
            
        }


        this.neweditorhandler = function(evt, ui, $draggable){
            var data = $draggable.data('zcanvas'); // NO i18N
            var uioffset = ui.offset;
            var editorcontainer = $(self_.config.editorcontainer)
            var generateId = zutils.getRandomId();
            var componentContainer = "<div class='editor zcanvas-editor zcanvas' id='" + generateId + "''></div>";//NO I18N
            editorcontainer.append(componentContainer);
            var targetId = $("#" + generateId);
            var targetpos = zutils.findpositionAndWidth(evt.target, uioffset, editorcontainer, targetId,true ,  data.data && data.data.zcMinWidth  ? data.data.zcMinWidth : null);
        	targetId.css({
        		left: targetpos.leftpos,
                top: targetpos.toppos
            });
            var targetwidth = zutils.findpositionAndWidth(evt.target, uioffset, editorcontainer, targetId,false ,   data.data && data.data.zcMinWidth  ? data.data.zcMinWidth : null);
             
            // eslint-disable-next-line zstandard/combine-properties
            targetId.css('width',targetwidth.targetwidth); // NO I18N
            targetpos.targetwidth = targetwidth.targetwidth;
        	var newConfig = zutils.zcopyobj(self_.config);
        	newConfig.editorcontainer = '#' + generateId;
        	newConfig.draggable = true;
            newConfig.handles = "all";//NO I18N
            newConfig.isPage = false;
            targetId.zcanvas(newConfig);
        	if(data.zctype === "component"){
                var _ui = data.data;
                 // eslint-disable-next-line webperf/layout-thrashing
                _ui.ui.value.position.width = targetwidth.targetwidth;
                if(_ui instanceof Promise){
                    _ui.then(function(res){
                        _ui = res;
                        self_.rendercomponent(_ui, targetId, targetpos , data);
                    })
                }else{
                    self_.rendercomponent(_ui, targetId, targetpos , data);
                }

                
            }
           
        }


            this.rendercomponent = function(_ui, targetId, targetpos , compdata){
                if(compdata.condition){
                    if(!compdata.condition(compdata)){
                        targetId.zremove();
                        return;
                    }
                }
                
                if(_ui.theme && _ui.theme !== "Custom Layout"){
                    var layoutinst = zclayout.prototype.layouts[_ui.theme];
                    _ui.ui.value.position.startX = targetpos.leftpos;
                    _ui.ui.value.position.startY = targetpos.toppos;
                    var $el = layoutinst.toDom(_ui, $(self_.container) , 0 , 0);
                    $el && zutils.invokeResize($el);
                    targetId.zremove();
                    return;
                }
                var dropNodeInstance = targetId.data("zcanvas");//NO I18N
                // move this flag to config in future
                var isdimenstionneed = _ui.relatedList;
                if(isdimenstionneed){
                	var _dimension = {
                            position: "absolute", // NO I18N
                            width: _ui.ui.value.position.width,
                            height: _ui.ui.value.position.height,
                            zIndex: _ui.ui.value.position.depth,
                             // eslint-disable-next-line webperf/layout-thrashing
                            left: targetpos.leftpos ,
                             // eslint-disable-next-line webperf/layout-thrashing
                            top: targetpos.toppos 
                        }
                	targetId.data('zcanvasdimensions' , _dimension); // NO I18N
                }
                dropNodeInstance.addElement(_ui.children);
                var widthObj = {'width' : _ui.ui.value.position.width , 'height' : _ui.ui.value.position.height }; // NO I18N
                targetId.css(widthObj);
                targetId.css(_ui.ui.value.style);
                if(_ui.zccompmeta){
                    targetId.data('zccompmeta' , _ui.zccompmeta); // NO I18N
                }

                targetId.addClass(_ui.ui.value.class).zaddClass(_ui.ui.value.class);
                var currentValue = canvasOutput.createJson(targetId);
                self_.resetheight();
                var undoref = self_.savecanvasaction(targetId,'neweditor', null , currentValue);
                zutils.overlapHandling(targetId , undoref);
                if(compdata.callback){
                    compdata.callback(targetId , compdata);
                }
            }

        this.layouthandler = function(evt,node){
            var $editor = $(self_.config.editorcontainer);
            var $layout = node.helper.children('.zclayout'); // NO I18N
            var $clone  = $layout.clone();
            $editor.append($clone);
            // eslint-disable-next-line webperf/layout-thrashing
            var targetpos = zutils.findpositionAndWidth(evt.target, node.offset, $editor, $clone, true);
            $clone.css({
                top: targetpos.toppos,
                left: targetpos.leftpos,
                position: 'absolute' // NO I18N
            })
            // eslint-disable-next-line webperf/layout-thrashing
            var targetwidth = zutils.findpositionAndWidth(evt.target, node.offset, $editor, $clone, false);
            // eslint-disable-next-line zstandard/combine-properties
            $clone.css('width', targetwidth.targetwidth); // NO I18N
            var layoutname = $layout.attr('data-layoutname'); // NO I18N
            var layoutinstance = zclayout.prototype.layouts[layoutname];
            layoutinstance.init($clone,false,self_.config.undoredomanager,null,null,self_.config.zcdropscope,self_.config.zdragcontainment);
            //TODO: Remove after UNDO REDO
            self_.config.onChange && self_.config.onChange('new',$clone); // NO I18N

            if(node && node.draggable && self_.config.zclayoutcontainer){
                var zdata = node.draggable.data('zcanvas'); // NO I18N
                if(zdata && zdata.fieldContainer){
                    var zmenu = $(zdata.fieldContainer).data('zcanvasMenu'); // NO I18N
                    zmenu && zmenu.reduceScope(zdata);
                }
            }

            return $clone;
        }

        this.boxhanlder = function(event , ui , node){
            var currenteditor = $(self_.config.editorcontainer);
            var movingnodes = $('.zcmovingnode');
            var $parentouter = ui.draggable.parent('.zctempenable'); // NO I18N
            if($parentouter.length){
                $parentouter.droppable('disable').removeClass('zctempenable'); // NO I18N
            }
            if(node.parent().is(currenteditor)){
                var undoredoObj = { action: 'link' , actionarray: [], node: node }; // NO I18N
                var instance = node.data('uiDraggable'); //NO I18N
                var posmoved = {
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: instance.position.left - instance.originalPosition.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: instance.position.top - instance.originalPosition.top
                }
                // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                node.zremove();
                
                instance.acceptable_destroyed = true;
                
                
                movingnodes.each(function(){
                    var $el = $(this).removeClass('zcmovingnode');
                    // eslint-disable-next-line webperf/layout-thrashing
                    var elpos = $el.position();
                    var newpos = {
                        // eslint-disable-next-line webperf/layout-thrashing
                        left: elpos.left + posmoved.left,
                        // eslint-disable-next-line webperf/layout-thrashing
                        top: elpos.top + posmoved.top
                    };
                    undoredoObj.actionarray.push({action: 'drag' , node: $el , previous: elpos , current: newpos});
                    $el.css(newpos);
                });
            //    undoredoObj.actionarray.push({action: 'callback' , node: node , callback: function() { tools.multiselect(self_.config,undoredo); }})
                tools.multiselect(self_.config,undoredo,false,true);
                // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                self_.savecanvasaction(node , 'link' , null , null , null, null , undoredoObj);
            }else{
                var undoredoObj = { action: 'link' , actionarray: [], node: node }; // NO I18N
                var $boxclone = ui.helper.clone(1);
                currenteditor.append($boxclone);
                self_.oneditorfieldpositionconvert(node, config.editorcontainer,$boxclone);
                 // eslint-disable-next-line webperf/layout-thrashing
                var nodepos = $boxclone.position();
                 // eslint-disable-next-line webperf/layout-thrashing
                var prevcontainer = zutils.getSelectorByElement(ui.helper.data('uiDraggable').offsetParent); // NO I18N
                var currentcontainer = config.editorcontainer;
                var json = canvasOutput.createJson($boxclone.addClass('zcanvas-editor'));
                canvasObjUtils._.map(json.children , function(item){
                    var $mnode;
                    if(item._type === 'component') {
                        // eslint-disable-next-line webperf/directly-select-with-id
                        $boxclone.find('#' + item.zcanvasId).attr('id' , '');
                         // eslint-disable-next-line webperf/directly-select-with-id
                       $mnode =  $(prevcontainer + ' #' + item.zcanvasId + '.zcmovingnode'); // NO I18N
                    }else{
                        $mnode = $(prevcontainer + ' .' + item.zcanvasId + '.zcmovingnode'); // NO I18N
                    } 
                    item.ui.value.position.startX += nodepos.left;
                    item.ui.value.position.startY += nodepos.top;
                    undoredoObj.actionarray.push({
                        action: 'editordrag', // NO I18N
                        node: $mnode,
                        previous: {
                            container: prevcontainer,
                            left: parseInt($mnode.css('left')), // NO I18N
                            top: parseInt($mnode.css('top')) // NO I18N
                        },
                        current: {
                            container: currentcontainer,
                            left: item.ui.value.position.startX,
                            top: item.ui.value.position.startY
                        }
                    })
                })
             //   undoredoObj.actionarray.push({action: 'callback' , node: node , callback: function() { tools.multiselect(self_.config,undoredo); }})
             zutils.pauseScoping(true);
             // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                self_.savecanvasaction(node , 'link' , null , null , null, null , undoredoObj);
                
                var inst = node.data('uiDraggable'); // NO I18N
                if(inst){
                	inst.acceptable_destroyed = true;
                }
                
                // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                node.zremove();
                $boxclone.zremove();
                movingnodes.zremove();
                self_.addElement(json.children);
                zutils.pauseScoping(false);
                
            }
           // self_.config.onChange && self_.config.onChange('drag',movingnodes); // NO I18N
        }


        this.prepareElement =  function(helperClone, data){
            // var innerComponents =  $(helperClone).find(".zcanvas-inner-component");
            // var holderNode = $(helperClone).find(".zcanvas-data-node");//NO I18N
            $(helperClone).find('.ui-resizable-handle').zremove(); // Remove Existing Resizable elements

            //self_.prepareElementStyle(helperClone);
            // FIXME: get from config
            var outetelement = $("#zcanvas-editor-outer");
          //  var selector = self_.config.editorcontainer+" > .zcanvas:not('.ui-draggable-dragging')"; //NO I18N
            var droppedField = $(helperClone).draggable({
                containment: self_.config.zdragcontainment || outetelement,
                zcGuide: true,
                snapTolerance: 5,
                znoposition: true,
                appendGuideTo: self_.config.editorcontainer,
                start: function(e) {
                    if(e.shiftKey){
                        return false;
                    }
                   // self_.selectfieldonEditor(e);
                },
                drag: function(e) {
                    if(e.shiftKey){
                        return false;
                    }
                },
                disabled: self_.config.alwaysdisabled,
                drop: function(e){e.stopPropagation()},
                stop: function(){ 
                    self_.highlightfields(true); 
                    // FIXME: Commented to check dual entry
                    // if($(e.target).is(':visible')) { 
                    //      self_.savecanvasaction(e.target,'drag',ui.originalPosition, ui.position) 
                    // }
                }, //NO I18N
                // smartGuides: self_.config.outercontainer+'>.zcanvas-editor:not(".zcanvas-selected-element"),'+self_.config.outercontainer+'>.editor>.zcanvas-field',//NO I18N
                // snapTolerance: 5,
                cancel: '',
                zconnectToSortable:'.zcanvas:not(.zc-non-linkable)', //NO I18N
                zconnectToSortableCondition: function(datael){
                    var data_ = datael.data('zcanvas'); // NO I18N
                    if(data_ && data_._type !== 'field' || data_.zctype && data_.zctype.indexOf('profileimage') > -1){
                        return true;
                    }
                    return false;
                },
                canvasguide: true,
                scroll: false,
              //  zdepthmanage: true,
                drag: function(){ self_.highlightfields();}
                // zmouseStop: function(){self_.test(event)}

            })
            .resizable(self_.getResizableOptionsByType(data.zctype))
            
            .click(self_.selectfieldonEditor)

            .data("zcanvas", data)//NO I18N

            .mouseover(self_.highlightfieldsoneditor)

            .mouseout(self_.highlightfieldsoneditor);

            droppedField.find('.zc-remove-meta').zremove(); // NO i18N

            droppedField.find('.zcanvas-inner-component').mouseover(self_.highlightfieldsoneditor).mouseout(self_.highlightfieldsoneditor);

            if(self_.config.zcdropscope){
                droppedField.draggable('option','scope',self_.config.zcdropscope); // NO I18N
            }

            return droppedField;
        }
        this.prepareEditor = function(zid , el){
            var generateId = zid || zutils.getRandomId();
            var createEditorNode = el || $("<div />");//NO I18N
            createEditorNode.addClass("editor zcanvas-editor zcanvas").attr('id', generateId); // NO I18N
            // var componentContainer = "<div class='editor zcanvas-editor zcanvas' id='"+ generateId +"''></div>";//NO I18N
            var newConfig = zutils.zcopyobj(self_.config);
            newConfig.editorcontainer = '#' + generateId;
            newConfig.draggable = true;
            newConfig.handles = "all";//NO I18N
            newConfig.containment = self_.config.editorcontainer;
            newConfig.outercontainer = self_.config.editorcontainer;
            newConfig.undoredomanager = self_.config.undoredomanager;
            newConfig.isPage = false;
            $(createEditorNode).zcanvas(newConfig);//NO I18N
            
            return createEditorNode;
        }

        this.handlefixed = function(eachJson , editorNode){
        	if(eachJson.ui.value.fixed){
                editorNode.attr("fixed","true");//NO I18N
            }else if(eachJson.ui.value.fixedHeight){
                editorNode.attr('data-fixed-y',true); // NO I18N
            }else if(eachJson.ui.value.fixedWidth){
                editorNode.attr('data-fixed-x',true); // NO I18N
            }
        }

        this.addElement = function(allInnerJson, outerContainer , options){
            var innerJsonLength = allInnerJson.length;
            var result = [];
            var availablelayouts = canvasObjUtils._.keys(zclayout.prototype.layouts);
            var outerstyles = outerContainer && outerContainer.ui.value.style && outerContainer.ui.value.style.default ? outerContainer.ui.value.style.default : {}
            var agjustpadding = zutils.getadjustpadding( outerstyles )
            for(var i = 0; i < innerJsonLength; i++){
                var eachJson = allInnerJson[i];
                var eachNodeType = eachJson._type;
                // FIXME: Static component check is temperory
                if(eachNodeType === "component" || eachNodeType === "static_content" ){
                    var editorcontainer = self_.container;
                    if(eachJson.theme && eachJson.theme && availablelayouts.indexOf(eachJson.theme) > -1){
                        var editorNode = zclayout.prototype.layouts[eachJson.theme].toDom(eachJson,editorcontainer, agjustpadding.paddingLeft , agjustpadding.paddingTop);
                     // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                        this.handlefixed(eachJson , editorNode); 
                        this.config && this.config.onaddelement && this.config.onaddelement(editorNode , eachJson);
                        if(eachJson.ui.value.position._locked_ === 'true'){
                            this.config.lockhandler && this.config.lockhandler(null , editorNode , true);
                        }
                    }else{
                        var editorNode = self_.prepareEditor(eachJson.zcanvasId);
                        var childrenNodes = eachJson.children;
                        var childrenNodesLength = childrenNodes.length;
                        
                        result.push(editorNode);
                         // eslint-disable-next-line webperf/layout-thrashing
                        editorcontainer.append(editorNode);
                        if(eachJson.ui.value.position._locked_ === 'true'){
                            this.config.lockhandler && this.config.lockhandler(null , editorNode , true);
                        }
                        var _dimension = {
                            position: "absolute", // NO I18N
                            width: eachJson.ui.value.position.width,
                            height: eachJson.ui.value.position.height,
                            zIndex: eachJson.ui.value.position.depth,
                             // eslint-disable-next-line webperf/layout-thrashing
                            left: eachJson.ui.value.position.startX + agjustpadding.paddingLeft,
                             // eslint-disable-next-line webperf/layout-thrashing
                            top: eachJson.ui.value.position.startY + agjustpadding.paddingTop
                        }
                        // eslint-disable-next-line webperf/layout-thrashing
                        editorNode.css(_dimension);
                     // eslint-disable-next-line zstandard/no-commoncode-in-ifelse
                        this.handlefixed(eachJson , editorNode); 
                        if(eachJson.relatedList){
                            _dimension._locked_ = eachJson.ui.value.position._locked_;
                            editorNode.data('zcanvasdimensions', _dimension); // NO I18N
                         // eslint-disable-next-line zstandard/combine-properties
                            editorNode.data('zcelementdata' , eachJson.ui.value.system_id); // NO I18N
                        }

                        if(eachJson.ui.value.editorclass){
                            // eslint-disable-next-line webperf/layout-thrashing
                            editorNode.addClass(eachJson.ui.value.editorclass);
                        }
                    //    editorNode.css(eachJson.ui.value.style);
                        self_.config.toolsRef.applyjsontostyle(editorNode , eachJson.ui.value.style , null , null , true)
                        // eslint-disable-next-line webperf/layout-thrashing
                        editorNode.addClass(eachJson.ui.value.class).zaddClass(eachJson.ui.value.class);
                        editorNode.zremoveClass('zcanvas-editor'); // NO I18N
                        if(eachJson.ui.value.class && eachJson.ui.value.class.indexOf('zc-lsection') > -1){
                            zutils.changelayoutscope(this , 'Section Layout' , true); // NO I18N
                        }
                        if(childrenNodesLength > 0){
                            var data = $(editorNode).data("zcanvas");//NO I18N
                            data.addElement(childrenNodes , null ,options);
                        }
                    }
                    
                    this.config && this.config.onaddelement && this.config.onaddelement(editorNode , eachJson);
                    result.push(editorNode);
                    
                } else if(self_.config.listtypes.indexOf(eachNodeType) > -1){ //NO I18N
                     var addNode = self_.addrelatedlist(eachJson,allInnerJson);
                     
                     this.config && this.config.onaddelement && this.config.onaddelement(addNode , eachJson);
                     result.push(addNode);
                 } else{
                   var addNode = self_.addsingleElement(eachJson, outerContainer);
                   if(options && options.fieldscoping){
                        var fieldmenu = $(eachJson.fieldContainer).data('zcanvasMenu'); // NO I18N
                        if(fieldmenu){
                            fieldmenu.reduceScope(eachJson);
                        }
                    }
                   result.push(addNode);
                   this.config && this.config.onaddelement && this.config.onaddelement(addNode , eachJson);
                }
            }
            return result;
        }

        this.addsingleElement = function(json,outerContainer){
            var createdDom = canvasOutput.innerNode(json, true);
            var jsonClone = canvasObjUtils._.clone(json);
            var $dom = $(createdDom);
            var data = $dom.zdata()[0];
           // $dom.zccss(json.ui.value.style);
           $dom.addClass(data.zcanvasId);
           this.fieldstyling($dom , json.ui);
            var outerstyles = outerContainer && outerContainer.ui.value.style && outerContainer.ui.value.style.default ? outerContainer.ui.value.style.default : {}
            var agjustpadding = zutils.getadjustpadding( outerstyles )
            var isHeightNeed = self_.config.multiresize && self_.config.multiresize.indexOf(data.zctype) > -1 ? true : false
            var addNode = self_.prepareElement(createdDom, data);
            var _dimension = {
                position: "absolute",//NO I18N
                 // eslint-disable-next-line webperf/layout-thrashing
                left: jsonClone.ui.value.position.startX + agjustpadding.paddingLeft,
                 // eslint-disable-next-line webperf/layout-thrashing
                top: jsonClone.ui.value.position.startY + agjustpadding.paddingTop,
                width: jsonClone.ui.value.position.width,
                zIndex: jsonClone.ui.value.position.depth
               // height: json.ui.value.position.height
            }
            if(json.zctype && json.zctype.indexOf('profileimage') > -1){
               self_.adjustimagetooriginal(addNode , jsonClone);
            }
            addNode.css(_dimension).addClass('zcanvas-on-editor');
            isHeightNeed && addNode.height(json.ui.value.position.height);
            $(self_.container ||  config.editorcontainer).append(addNode);
            
            if(json.ui.value.fixed){
                addNode.attr('fixed',true); // NO I18N
            }else if(json.ui.value.fixedHeight){
                addNode.attr('data-fixed-y',true); // NO I18N
            }else if(json.ui.value.fixedWidth){
                addNode.attr('data-fixed-x',true); // NO I18N
            }

            
            return addNode;
        }


        this.fieldstyling = function(node , ui , classflag){
            var field = node;
            var holder = node.find('.zcanvas-holder'); // NO I18N
            var lable = node.find('.zcanvas-label'); // NO I18N
            var value = node.find('.zcanvas-value-container'); // NO I18N
            if(field.length && ui.value){
                field.zccss(ui.value.style);
                classflag && ui.value.class && field.zaddClass(ui.value.class);
            }
            if(holder.length && ui.holder) {
                holder.zccss(ui.holder.style);
                classflag && ui.holder.class && holder.zaddClass(ui.holder.class);
            }
            if(lable.length && ui.label){
                lable.zccss(ui.label.style);
                classflag && ui.label.class && lable.zaddClass(ui.label.class);
            }
            if(value.length && ui.field){
                value.zccss(ui.field.style);
                classflag && ui.field.class && value.zaddClass(ui.field.class);
            }
            if(lable.length && ui.icon){
                lable.zccss(ui.icon.style);
                classflag && ui.icon.class && lable.zaddClass(ui.icon.class);
            }
        }

        this.convertAbsoluteToRelative = function(element, parent, extra){
            var $parent = $(parent);
            var parentposition = $parent.offset();
            var bordertoppos = $parent.css('border-top-width'); // NO I18N
            var borderleftpos = $parent.css('border-left-width'); // NO I18N
            var elementposition = $(element).position();
            elementposition.left = elementposition.left - parseInt(borderleftpos);
            elementposition.top = elementposition.top - parseInt(bordertoppos);
            var roundWidth = Math.round($(element).outerWidth());
            $(element).css({
                       left: elementposition.left - parentposition.left + (extra && extra.extraX ? extra.extraX : 0 ),
                       top: elementposition.top - parentposition.top + (extra && extra.extraY ? extra.extraY : 0 ),
                       width: roundWidth,
                       position: 'absolute'//NO I18N
                       
            });
            // $(element).css('left',elementposition.left - parentposition.left + ((extra && extra.extraX) ? extra.extraX : 0 )).css('top',elementposition.top - parentposition.top + ((extra && extra.extraY) ? extra.extraY : 0 )).css('position','absolute'); //No I18N
            $(parent).css('position','relative'); //No I18N
        }

        this.adjustimagetooriginal = function(el , json){
            if(el.is('img')){
                el = el.closest('.zcanvas-field'); // NO I18N
            }
            var targetNode = el;
            var imageContainerValue = targetNode.find("img");//NO I18N
            if(!json){
                var targetWidth = targetNode.width();
                var targetHeight = targetNode.height();
                var props = imageContainerValue.css(['padding-left' , 'padding-right' , 'padding-top' , 'padding-bottom' , 'border-top-width' , 'border-bottom-width' , 'border-left-width' , 'border-right-width']); // NO I18N
                if(!props){
                	// To fill empty
                	var bdrprops = zutils.getBorderProperties({});
                    var spaceprops = zutils.getSpacingProperties( 'padding' , {}); // NO I18N
                    props = canvasObjUtils._.extend(bdrprops , spaceprops);
                }
            }else{
                var targetWidth = json.ui.value.position.width;
                var targetHeight = json.ui.value.position.height;
                var styletag = {}
                if(json.ui.field && json.ui.field.style && json.ui.field.style.default){
                    styletag = json.ui.field.style.default;
                }
                var bdrprops = zutils.getBorderProperties(styletag);
                var spaceprops = zutils.getSpacingProperties( 'padding' , styletag); // NO I18N
                var props = canvasObjUtils._.extend(bdrprops , spaceprops);
            }
            targetWidth = targetWidth - parseInt(props['padding-left']) - parseInt(props['padding-right']) - parseInt(props['border-left-width']) - parseInt(props['border-right-width']); // NO I18N
            targetHeight = targetHeight - parseInt(props['padding-top']) - parseInt(props['padding-bottom']) - parseInt(props['border-top-width']) - parseInt(props['border-bottom-width']); // NO I18N
            var result = {maxWidth: targetWidth > 0  ? targetWidth : 0 , maxHeight: targetHeight > 0 ? targetHeight : 0};
            imageContainerValue.css(result);
        }

        this.bindlabelresize = function(el){
        	var labelel = el.find('.zcanvas-label'); // NO I18N
        	if(labelel.is('.zcicon')){
        		if(!labelel.hasClass('ui-resizable')){
        			labelel.resizable({
        				containment: 'parent', // NO I18N
                        handles: 'se', // NO I18N
                        classes: {'ui-resizable-se':'zcanvas-resizable-se'}, // NO I18N
                        aspectRatio: 1,
                        zhandlevisible: true,
                        start: function(e, ui){
                            var fsize = ui.helper.children('.zciconcontainer').css('font-size'); // NO I18N
                            var inst = ui.helper.data('uiResizable'); // NO I18N
                            if(!inst.zcmetastyles){
                            	inst.zcmetastyles = {};
                            }
                            inst.zcmetastyles.fsize = fsize;
                            var _field = ui.helper.closest('.zcanvas-field'); // NO I18N
                            if(_field.length){
                                var  _containment = zutils.getClosestEditor(_field);
                                inst.options.containment = _containment;
                                inst.plugins && inst.plugins.start && inst.plugins.start.filter(function(l){
                                    if (l[0] === 'containment'){
                                        l[1].bind(ui.helper)(e,ui);
                                    };
                                })
                            }
                        },
                        resize: function(e, ui){
                        	var element = ui.helper;
                        	var inst = element.data('uiResizable'); // NO I18N
                            var elicon = element;
                            var padding = elicon.css(['padding-left' , 'padding-right' , 'padding-top' , 'padding-bottom' , 'border-top-width' , 'border-bottom-width' , 'border-left-width' , 'border-right-width'] ); // NO I18N
                            var size = inst.size.width;
                            var fsize = size - canvasObjUtils._.max([ parseInt(padding['padding-left']) , parseInt(padding['padding-right']) ]) - canvasObjUtils._.max([ parseInt(padding['padding-top']) , parseInt(padding['padding-bottom']) ]) - canvasObjUtils._.max([ parseInt(padding['border-left-width']) , parseInt(padding['border-right-width']) ]) -  canvasObjUtils._.max([ parseInt(padding['border-top-width']) , parseInt(padding['border-bottom-width']) ]); // NO I18N
                            elicon[0].style.setProperty('font-size', fsize + 'px', 'important'); // NO I18N
                        },
                        stop: function(e,ui){
                        	var inst = ui.helper.data('uiResizable'); // NO I18N
                        	
                             var parentdata = zutils.getParentData(ui.helper.closest('.zcanvas-field')); // NO I18N
                             var tools = parentdata.config.toolsRef;
                             var selector = tools.getSelectorByElement(ui.helper, 'default'); // NO I18N
                             var undoredoobj = {
                                 action: 'link', // NO I18N
                                 actionarray: [], // NO I18N
                                 node: selector
                             }
                             var elicon = ui.helper; // NO I18N
                             var previous = {'font-size':  inst.zcmetastyles.fsize}; // NO I18N
                             var current = {'font-size': elicon.css('font-size')}; // NO I18N
                             var fundo = {
                                 action: 'action', // NO I18N
                                 node: selector, // NO I18N
                                 previous: previous,
                                 current: current,
                                 state: 'default' // NO I18N
                             }
                             undoredoobj.actionarray.push(fundo);
                             var styleselector = tools.getSelectorByElement(ui.helper); // NO I18N
                             var fobj = tools.getstylebyselector(selector, true);
                             if(!fobj.default){
                                 fobj.default = {};
                             }
                             fobj.default['font-size'] = current['font-size']; // NO I18N
                             elicon.css({'font-size':'',width:'',height:''}); // NO I18N
                             tools.updatestyle({} , styleselector , fobj.default);
                             parentdata.savecanvasaction(ui.helper,null, null , null , null , null , undoredoobj);
                        }
        			})
        		}
        	}else if(labelel.hasClass('ui-resizable')){ // NO I18N
        		labelel.resizable('destroy'); // NO I18N
        	}
        	
        	
        }
      
        // FIXME: Must be rewrite the code with less complex
        this.getResizableOptionsByType = function(type){
          //  var selector = self_.config.editorcontainer+" > .zcanvas:not('.ui-draggable-dragging')";//NO I18N
          //  var selectorResizing = self_.config.editorcontainer+" > .zcanvas:not('.ui-resizable-resizing')";//NO I18N
            if( !type || self_.config.multiresize && self_.config.multiresize.indexOf(type) > -1) { //NO I18N
                return {
                    handles: "all" ,//NO I18N
                    containment: self_.config.editorcontainer,
                    zcGuide: true,
                    snapTolerance: 5,
                    appendGuideTo: self_.config.editorcontainer,
                    classes:{
                        'ui-resizable-se':'zcanvas-resizable-se' //No I18N
                    },
                    resize: type !== 'profileimage' ? function(){return;} : function(e){ // NO I18N
                        self_.adjustimagetooriginal($(e.target));
                    },
                    start: self_.fieldresizestarthandler,
                    stop: self_.fieldresizestophandler,
                    // resize: self_.fieldresizestarthandler
                    zrestrict: { editor: self_.config.editorcontainer , element: '.zcanvas', nomin: true, alignable: true,skipelement:'.zcanvas-row-separator'} // NO I18N
                    // smartGuides: self_.config.outercontainer+'>.zcanvas-editor:not(".zcanvas-selected-element"),'+self_.config.outercontainer+'>.editor>.zcanvas-field',//NO I18N
                    // snapTolerance: 5
                }
            } 
            return {
                handles: "e" ,//NO I18N
                    containment: self_.config.editorcontainer,
                    zcGuide: true,
                    snapTolerance: 5,
                    appendGuideTo: self_.config.editorcontainer,
                    classes:{
                        'ui-resizable-e':'zcanvas-resizable-e' //No I18N
                    },
                  //  autoHide: true,
                    start: self_.fieldresizestarthandler,
                    stop: self_.fieldresizestophandler,
                    resize: self_.fieldresizestarthandler,
                    zrestrict:{ editor: self_.config.editorcontainer , element: '.zcanvas',alignable: true,skipelement:'.zcanvas-row-separator' ,nominheight:true, resizeclass:'zccbutton' } // NO I18N
                    // smartGuides: self_.config.outercontainer+'>.zcanvas-editor:not(".zcanvas-selected-element"),'+self_.config.outercontainer+'>.editor>.zcanvas-field',//NO I18N
                    // snapTolerance: 5
            }
        }
       
        this.selectfieldonEditor = function(e,flag){
            tools.selectfield(e,null,flag);
          //  e.stopPropagation();
        }

        this.highlightfieldsoneditor = function(e ){
            var flag = e.type === 'mouseover' ? true : false ;
            tools.hoverfield(e , flag);
        }

        // FIXME: 
        this.savecanvasaction = function(element, action, previousValue, currentValue, baseValue, baseElement , object){
           var referenceNode;
           var undoredoObj;
           if(!object){
               if(action === 'action' || action === 'editordrag' || action === 'neweditor' || action === 'replaceaction' || action === 'resize' || action === 'drag'){
                referenceNode = $(element);
               }else{
                 referenceNode = $(element).closest('.zcanvas-field');
               }

               // FIXME: This temp onBeforeChange Needs to be Implement Properly for all 
               if(self_.config.onBeforeChange){
                   self_.config.onBeforeChange(action , referenceNode );
               }

                undoredoObj = {
                    editor: self_.config.editorcontainer,
                    previous: previousValue,
                    current: currentValue || canvasOutput.createJson(referenceNode), //NO I18N
                    action: action,
                    node: referenceNode
                }
    
                if(baseValue){
                    undoredoObj.base = baseValue;
                }
                if(baseElement){
                    undoredoObj.baseElement = baseElement;
                }
           }else{
               undoredoObj = object;
               referenceNode = element;
               if(!undoredoObj.editor){
                   undoredoObj.editor = self_.config.editorcontainer;
               }
           }
           undoredoObj.changedetection = self_.config.onChange.bind(self_);
            if(!self_.config.disableundoredo){
                    undoredo.push(undoredoObj);
            }
          //  undoredo.push(undoredoObj);
            self_.config.onChange(action,$(referenceNode));
            return undoredoObj;
        }

        this.getEachNodeJson = function(selectedField){
            if(selectedField){
                return canvasOutput.createJson(selectedField, this.container);
            } else {
                return canvasOutput.createJson(this.container);
            }
            
        }
        
        this.getTableNodeJson =  function(){
            return canvasOutput.tableoutlet(this.container);
        }  

        this.getHtml = function(json,version,viewType,viewWidth){
            if(version){
                return createStruture.layoutHtml(this.container,undefined,undefined,viewType,viewWidth);
            }
            if(json){
                return canvasOutput.html(undefined, json,undefined,viewType,viewWidth);
            } else {
                return canvasOutput.html(this.container,undefined,undefined,viewType,viewWidth);
            }
        }

        this.getInnerNode =  function(json){
            return canvasOutput.innerNode(json);
        }

        this.dragoverhandler = function(event, ui){
            self_.highlightfields();
            $(ui.draggable).trigger(event,ui,self_.config.editorcontainer);
            zutils.triggerEvent('fieldDragOnEditor',config.editorcontainer,event,ui); //NO I18N
            if(self_.config.onOver){
                if(!ui.draggable.parents('.zcanvas-editor').is(self_.config.editorcontainer)){
                    self_.config.onOver(ui , self_.config.editorcontainer);
                }
            }
        }

        this.dragouthandler = function(event, ui){
            self_.highlightfields(true);
            $(ui.draggable).trigger(event,ui,self_.config.editorcontainer);
            zutils.triggerEvent('fieldDragOutEditor',config.editorcontainer,event,ui); //NO I18N
            if(self_.config.onOut){
                if(!ui.draggable.parents('.zcanvas-editor').is(self_.config.editorcontainer)){
                    self_.config.onOut(ui);
                }
            }
        }
  
        this.fieldresizestarthandler = function(event, ui){
            self_.highlightfields();
           // self_.selectfieldonEditor(event);
            zutils.triggerEvent('fieldResizeStart',config.editorcontainer,event,ui); //NO I18N
        }
        this.fieldresizestophandler = function(event, ui){
            self_.highlightfields(true);
            self_.savecanvasaction(event.target,'resize',canvasObjUtils._.extend(ui.originalSize , ui.originalPosition),canvasObjUtils._.extend(ui.size , ui.position)); //NO I18N
            zutils.triggerEvent('fieldResizeStop',config.editorcontainer,event,ui); //NO I18N
        }
        this.fieldresizinghandler = function(event, ui){
            zutils.triggerEvent('fieldResizeStop',config.editorcontainer,event,ui); //NO I18N
        }

        this.mergeHandler = function(parentMergeNode,mergeType,baseData,previousValue,baseNode){
           self_.selectfieldonEditor(parentMergeNode);
           zutils.adjustWidth(parentMergeNode,true);
           undoredo.removePrev('new',baseNode); // NO I18N
           self_.savecanvasaction(parentMergeNode,mergeType,previousValue,null,baseData);
        }
        
        this.unmergeHandler = function(element,newPos,previousValue,currentValue,parent){
            var $el = $(element);
            $el.css({left: newPos.x,top: newPos.y});
            $(self_.config.editorcontainer).append($el);
            self_.prepareElement($el,$el.data('zcanvas')); // NO i18N
            var baseMergeData = canvasOutput.createJson($el);
            selectable.setSelectables(document.querySelectorAll(self_.config.editorcontainer + '> .zcanvas'),false,false);//NO I18N
            self_.savecanvasaction(parent,'unmerge',previousValue,currentValue,baseMergeData,$el);
        }

        this.editorClickHandler = function(e){
            self_.selectfieldonEditor(e);
        }

        this.highlightfields = function(flag){
            var $editor = $(self_.config.editorcontainer)
            if(flag){
                $editor.removeClass('zcanvas-overeditor');
            }else{
              !$editor.hasClass('ui-droppable-disabled') && $editor.addClass('zcanvas-overeditor'); // NO I18N
            }
        }

        this.undoHandler = function(){
            undoredo.undo();
        }

        this.redoHandler = function(){
            undoredo.redo();
        }

        this.toolCallback = function(previous,current,action){
            var action = !action ? 'action' : action; //NO I18N
            self_.savecanvasaction(this.container,action,previous,current);
        }

        this.oneditorfieldpositionconvert = function(element,parent,dropfield,extra){
            var $parent = $(parent);
            var parentPos = $parent.offset();
            var bordertoppos = $parent.css('border-top-width'); // NO I18N
            var borderleftpos = $parent.css('border-left-width'); // NO I18N
            var elPos = element.offset();
            elPos.left = elPos.left - parseInt(borderleftpos);
            elPos.top = elPos.top - parseInt(bordertoppos);
            dropfield.css({
                top: elPos.top - parentPos.top + (extra && extra.extraY ? extra.extraY : 0),
                left: elPos.left - parentPos.left + (extra && extra.extraX ? extra.extraX : 0)
            })
        }

        this.unmerge = function(element){
            canvasFieldmerge && canvasFieldmerge.unmerge(element);
        }

        this.changedetection = function(action){
            self_.config.onChange(action);
        }

        this.addsection = function(positions){
            var container = $(self_.config.editorcontainer);
            var paddingRight = parseInt(container.css('padding-left')); // NO I18N
            if(positions){
                var toppos = positions.top;
                var cwidth = positions.width;
                var leftt = positions.left || paddingRight;
            } else {
                var childrens = container.children('.zcanvas'); // NO I18N
            
                var height = canvasObjUtils._.max(childrens.map(function(){
                    return  this.clientHeight + this.offsetTop;
                }));
                var toppos = height + 10;
                var cwidth = container.width() - paddingRight;
                var leftt = paddingRight;
            }
            
            var element = self_.prepareNewElement();

            element.css({
                top: toppos,
                left: leftt,
                width: cwidth
            })

            element.zaddClass('zc-lsection'); // NO I18N

            container.append(element);

            self_.resetheight();

            self_.savecanvasaction(element,'neweditor');

            element.click();

            zutils.changelayoutscope(self_ , 'Section Layout' , true); // NO I18N

            return element;

         }

         this.prepareNewElement = function(id,el,config){
            var generateId = id || zutils.getRandomId();
            var createEditorNode = el || $("<div />");//NO I18N
            createEditorNode.addClass("editor zcanvas-editor zcanvas").attr('id', generateId); // NO I18N
            var newConfig = zutils.zcopyobj(self_.config);
            newConfig.editorcontainer = '#' + generateId;
            newConfig.draggable = true;
            newConfig.handles = "all";//NO I18N
            newConfig.outercontainer = self_.config.editorcontainer;
            newConfig.undoredomanager = self_.config.undoredomanager;
            newConfig.toolsRef = self_.config.toolsRef;
            newConfig.isPage = false;
            $.extend( newConfig, config );
            createEditorNode.zcanvas(newConfig);//NO I18N

            return createEditorNode;
        }

        this.resetheight =canvasObjUtils._.debounce( function(){
            if(!self_.config.isPage){
                return;
            }
            var container = $(self_.config.editorcontainer);
            var currentheight = container.height();
            var childrens = container.children('.zcanvas'); // NO I18N

            var height = canvasObjUtils._.max(childrens.map(function(){
                return  this.clientHeight + this.offsetTop;
              }));
            if(currentheight < height + 500 ){
                container.css('height',height + 500); // NO I18N
            }
        } , 500 );

        this.resizehandle = function(){
            this.resetheight();
        }
        this.init();
    }
    
    window.zcanvas = zcanvas;

    $.fn.zcanvas = function(opts) {
        return this.each(function() {
            var o = $(this);
            if (!o.data('zcanvas')) {
                o
                    .data('zcanvas', new zcanvas(this, opts));//NO I18N
            }
        });
    };
})();


;(function(){ // eslint-disable-line zstandard/no-global-function-call
    var zcanvasMenu = function(el, config){
        var self_ = this;
        this.config = canvasObjUtils._.defaults(config || {}, {
            fieldContainer: '.right-menu',//NO I18N
            headingClass: 'zcanvas-menu-heading',//NO I18N
            fieldClass: 'zcanvas-field',//NO I18N
            editorcontainer: '.editor',//NO I18N
            itemClass: "zcanvas-on-editor"//NO I18N
        });

        if(!config){
            return;
        }
        this.init = function(){
           // var splitGroups = canvasObjUtils._.groupBy(self_.config.fields, function(el){ return  el.group });
           var fieldcontainer =  $(this.config.fieldContainer);
            var menuInnerNode = this.getTemplate(self_.config);
            var searchNode = this.searchTemplate();
            if(!this.config.nosearch){
                fieldcontainer.prepend(searchNode);
            }
            fieldcontainer.append(menuInnerNode.children()).on('menupush',this.menupushhandler); // NO I18N
            var draggables =  fieldcontainer.find('.' + this.config.fieldClass + ', .zcanvas-submenu-heading:not(.zc-non-draggable)');
            if(!this.config.manualconfig){
                this.configDraggable(draggables);
            }
            
        }

        this.configDraggable = function(element){
            element.draggable({
                helper: function(){
                    var el_ = $(this);
                    var data = el_.data('zcanvas'); // NO I18N
                    if(!data){
                        var dataMap =  $(self_.config.fieldContainer).data('zcdatamap'); // NO i18N
                        var uid = el_.attr('data-uniquekey'); //NO I18N
                        data = dataMap[uid];
                        el_.data('zcanvas',data); // NO I18N
                    }
                    return el_.clone().data('zcanvas',data); // NO I18N
                },
                revert: 'invalid', //No I18N
                start: this.dragstarthandler,
                stop: this.dragstophandler,
                drag: this.dragdragginghandler,
                reverting: this.dragreverthandler,
                cursorAt:{
                    top: 0, left: 5
                },
                znoposition: true,
                appendTo: 'body',//NO I18N
                scroll: false,
                zcGuide: true,
                zcGuideSelector: "#zcanvas-editor-outer > .zcanvas",//NO I18N
                zconnectToSortable:'.zcanvas:not(.zc-non-linkable)', //NO I18N
                zconnectToSortableCondition: function(datael){
                    var data = datael.data('zcanvas'); // NO I18N
                    if(data._type !== 'field' || data.zctype && data.zctype.indexOf('profileimage') > -1){
                        return true;
                    }
                    return false;
                }
            });

            element.on('dropover',function(event,ui){
                self_.dragdropoverhandler(event,ui);
             }).on('dropout',function(event,ui){
                 self_.dragdropouthandler(event,ui);
             });

             if(self_.config.zcdropscope){
                 element.draggable('option','scope',self_.config.zcdropscope); // NO I18N
             }
        }
        this.getRow = function(data, innerValueOnly){
            var createNode = $("<div />");
            data.fieldContainer = config.fieldContainer;
            createNode.data({
                "zcanvas": JSON.parse(JSON.stringify(data)) //NO I18N
            }).addClass(this.config.fieldClass).addClass("zcanvas-on-menu").addClass('zcdatauniquekey' + data[this.config.uniqueId]).attr("data-uniquekey",data[this.config.uniqueId]).html(data.iconhtml ? data.iconhtml : data.zclabel).zaddClass(this.config.fieldClass); // NO I18N
            // createNode.attr({
            //     "data-zcanvas-menu-container": JSON.stringify(config.fieldContainer)//NO I18N
            // })
            if(data.formationclass){
                createNode.addClass(data.formationclass);
            }
            if(this.config.formationclassbykey && this.config.formationclassbykey.key && this.config.formationclassbykey.value === data[this.config.formationclassbykey.key]){
                createNode.addClass(this.config.formationclassbykey.class); 
            }
            if(data.iconhtml){
            	createNode.attr('title' , data.zclabel); // NO I18N
            	createNode.addClass('zcanvas-searchby-title'); // NO I18N
            }
            if(self_.config.preform){
                var preformedElement = $('<div/>').addClass('zcanvas-menuhelper').hide();
                createNode.append(preformedElement);
                if(self_.config.preformhtml){
                    preformedElement.html(self_.config.preformhtml(data));
                }else{
                    preformedElement.html(zutils.getEditorView(data,true));
                }
            }
            
            if(data.hidden){
            	createNode.addClass('zcanvas-menuhidden'); // NO I18N
            }

            if(self_.config.preformattr){
                var attrdata = data[self_.config.preformattr.key] || data[self_.config.preformattr.key2];

                for(attr in self_.config.preformattr.attr){
                    attrdata && createNode.attr( attr ,   self_.config.preformattr.attr[attr] + attrdata);
                }

            }


            if(innerValueOnly){
                return  data.iconhtml ? data.iconhtml : data.zclabel ;
            } else {
                return  createNode;
            } 
            
            // return '<div data-zcanvas='+encodeURI(JSON.stringify(data))+' class="zcanvas-field zcanvas-on-menu" id='+data.unique_key+' data-zcanvas-menu-container='+JSON.stringify(config.fieldContainer)+'><div class="zcanvas-field-span">'+data.zclabel+'</div></div>';
        }

        this.searchTemplate =  function(){
            var createSearchNode = '<div class="sidebar_search pR" id="sidebar_search"> <input type="text" data-zcqa="canvas_field_search" placeholder="' + I18n.getMsg('crm.label.search') + '" oninput="zutils.search(this)" id="sidemenuSearchInput" autocomplete="off"> <span class="IP_searchIconNew dIB pA"></span> </div>';//NO I18N
            return createSearchNode;
        } 

        this.getTemplate = function(data){
            // if(!data || !data.length){
            //     throw 'Data Must be present in array format'; //No I18N
            // }
            var createNode = $("<div />");
            var groupData =  data.groups;
            var dataMap = {};
            var createrow  = function(uidata){
                this.append(self_.getRow(uidata)); 
            }
            for(key in groupData){
                var createHeading = $("<h6 />");
                createHeading.addClass(self_.config.headingClass).html( zutils.getExternali18n ? zutils.getExternali18n(key) : key);
                if(self_.config.submenuattr){
                    createHeading.attr(self_.config.submenuattr.key , self_.config.submenuattr.prefix + 'section-' + key); // NO I18N
                }
                createNode.append(createHeading);
                var createContainerNode = $("<div />", {class: 'zcanvas-field-wrapper'});
                createContainerNode.attr({id : "zcanvas-" + key}).attr('data-wrappername', key);//NO I18N
                createNode.append(createContainerNode);
                var maindata = groupData[key].data;
                var data = [];
                if(!maindata){
                    
                    for(subkey in groupData[key]){
                        var subheading = $("<h6 />",{class: 'zcanvas-submenu-heading'}).attr({'data-uniquekey': subkey , 'data-submenuid' : groupData[key].sectionid});
                        subheading.html(subkey);
                        subheading.addClass('zcanvas-component zc-non-draggable'); // NO I18N
                        
                        // if(groupData[key][subkey].data.length < 2){
                        //     subheading.addClass('zc-non-draggable')
                        // }else{
                            
                        // }
                        createContainerNode.append(subheading);
                        var subcreationnode = $("<div />",{class: 'zcanvas-submenu-container'});
                        subcreationnode.attr({id : "zcanvas-" + key + '-' + subkey});//NO I18N
                        data = this.normalize(groupData[key][subkey].data,key,dataMap);
                        dataMap[subkey] = groupData[key][subkey];
                        dataMap[subkey].zctype = 'component';
                        dataMap[subkey].zcsubtype = 'submenu';
                        dataMap[subkey].zclabel = subkey;
                        dataMap[subkey].zcvalue = '';
                        
                        // eslint-disable-next-line jQuery-chaining
                        subcreationnode.append("<div class='zcfieldConnectLine'></div>");//NO I18N
                        $(self_.config.fieldContainer).data('zcdatamap',dataMap);
                        data.map(createrow.bind(subcreationnode));
                        createContainerNode.append(subcreationnode);

                        if(self_.config.preformattr){
                            var attrdata = dataMap[subkey][self_.config.preformattr.key] || dataMap[subkey][self_.config.preformattr.key2];
            
                            for(attr in self_.config.preformattr.attr){
                                attrdata && subheading.attr( attr ,   self_.config.preformattr.attr[attr] + 'submenu-' + attrdata);
                            }
            
                        }
                    }
                }else{
                    data = this.normalize(groupData[key].data,key,dataMap);
                    $(self_.config.fieldContainer).data('zcdatamap',dataMap);
                    data.map(createrow.bind(createContainerNode));
                }
                // createNode.append(createContainerNode);
                
            }
            return createNode;
        }


        this.getBoundedRect = function(element){
            return {
                start:{
                    top: element.position().top,
                    left: element.position().left
                },
                end:{
                    top: element.position().top + element.height(),
                    left: element.position().left + element.width()
                }  
            };
        }

        this.dragstarthandler = function(event,ui,external){
            var data = external || zutils.getdatafromelement(this);
            var $helper = $(ui.helper);
            var $zhelper = $helper.find('.zcanvas-menuhelper');
            var $target = $(event && event.target);
            var draggable = $target.draggable('instance'); // NO I18N
            if($zhelper.length){
                $helper.html($zhelper.html());
                data.zcanvasId = zutils.getRandomId();
                $helper.find('.zcanvas-data-node').attr('data-zcanvasid',data.zcanvasId); // NO i18N
            }else if(data && data.templateHtml){
                $helper.html(data.templateHtml);
            }else{
                if(self_.config.globalhidelabel){
                data.hideLabel = true;
                }

                $helper.html(zutils.getEditorView(data)).addClass(data.zcanvasId);

                if(self_.config.defaulticons && self_.config.defaulticons[data[self_.config.uniqueId]]){
                	var _icon = self_.config.defaulticons[data[self_.config.uniqueId]];
                	$helper.find('.zcanvas-label').html('').addClass(_icon).addClass('zcicon').attr('zc-icon',_icon);
                }
            }
            

            // For apply the special style to the element
            if(self_.config.defaultstyle && self_.config.defaultstyle[data.zctype]){
                $helper.css(self_.config.defaultstyle[data.zctype]);
            }
            if(self_.config.stylebyid && self_.config.stylebyid[data[self_.config.uniqueId]]){
                $helper.css(self_.config.stylebyid[data[self_.config.uniqueId]]);
            }
            if(data.style){
                $helper.css(data.style);
            }

            // For apply class to the helper
            if(self_.config.defaultclass && self_.config.defaultclass[data.zctype]){
                $helper.addClass(self_.config.defaultclass[data.zctype]).zaddClass(self_.config.defaultclass[data.zctype]);
            }

             // For apply class to the helper
             if(self_.config.classbyid && self_.config.classbyid[data[self_.config.uniqueId]]){
                $helper.addClass(self_.config.classbyid[data[self_.config.uniqueId]]).zaddClass(self_.config.classbyid[data[self_.config.uniqueId]]);
            }

             // For remove class to the helper
             if(self_.config.removeclassbyid && self_.config.removeclassbyid[data[self_.config.uniqueId]]){
                $helper.removeClass(self_.config.removeclassbyid[data[self_.config.uniqueId]]).zremoveClass(self_.config.removeclassbyid[data[self_.config.uniqueId]]);
            }

            // For All class
            if(self_.config.classforall){
                $helper.addClass(self_.config.classforall).zaddClass(self_.config.classforall);
            }

            // Apply class by key

            if(self_.config.zmenustart && !external){
                self_.config.zmenustart(data,ui,event);
            }
            
            if(draggable){
             //   draggable._cacheHelperProportions(); // NO I18N
            	if(!draggable.margins){
            		draggable.margins = {top: 0 , left: 0};
            	}
                draggable.margins.top = 0; // NO I18N
            }

        }

        this.dragstophandler = function(event,ui){
            $(ui.helper).trigger(event,ui);
            // TODO STOP of draggble

        }
 
        this.dragdragginghandler = function(event,ui){
            //TODO Handle dragging.....
            $(ui.helper).trigger(event,ui);
        }
       
       
        this.dragdropoverhandler = function(event,ui){
            var uihelper = $(ui.helper);
            if(uihelper.hasClass(self_.config.itemClass) && uihelper.hasClass(self_.config.itemClass).length){
                // Trigger Event OnEditor
                zutils.triggerEvent('fieldMenuOverEditor',config.fieldContainer,event,ui); //NO I18N
            } else{
                uihelper.addClass(self_.config.itemClass).removeClass('zcanvas-on-menu');
                if(ui.draggable){
                    var draggable = ui.draggable.draggable('instance'); // NO I18N
                    if(draggable){
                        draggable._cacheHelperProportions(); 
                        draggable.margins.top = 0; 
                    }
                }
            }
            uihelper.css('z-index','5'); // NO I18N
        }
        this.dragdropouthandler = function(event,ui){
            var uihelper = $(ui.helper);
            if(uihelper.hasClass(self_.config.itemClass)){
                // Trigger event on Menu
                zutils.triggerEvent('fieldMenuOutMenu',config.fieldContainer,event,ui); //NO I18N
            }
            uihelper.addClass('zcanvas-on-menu').removeClass(self_.config.itemClass);
            uihelper.css('z-index','5'); // NO I18N
        }

        this.dragreverthandler = function(event){
            var data = zutils.getdatafromelement(event.target);
            var innerNode = self_.getRow(data, true);
            $(event.target).html(innerNode);
            if(self_.config.zmenurevert){
                self_.config.zmenurevert(event);
            }
        }

        this.menupushhandler = function(event){
            var data = event.message;
            var groupElement = $("#zcanvas-" + data.group);
            var element = self_.getRow(data);
            groupElement.append(element);
            self_.configDraggable($(element));
        }

        this.addElement =  function(uidata){
        	if(this.stopscope){
        		return;
        	}
        	var handledisable = function(id , data){
        		if(this.config.disablelimit && id && data[id]){
                	var dlen = this.config.disablelimit.length;
                	// eslint-disable-next-line webperf/directly-select-with-id
                    var menucont = $(data[id].fieldContainer);
                    var limitfn = function(d) {return !d.zcscope};
                    var disablefn = function(fdd){
                      //  var menuel = menucont.find('[data-uniquekey=' + fdd[self_.config.uniqueId] + ']'); // NO I18N
                        menuel = menucont.find('.zcdatauniquekey' + fdd[self_.config.uniqueId]); // NO I18N
                        menuel.removeClass('zcmenu-disable-item'); // NO I18N
                        menuel.draggable('option','disabled',false); // NO I18N
                    }
                	for(var j = 0 ; j < dlen; j++){
                		if(this.config.disablelimit[j].type === data[id].zctype){
                			// eslint-disable-next-line no-loop-func
                			var limitedtypedata = canvasObjUtils._.filter(Object.values(data) , function(f){ return f.zctype ===  this.config.disablelimit[j].type}.bind(this));
                			// eslint-disable-next-line no-loop-func
                			var droppeddata = canvasObjUtils._.filter(limitedtypedata , limitfn) || [];
                			if(droppeddata.length < this.config.disablelimit[j].limit){
                				var otherel =  canvasObjUtils._.difference(limitedtypedata , droppeddata) || [];
                				otherel.map(disablefn);
                			}
                		}
                	}
                }
        	}
            if(Array.isArray(uidata)) {
                var createdNodes = [];
                var uilen = uidata.length;
                for(var i = 0; i < uilen; i++) {
                  $.merge(createdNodes , this.addElement(uidata[i]));
                }
                return createdNodes;
            } else {
                var id = uidata[self_.config.uniqueId];
                var menuel = $(uidata.fieldContainer + ' [data-uniquekey="' + id + '"]');
                var data = $(uidata.fieldContainer).data('zcdatamap');
                if(id && menuel.hasClass('zc-strict-hide') && data[id] && !data[id].zcscope){
                        data[id].zcscope++;
                        menuel.removeClass('zc-strict-hide'); // NO I18N
                        var cont = menuel.parent('.zcanvas-submenu-container').removeClass('zc-strict-hide'); // NO I18N
                        cont.prev('.zcanvas-submenu-heading').removeClass('zc-strict-hide'); // NO I18N
                        handledisable.bind(this)(id , data);
                        return menuel;
                }else if(data[id]){
                    data[id].zcscope++;
                    handledisable.bind(this)(id , data);
                    return menuel;
                }

            }
        }

        this.normalize = function(fields,group,dataMap){
            
            if(self_.config.mapping){
                var mapping = self_.config.mapping;
                var uniqueId = self_.config.uniqueId;
                var fieldsCount = fields.length;
                for(var i = 0 ; i < fieldsCount ; i++){
                    fields[i].zctype = fields[i][mapping.type];
                    fields[i].zclabel = fields[i][mapping.label];
                    if(self_.config.valueprocess){
                        fields[i].zcvalue = self_.config.valueprocess(fields[i][mapping.value]);
                    }else{
                        fields[i].zcvalue = fields[i][mapping.value];
                    }
                 
                    fields[i].group = group;
                    if(self_.config.nonMergableTypes){
                        if(self_.config.nonMergableTypes.indexOf(fields[i].zctype) > -1){
                            fields[i].nonmergable = true;
                        }
                    }

                    if(self_.config.hiddenLableType){
                        if(self_.config.hiddenLableType.indexOf(fields[i].zctype) > -1){

                            fields[i].hideLabel = true;

                            if(self_.config.hiddenLableExclude){
                            	if(self_.config.hiddenLableExclude.indexOf(fields[i][self_.config.uniqueId]) > -1){
                            		fields[i].hideLabel = false;
                            	}
                            }
                        }
                    }


                    fields[i].zcscope = self_.config.defaultscope ? self_.config.defaultscope : 1;

                    if(self_.config.scopepertype && self_.config.scopepertype[fields[i].zctype]){
                        fields[i].zcscope = self_.config.scopepertype[fields[i].zctype];
                    }

                    if(self_.config.scopebyid && self_.config.scopebyid[fields[i][self_.config.uniqueId]]){
                        fields[i].zcscope = self_.config.scopebyid[fields[i][self_.config.uniqueId]];
                    }

                    if(fields[i][uniqueId]){
                        dataMap[fields[i][uniqueId]] = fields[i];
                    }

                }
            }
            return fields;
        }

        this.reduceScope = function(nodedata , count){
        	if(this.stopscope){
        		return;
        	}
            var id = nodedata[self_.config.uniqueId];
            var data = $(self_.config.fieldContainer).data('zcdatamap');
            if(id && data && data[id] && data[id].zcscope){
            	if(count){
                    data[id].zcscope = data[id].zcscope - count;
                }else{
                    data[id].zcscope--;
                }
                if(!data[id].zcscope){
                    var cont = $(nodedata.fieldContainer + ' [data-uniquekey="' + id + '"]');
                    cont.addClass('zc-strict-hide'); // NO I18N
                    var menucon = cont.parent('.zcanvas-submenu-container');  // NO I18N
                    var sfield = menucon.find('.zcanvas-field:not(.zc-strict-hide)'); // NO I18N
                    if(!sfield.length){
                        menucon.addClass('zc-strict-hide'); // NO I18N
                        menucon.prev('.zcanvas-submenu-heading').addClass('zc-strict-hide'); // NO I18N
                    }
                }
            }
            if(this.config.disablelimit && id && data[id]){
            	var dlen = this.config.disablelimit.length;
            	// eslint-disable-next-line webperf/directly-select-with-id
                var menucont = $(data[id].fieldContainer);
                var limitfn = function(d) {return !d.zcscope};
                var disablefn = function(fdd){
                   // var menuel = menucont.find('[data-uniquekey=' + fdd[self_.config.uniqueId] + ']'); // NO I18N
                    var menuel = menucont.find('.zcdatauniquekey' + fdd[self_.config.uniqueId]); // NO I18N
                    menuel.addClass('zcmenu-disable-item'); // NO I18N
                    menuel.draggable('option','disabled',true); // NO I18N
                }
            	for(var j = 0 ; j < dlen; j++){
            		if(this.config.disablelimit[j].type === data[id].zctype){
            			// eslint-disable-next-line no-loop-func
            			var limitedtypedata = canvasObjUtils._.filter(Object.values(data) , function(f){ return f.zctype ===  this.config.disablelimit[j].type}.bind(this));
            			var droppeddata = canvasObjUtils._.filter(limitedtypedata , limitfn) || [];
            			if(droppeddata.length >= this.config.disablelimit[j].limit){
            				var otherel =  canvasObjUtils._.difference(limitedtypedata , droppeddata) || [];
            				otherel.map(disablefn);
            			}
            		}
            	}
            }
        }
        

        this.getElementByKey = function(key , condition){
            var menu = $(self_.config.fieldContainer);
            var zdata = menu.data('zcdatamap'); // NO I18N
            if(zdata){
                for(k in zdata){
                    if(zdata[k][key] && zdata[k][key] === condition){
                       // return menu.find('[data-uniquekey=' + zdata[k][self_.config.uniqueId] + ']');
                        return menu.find('.zcdatauniquekey' + zdata[k][self_.config.uniqueId]); // NO I18N
                    }
                }
            }
        }

        this.getCurrentScope = function(nodedata){
            var id = nodedata[self_.config.uniqueId];
            var data = $(self_.config.fieldContainer).data('zcdatamap'); // NO I18N
            if(id && data && data[id]){
                return data[id].zcscope;
            }
        }
        
        this.pause = function(flag){
        	this.stopscope = flag;
        }
        // This method will work for only layouts
        this.setScope = function(nodedata , count){
        	var id = nodedata[self_.config.uniqueId];
            var data = $(self_.config.fieldContainer).data('zcdatamap'); 
            if(id && data && data[id]){
            	data[id].zcscope  = count;
            	var cont = $(nodedata.fieldContainer + ' [data-uniquekey="' + id + '"]');
            	if(data[id].zcscope){
            		cont.removeClass('zc-strict-hide'); // NO I18N
            	}else{
            		cont.addClass('zc-strict-hide'); // NO I18N
            	}
            }
        }

        this.adddyamicrow = function(nodedata){
            var _groupel = $('#zcanvas-' + nodedata.group);
            var newel = this.getRow(nodedata);
            _groupel.append(newel);
            this.configDraggable(newel);
        }

        this.init();
    }

    window.zcanvasMenu = zcanvasMenu;

    $.fn.zcanvasMenu = function(opts) {
        return this.each(function() {
            var o = $(this);
            if (!o.data('zcanvas-menu')) {
                o
                    .data('zcanvas-menu', new zcanvasMenu(this, opts));//NO I18N
            }
        });
    };
})();;(function(){ // eslint-disable-line zstandard/no-global-function-call
    var CanvasUndoRedoManager = function(config){
       var undostack = [];
       var redostack = [];

        this.config = config;

        this.push = function(data,flag){
           
            redostack = [];
            if(data.action === 'link'){
                var actionlen = data.actionarray.length;
                for(var i = 0 ; i < actionlen ; i ++){
                    data.actionarray[i].node = this.getselectors(data.actionarray[i].node);
                }
            }
            data.node = data.node ? this.getselectors(data.node) : '';
            this.config && this.config.onChange && this.config.onChange.bind(this)(data);
            return flag ? data : undostack.push(data);
        }

        this.undo = function(){
            if(this.hasUndo()){
                var data = undostack.pop();
                redostack.push(data);
                this.executeUndo(data);
                this.config && this.config.onUndo && this.config.onUndo.bind(this)(data);
                this.config && this.config.onChange && this.config.onChange.bind(this)(data);
            }
        }
        
        this.redo = function(){
            if(this.hasRedo()){
                var data = redostack.pop();
                undostack.push(data);
                this.executeRedo(data);
                this.config && this.config.onRedo && this.config.onRedo.bind(this)(data);
                this.config && this.config.onChange && this.config.onChange.bind(this)(data);
            }
        }

        this.hasUndo = function(){
            return undostack.length > 0;
        }

        this.hasRedo = function(){
            return redostack.length > 0;
        }

        this.removePrev = function(action,node){
            var data = undostack[undostack.length - 1];
            if(data && data.action === action && node.is(data.node)){
                undostack.pop();
            }
        }

        this.clear = function(){
            undostack = [];
            redostack = [];
        }

        this.executeUndo = function(data){
            //FIXME:
            if(!data){
                return;
            }
            switch(data.action){
                case 'new':
                    var node = this.getElements(data.node);
                    var zfieldData = $(node).zdata();
                    var fieldData = zfieldData ? zfieldData[0] : null;
                    if(fieldData){
                        data.menu = fieldData;
                        var menuInstance = $(fieldData.fieldContainer).data('zcanvasMenu');
                        menuInstance && menuInstance.addElement(fieldData);
                    }
                    node.zremove();
                    break;
                case 'neweditor':
                    var node = this.getElements(data.node);
                    var zfieldData = data.previous;
                    if(zfieldData){
                        data.menu = zfieldData;
                        var menuInstance = $(zfieldData.fieldContainer).data('zcanvasMenu');
                        menuInstance.addElement(zfieldData);
                    }
                    var inst = zutils.getParentData(node);
                    inst && zutils.changelayoutscope(inst , 'Section Layout'); // NO I18N
                    node.zremove();
                    break;
                case 'drag':
                    var node = this.getElements(data.node);
                    node.css(data.previous);
                    break;
                case 'cssaction':
                    var node = this.getElements(data.node);
                    node.css(data.previous);
                    break;
                case 'editordrag':
                    var node = this.getElements(data.node);
                    var container = this.getElements(data.previous.container);
                    container.append(node);
                    node.css(data.previous);
                    break;
                case 'mergefromeditor':
                    var instance = $(data.editor).data('zcanvas');
                    data.splitbase = instance.addsingleElement(data.previous);
                    data.splittarget = instance.addsingleElement(data.base);
                    data.node.zremove();
                    break;
                case 'mergefrommenu':
                    var instance = $(data.editor).data('zcanvas');
                    data.node = this.updatedNode(data.node);
                    data.node.zremove();
                    data.splitbase = instance.addsingleElement(data.previous);
                    var fieldData = data.base;
                    data.menu = fieldData;
                    break;
                case 'switchaction':
                	if(!this.toolsRef.zcstyles[data.node]){
                		this.toolsRef.zcstyles[data.node] = {};
                	}
                	if(this.toolsRef.zcstyles[data.node] && !this.toolsRef.zcstyles[data.node][data.state]){
                        this.toolsRef.zcstyles[data.node][data.state] = {}
                    }
                    this.toolsRef.zcstyles[data.node][data.state] = data.previous;
                    this.toolsRef.addrule(data.stylenode , this.toolsRef.zcstyles[data.node][data.state], data.noimportant);
                    var $node = this.getElements(data.node);
                    this.toolsRef.selectfield($node , null ,true);
                    break;
                case 'action':
                    if(this.toolsRef.zcstyles[data.node] && !this.toolsRef.zcstyles[data.node][data.state]){
                        this.toolsRef.zcstyles[data.node][data.state] = {}
                    }
                    canvasObjUtils._.extend(this.toolsRef.zcstyles[data.node][data.state] || {}  , data.previous);
                    var selector = data.node;
                    var isState = false;
                     if(data.state && data.state === 'hover'){
                         selector += ':hover'; // NO I18N
                         isState = true;
                     }else if(data.state && data.state === 'active'){ // NO I18N
                         selector += '.active'; // NO I18N
                         isState = true;
                     }
                    if(this.toolsRef.config.customstate){
                    	selector = this.toolsRef.config.customstate(data.state , selector, null);
                    }
                    this.toolsRef.addrule(selector , this.toolsRef.zcstyles[data.node][data.state], data.noimportant);

                    if(data.actualnode){
                        var $node = $(data.actualnode);
                     }else{
                        var $node = this.getElements(data.node);
                        if(isState){
                            $node = $node.eq(0);
                        }
                     }
                  
                    this.toolsRef.selectfield($node, null , true , {state: data.state});
                    break;
                case 'replaceaction':
                    var node = this.getElements(data.node);
                    var el = node;
                    if(data.previous.replaceelement){
                        el = node.find(data.previous.replaceelement);
                    }
                    el.html(data.previous.value);
                    break;
                case 'classaction':
                    var node = this.getElements(data.node);
                    var this_ = this.toolsRef;
                    if(data.classstate){
                        if(!this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_){
                            this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_ = []
                        }
                    	if(!data.previous){
                    		node.removeClass(data.className + '_state_' + data.classstate); // NO I18N
                            var sloadindex = this_.zcstyles[data.selector][data.classstate]._classstyle_.indexOf(data.className + '_state_' + data.classstate); // NO I18N
                            if(sloadindex > -1){
                                this_.zcstyles[data.selector][data.classstate]._classstyle_.splice(sloadindex ,1);
                            }
                    		if(data.hasremove){
                                var classloadindex = this_.zcstyles[data.selector][data.classstate]._classstyle_.indexOf(data.removeclass + '_state_' + data.classstate);
                                if(classloadindex > -1){
                                    this_.zcstyles[data.selector][data.classstate]._classstyle_.splice(data.removeclass + '_state_' + data.classstate); // NO I18N
                                }
                    			this_.zcstyles[data.selector][data.classstate]._classstyle_.push(data.removeclass + '_state_' + data.classstate);
                        		node.addClass(data.removeclass + '_state_' + data.classstate); // NO I18N
                    		}
                    	}else{
                    		if(data.hasaction){
                    			node.addClass(data.removeclass + '_state_' + data.classstate); // NO I18N
                                var sloadindex = this_.zcstyles[data.selector][data.classstate]._classstyle_.indexOf(data.removeclass + '_state_' + data.classstate); // NO I18N
                                if(sloadindex > -1){
                                    this_.zcstyles[data.selector][data.classstate]._classstyle_.splice(sloadindex ,1);
                                }
                    		} 
                            var classloadindex = this_.zcstyles[data.selector][data.classstate]._classstyle_.indexOf(data.className + '_state_' + ( data.classstate || this_.state ) );
                            if(classloadindex > -1){
                                this_.zcstyles[data.selector][data.classstate]._classstyle_.splice(classloadindex , 1);
                            }
                			this_.zcstyles[data.selector][data.classstate]._classstyle_.push(data.className + '_state_' + ( data.classstate || this_.state ));
                    		node.addClass(data.className + '_state_' + data.classstate); // NO I18N
                    	}
                    	this_.updatestyle({} , data.styleselector , this_.zcstyles[data.selector][data.classstate], data.noimp);
                    	
                    }else if(data.previous){
                            node.addClass(data.className).zaddClass(data.className);
                        }else{
                            node.removeClass(data.className).zremoveClass(data.className);
                        }
                    
                    this.toolsRef.selectfield(node , null ,true);
                    break;
                case 'actionclasslist':
                    var node = this.getElements(data.node);
                    var this_ = this.toolsRef;
                    if(data.classstate){
                        if(!this_.zcstyles[data.selector][data.classstate]._classstyle_){
                            this_.zcstyles[data.selector][data.classstate]._classstyle_ = []
                        }
                    	var rclass = (data.hasremove || data.current.class) + '_state_' + data.classstate ; // No I18N
                    	this_.zcstyles[data.selector][data.classstate]._classstyle_.splice(this_.zcstyles[data.selector][data.classstate]._classstyle_.indexOf(rclass)  , 1);
                    	node.removeClass(rclass); // NO I18N
                    	if(data.previous.class){
                            var classloadindex = this_.zcstyles[data.selector][data.classstate]._classstyle_.indexOf(rclass);
                            if(classloadindex > -1){
                                this_.zcstyles[data.selector][data.classstate]._classstyle_.splice(classloadindex , 1);
                            }
                    		this_.zcstyles[data.selector][data.classstate]._classstyle_.push(rclass);
                        	node.addClass(rclass); // NO I18N
                    	}
                    	this_.updatestyle({} , data.styleselector , this_.zcstyles[data.selector][data.classstate], data.noimp);
                    }else{
                    	node.removeClass(data.current.class).zremoveClass(data.current.class);
                        if(data.previous.class){
                            node.addClass(data.previous.class).zaddClass(data.previous.class);
                        }
                    }
                    this_.selectfield(node , null ,true);
                    break;
                case 'unmerge':
                    var instance = $(data.editor).data('zcanvas');
                    data.node = this.updatedNode(data.node);
                    data.baseElement = this.updatedNode(data.baseElement);
                    data.node.zremove();
                    data.baseElement.zremove();
                    data.node = instance.addsingleElement(data.previous);
                    break;
                case 'delete':
                    var instance = $(data.editor).data('zcanvas');
                    var node = this.getElements(data.node);
                    node && node.zremove();
                    instance.addsingleElement(data.previous , data.prevstyle);
                    var menuinst = $(data.data.fieldContainer).data('zcanvasMenu');
                    menuinst && menuinst.reduceScope(data.data);
                    break;
                case 'resize':
                    var node  = this.getElements(data.node);
                    //node.css({width: data.previous.width+'px', height: data.previous.height+'px'}); // NO I18N
                    node.css(data.previous);
                    if(data.previous && data.previous.class){
                        node.addClass(data.previous.class);
                    }
                    break;
                case 'editorswitch':
                    var node = this.getElements(data.node);
                    $(data.previous.editor).append(node);
                    node.css(data.previous.position); // eslint-disable-line webperf/layout-thrashing
                    break;
                case 'link':
                    var dataobj = data.actionarray;
                    var actionlength = dataobj.length;
                    for(var i = 0 ; i < actionlength ; i++){
                        this.executeUndo(dataobj[i]);
                    }
                    break;
                case 'deleteeditor':
                    var editor = $(data.editor);
                    var instance = editor.data('zcanvas'); // NO I18N
                    instance.addElement([data.previous.json] , data.previousstyle , {fieldscoping: true});
                    break;
                case 'deletestaticeditor':
                    var editor = $(data.editor);
                    var instance = editor.data('zcanvas'); // NO I18N
                    instance.renderrelatedList(data.previous.json, data.previous.json.template, undefined, undefined, instance.config,data.previous.style,data.previous.editor, data.previous.titledata , true);
                    if(data && data.previous && data.previous.json && data.previous.json.fieldContainer){
                        var menuinst = $( data.previous.json.fieldContainer ).data('zcanvasMenu'); // NO I18N
                        menuinst && menuinst.reduceScope(data.previous.json);
                    }
                    var depth = parseInt(data.previous.style && data.previous.style.depth) || 1;
                    $('#' + data.previous.editor).css('z-index',depth).data('zcanvasdata' , data.previous.cdata);
                    break;
                case 'layout':
                    var inst = data.instance;
                    inst.executeUndo(data.json);
                    break;
                case 'callback':
                    var node = this.getElements(data.node);
                    data.callback && data.callback(data , 'undo', node); // NO I18N
                    break;
            }

            if(data.changedetection){
                data.changedetection(data.action , this.getElements(data.node) , data);
            }
        }

        this.executeRedo = function(data){
             if(!data){
                 return;
             }
             switch (data.action){
                case 'new':
                    var editorInstance = $(data.editor).data('zcanvas');
                    editorInstance.addsingleElement(data.current);
                    var fieldData = data.menu;
                    var menuInstance = $(fieldData.fieldContainer).data('zcanvasMenu');
                    menuInstance && menuInstance.reduceScope(fieldData);
                    break;
                case 'neweditor':
                    var $editor = $(data.editor);
                    editorInstance = $editor.data('zcanvas'); //NO I18N
                    var outercontainerstyle = {ui: {value: {style : jsonCreation.getstyles($editor)}}};
                    editorInstance.addElement([data.current] , outercontainerstyle);
                    if(data.menu){
                        var fieldData = data.menu;
                        var menuInstance = $(fieldData.fieldContainer).data('zcanvasMenu');
                        menuInstance && menuInstance.reduceScope(fieldData);
                    }
                    break;
                case 'drag':
                    var node = this.getElements(data.node);
                    node.css(data.current);
                    break;
                case 'cssaction':
                    var node = this.getElements(data.node);
                    node.css(data.current);
                    break;
                case 'editordrag':
                    var node = this.getElements(data.node);
                    var container = this.getElements(data.current.container);
                    container.append(node);
                    node.css(data.current);
                    break;
                case 'mergefromeditor':
                    data.splitbase.remove();
                    data.splittarget.remove();
                    var instance = $(data.editor).data('zcanvas');
                    data.node = instance.addsingleElement(data.current);
                    break;
                case 'mergefrommenu':
                    var instance = $(data.editor).data('zcanvas');
                    data.splitbase = this.updatedNode(data.splitbase);
                    data.splitbase.remove();
                    data.node = instance.addsingleElement(data.current);
                    if(data.menu){
                        var fieldData = data.menu;
                        var menuInstance = $(fieldData.fieldContainer).data('zcanvasMenu');
                        menuInstance.reduceScope(fieldData);
                    }
                    break;
                case 'switchaction':
                    this.toolsRef.zcstyles[data.node][data.state] = data.current;
                    this.toolsRef.addrule(data.stylenode , this.toolsRef.zcstyles[data.node][data.state]);
                    var $node = this.getElements(data.node);
                    this.toolsRef.selectfield($node , null ,true);
                    break;
                case 'action':   
                    if(this.toolsRef.zcstyles[data.node] && !this.toolsRef.zcstyles[data.node][data.state]){
                        this.toolsRef.zcstyles[data.node][data.state] = {}
                    }
                     canvasObjUtils._.extend(this.toolsRef.zcstyles[data.node][data.state] , data.current);
                     var selector = data.node;
                     var isState = false;
                     if(data.state && data.state === 'hover'){
                         selector += ':hover'; // NO I18N
                         isState = true;
                     }else if(data.state && data.state === 'active'){ // NO I18N
                         selector += '.active'; // NO I18N
                         isState = true;
                     }
                     if(this.toolsRef.config.customstate){
                     	selector = this.toolsRef.config.customstate(data.state , selector, null);
                     }
                     this.toolsRef.addrule(selector , this.toolsRef.zcstyles[data.node][data.state],  data.noimportant);

                     if(data.actualnode){
                        var $node = $(data.actualnode);
                     }else{
                        var $node = this.getElements(data.node);
                        if(isState){
                            $node = $node.eq(0);
                        }
                     }
                    
                    this.toolsRef.selectfield($node , null , true , {state: data.state});
                    break;
                case 'classaction':
                    var node = this.getElements(data.node);
                    var this_ = this.toolsRef;
                    if(data.classstate){
                        if(!this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_){
                            this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_ = [];
                        }
                    	if(!data.current){
                    		node.removeClass(data.className + '_state_' + ( data.classstate || this_.state )); // NO I18N
                            var sloadindex = this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.indexOf(data.className + '_state_' + ( data.classstate || this_.state )); // NO I18N
                            if(sloadindex > -1){
                                this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.splice(sloadindex ,1);
                            }
                    		if(data.hasaction){
                                var classloadindex = this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.indexOf(data.removeclass + '_state_' + ( data.classstate || this_.state )); // NO I18N
                                if(classloadindex > -1){
                                    this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.splice(classloadindex , 1);
                                }
                    			this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.push(data.removeclass + '_state_' + ( data.classstate || this_.state ));
                        		node.addClass(data.removeclass + '_state_' + t( data.classstate || this_.state )); // NO I18N
                    		}
                    	}else{
                    		if(data.hasremove){
                    			node.removeClass(data.removeclass + '_state_' + ( data.classstate || this_.state )); // NO I18N
                                var sloadindex = this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.indexOf(data.removeclass + '_state_' + ( data.classstate || this_.state )); // NO I18N
                                if(sloadindex > -1){
                                    this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.splice( sloadindex ,1);
                                }
                    		}
                            var classloadindex = data.className + '_state_' + ( data.classstate || this_.state ); // NO I18N
                            if(classloadindex > -1){
                                this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.splice(classloadindex , 1);
                            }
                    		this_.zcstyles[data.selector][( data.classstate || this_.state )]._classstyle_.push(data.className + '_state_' + ( data.classstate || this_.state ));
                        	node.addClass(data.className + '_state_' + ( data.classstate || this_.state )); // NO I18N
                    	}
                    	this_.updatestyle({} , data.styleselector , this_.zcstyles[data.selector][( data.classstate || this_.state )], data.noimp);
                    }else if(data.current){
                            node.addClass(data.className).zaddClass(data.className);
                        }else{
                            node.removeClass(data.className).zremoveClass(data.className);
                        }
                    
                    this.toolsRef.selectfield(node , null ,true);
                    break;
                case 'actionclasslist':
                    var node = this.getElements(data.node);
                    var this_ = this.toolsRef;
                    if(data.classstate){
                        if(!this_.zcstyles[data.selector][data.classstate]._classstyle_){
                            this_.zcstyles[data.selector][data.classstate]._classstyle_ = []
                        }
                    	var rclass = (data.hasremove || data.current.class) + '_state_' + data.classstate ; // No I18N
                    	this_.zcstyles[data.selector][data.classstate]._classstyle_.push(rclass);
                    	node.addClass(rclass); // NO I18N
                    	if(data.previous.class){
                            var classloadindex = this_.zcstyles[data.selector][data.classstate]._classstyle_.indexOf(rclass) ;
                            if(classloadindex > -1){
                                this_.zcstyles[data.selector][data.classstate]._classstyle_.splice( classloadindex , 1);
                            }
                        	node.removeClass(rclass); // NO I18N
                    	}
                    	this_.updatestyle({} , data.styleselector , this_.zcstyles[data.selector][data.classstate], data.noimp);
                    }else{
                    	if(data.previous.class){
                            node.removeClass(data.previous.class).zremoveClass(data.previous.class);
                        }
                        node.addClass(data.current.class).zaddClass(data.current.class);
                    }
                    
                    this_.selectfield(node , null ,true);
                    break;
                case 'replaceaction':
                    var node = this.getElements(data.node);
                    var el = node;
                    // FIXME: The single seperator will not consider , will always replace the first sep in list 
                    // MUSTFIX:
                    if(data.current.replaceelement){
                        el = node.find(data.current.replaceelement);
                    }
                    el.html(data.current.value);
                    break;
                case 'unmerge':
                    var instance = $(data.editor).data('zcanvas');
                    data.node = this.updatedNode(data.node);
                    data.node.remove();
                    data.node = instance.addsingleElement(data.current);
                    data.baseElement = instance.addsingleElement(data.base);
                    break;
                case 'delete':
                    var instance = $(data.editor).data('zcanvas');
                    var node = this.getElements(data.node);
                    node && node.zremove();
                    if(data.current && !canvasObjUtils._.isEmpty(data.current)){
                        instance.addsingleElement(data.current , data.prevstyle);
                    }
                    var menuinst = $(data.data.fieldContainer).data('zcanvasMenu');
                    menuinst && menuinst.addElement(data.data);
                    break;
                case 'resize':
                    var node  = this.getElements(data.node);
                  //  node.css({width: data.current.width+'px', height: data.current.height+'px'}); // NO I18N
                    node.css(data.current);
                    if(data.previous && data.previous.class){
                        node.removeClass(data.previous.class);
                    }
                    break;
                case 'editorswitch':
                    var node = this.getElements(data.node);
                    $(data.current.editor).append(node);
                    node.css(data.current.position); // eslint-disable-line webperf/layout-thrashing
                    break;
                case 'link':
                    var dataobj = data.actionarray;
                    var actionlength = dataobj.length;
                    for(var i = 0 ; i < actionlength ; i++){
                        this.executeRedo(dataobj[i]);
                    }
                    break;
                case 'deleteeditor':
                    var nodeid = '#' + data.previous.editor;
                    zutils.deleteEditor($(nodeid),true);
                    break;
                case 'deletestaticeditor':
                    var nodeid = '#' + data.previous.editor;
                    zutils.deletestaticeditor($(nodeid),true);
                    break;
                 case 'layout':
                    var inst = data.instance;
                    inst.executeRedo(data.json);
                    break;
                case 'callback':
                    var node = this.getElements(data.node );
                    data.callback && data.callback(data , 'redo' , node); // NO I18N
                    break;
             }
             if(data.changedetection){
                 data.changedetection(data.action , this.getElements(data.node) , data );
             }
        }

        this.updatedNode = function(node,data){
            var nodeElement;
            if(typeof node === 'string'){
                return $(node);
            }
            // If Node has prev object
            if(!node.length){
                node = node.prevObject;
            }
            if(node.length > 1){
                var resultantNode = [];
                var nodelen = node.length;
                for(var i = 0 ; i < nodelen ; i++){
                    resultantNode.push(this.updatedNode($(node[i]), data)[0]);
                }
                return $(resultantNode);
            }
            if(node.is('.zcanvas-editor') || node.is('.zcanvas-editor-outer') || node.is('.zcanvas-static-editor')){
                var id = node.attr('id'); //NO I18N
                nodeElement = $('#' + id); //NO I18N
            }else if(node.is('.zcanvas-label') || node.is('.zcanvas-seperator') || node.is('.zcanvas-value-container') ){ // NO I18N
                var nodeidentity = node.is('.zcanvas-seperator') ? '.zcanvas-seperator' : node.is('.zcanvas-value-container') ? '.zcanvas-value-container' : '.zcanvas-label'; // NO I18N
                var relevantid = node.zdata()[0];
                var zcanvasId = relevantid.zcanvasId;
              //  var mainel = $('[data-zcanvasid=' + zcanvasId + ']');  
                var mainel = $('.' + zcanvasId).find('.zcanvas-data-node'); // NO I18N
                if(data.nodedirection === 'prev'){
                    return mainel.next(nodeidentity);
                }else{
                    return mainel.find(nodeidentity); 
                }
            }else if(node.is('.zcanvas-data-node')){ // NO I18N
                var relevantid = node.zdata()[0];
                var zcanvasId = relevantid.zcanvasId;
                nodeElement = $('.' + zcanvasId).find('.zcanvas-data-node'); // NO I18N
               // nodeElement = $('.zcanvas-data-node[data-zcanvasid=' + zcanvasId + ']'); // NO I18N
            }else{
                node.find('.zcanvas-data-node').each(function(){ // NO I18N
                    var zcanvasId = $(this).attr('data-zcanvasid'); // NO I18N
                    var parentEl = $('.' + zcanvasId);
                    //var parentEl = $('[data-zcanvasid=' + zcanvasId + ']').parents('.zcanvas-field'); // NO I18N
                    if(parentEl.length){
                        nodeElement = parentEl;
                    }
                })
            }

            return nodeElement || node;
        }
        this.getselectors = function(el){
            if( typeof el  === 'string' ){
                return el;
            }else if(el instanceof jQuery){
                var selectors = [];
                el.each(function(){
                    selectors.push(zutils.getSelectorByElement($(this)))
                })
                return selectors.join(',');
            }
        }

        this.getElements = function(selectors){
            var result = $('');
            if(selectors.indexOf(',') > -1){
                selectors = selectors.split(',');
            }else{
                selectors = [selectors];
            }
            var sellen = selectors.length
            for(var i = 0 ; i < sellen ; i ++){
                var $el = zutils.getElementBySelector(selectors[i]);
                if($el.hasClass('zc-no-selection')){
                    $el = $el.parent();
                }
                result = result.add( $el );
            }
            return result;
        }
    }
    window.CanvasUndoRedoManager = CanvasUndoRedoManager;
})();
;/**
 * Simple data handler for canvas which takes the randomly generated from the holder and handle value for the id
 * PURPOSE: instead of loading the data to the dom and we can store it in the variable to safe access.
 */
(function ($) {
    $.fn.zdata = function (value) {
        // Return if any other than zcanvas holder
                // Create a variable if not exists
        if (!window.zcanvasdata) {
            window.zcanvasdata = {};
        }
        
        var id = zutils.getzdataIds(this);

        // add data to the particular id and retrive it 
        if (value && id && id !== 'undefined') {
            var getId = id[0];
            window.zcanvasdata[getId] = value;
        } else {
            if(!id){
                return;
            }
            var values = canvasObjUtils._.map(id, function(value){
                return window.zcanvasdata[value]
            });
            return values;
        }
    };
    
    $.fn.zaddClass = function (value) {
        var element = $(this);
        if(!jsonCreation || !jsonCreation.toolinst){
            return element;
        }
        var oldvalue = element.attr('data-zcanvasclass'); //NO I18N
        var newvalue = oldvalue || value;
        if(value && oldvalue){
            var vclasses = canvasObjUtils._.isArray(value) ? value : value.split(" ");
            var vlen = vclasses.length;
            var valuec = [];
            for(var i = 0; i < vlen ; i ++){
                if(! (oldvalue.indexOf(vclasses[i]) > -1) && ! (valuec.indexOf(vclasses[i]) > -1) ){
                    valuec.push(vclasses[i]);
                }
            }
            value = valuec.join(" ").trim();
        }
        if(oldvalue){
            var classes = oldvalue.split(" ");
            if(classes.indexOf(value) < 0){
                classes.push(value);
                newvalue = classes.join(" ").trim();
            }
        }
        element.attr('data-zcanvasclass',newvalue); //NO I18N
        element.data('zcanvasclass',newvalue); //NO I18N
        return element;
    };
    $.fn.zremoveClass = function (value) {
    	if(!value){
    		value = '';
    	}
        var element = $(this);
        var valuesplit = value.split(" ");
        var splitlen = valuesplit.length;
    	if(splitlen > 1){
    		for(var i = 0 ; i < splitlen ; i++){
    			element.zremoveClass(valuesplit[i]);
    		}
    		return element;
    	}
        var oldvalue = element.attr('data-zcanvasclass'); //NO I18N
        var newvalue = oldvalue;
        if(oldvalue){
            var classes = canvasObjUtils._.isArray(oldvalue) ? oldvalue : oldvalue.split(" ");
            var itemIndex = classes.indexOf(value)
            if(itemIndex > -1){
               classes.splice(itemIndex,1);
               newvalue = classes.join(" ");
            }
        }
        element.attr('data-zcanvasclass',newvalue); //NO I18N
        element.data('zcanvasclass',newvalue); //NO I18N
        return element;
    };
    $.fn.zremoveClassexp = function(method){
        var element = $(this);
        var oldvalue = element.attr('data-zcanvasclass'); //NO I18N
        if(oldvalue){
            var classes = canvasObjUtils._.isArray(oldvalue) ? oldvalue : oldvalue.split(" ");
            var classname = classes.reduce(function(t,v,i){
                return method(i.v);
            })
            element.zremoveClass(classname);
        }
        return element;
    }
    $.fn.zhasClass = function (value) {
        var element = $(this);
        var oldvalue = element.attr('data-zcanvasclass'); //NO I18N
        if(oldvalue){
            var classes = oldvalue.split(" ");
            if(classes.indexOf(value) > -1){
                return true;
            }
        }
        return false;
    };
    $.fn.ztoggleClass = function(value){
        if(this.zhasClass(value)){
            this.zremoveClass(value);
        }else{
            this.zaddClass(value);
        }
    }
    $.fn.zremove = function(){
        var $el = $(this);
        $el.off();
        var $data = $el.data();
        if($data){
            for(var key in $data){
                if($data[key] && typeof $data[key].destroy === 'function'){
					$data[key].destroy();
				}
                if(key === 'zcanvas' && $data[key]){
					$data[key].container = null;
					if($data[key].selectable){
						$data[key].selectable.area = null; 
						$data[key].selectable = null;
					}
	            }
                if($data[key]){
                    delete $data[key];
                }
                
            }
        }
        $el.remove();
    }
    
    $.fn.zcss = function(value){
        var element = $(this);
        var style = element.attr('style') || ''; // NO I18N
        var result = '';
        var regex = new RegExp('(' + value + ':?.*?\\;)','g');
        var mx = style.match(regex);
        if(mx && mx.length){
            var rx = new RegExp('(' + value + ':)','g');
            result = mx[0].replace(rx,'').replace(/(;)/,'').trim('');
        }
        return result;
    }

    $.fn.zccss = function(style,noimportant , exinst , flag){
        var inst = exinst || $('.zcanvas-editor-outer').data('zcanvas');
        if(inst){
            inst = exinst ||  inst.config.toolsRef;
        }else{
            return;
        }
        if(canvasObjUtils._.isString(this)){
            inst.applyjsontostyle( this , style , true, noimportant , true , false ,  flag);
        }else{
            $(this).each(function(){
                inst.applyjsontostyle( $(this) , style , true, noimportant , true , false , flag);
            })
        }
        
    }

    $.fn.zhtml = function(html){
          if(this[0] && typeof html === 'string'){ // NO I18N
            this[0].innerHTML = html;
          }else{
            $(this).html(html);
          }
    }

    $.fn.zappend = function(html){
       $(this).append(html);
    }
})(jQuery);;(function(){
	var viewOverlap = {
		overlapAdjustment : function(json){ 
			var allElements = json.children;
			var allElmentsLen = allElements.length;
			for(var i = 0; i < allElmentsLen; i++){
				var selectedElement = allElements[i];
				var selectedElementOverLeft = Math.abs(selectedElement.ui.value.position.overLeft) || 0;
				var selectedElementOverTop = Math.abs(selectedElement.ui.value.position.overTop) || 0;
				var selectedElementOver = Math.abs(selectedElement.ui.value.position.overWidth) || 0;
				
				var h = selectedElement.ui.value.position.height - selectedElementOverTop;
				var w = selectedElement.ui.value.position.width - selectedElementOverLeft - selectedElementOver;
				
				var selectedElementLeft = selectedElement.ui.value.position.startX + selectedElementOverLeft;
				var selectedElementRight = selectedElementLeft + w;
				var selectedElementTop = selectedElement.ui.value.position.startY + selectedElementOverTop;
				var selectedElementBottom = selectedElementTop + h;
				for(var j = 0; j < allElmentsLen; j++){
					if(i === j){
						continue;
					}
					var checkingElement = allElements[j];
					var checkingElementOverLeft = Math.abs(checkingElement.ui.value.position.overLeft) || 0;
					var checkingElementOverTop = Math.abs(checkingElement.ui.value.position.overTop) || 0;
					var checkingElementOver = Math.abs(checkingElement.ui.value.position.overWidth) || 0;
					
					var cH = checkingElement.ui.value.position.height - checkingElementOverTop;
					var cW = checkingElement.ui.value.position.width - checkingElementOverLeft - checkingElementOver;
					
					var left = checkingElement.ui.value.position.startX + checkingElementOverLeft;
					var right = left + cW;
					// eslint-disable-next-line zstandard/no-reserved-words
					var top = checkingElement.ui.value.position.startY + checkingElementOverTop;
					var bottom = top + cH;
					
					
					if(left < selectedElementRight && right > selectedElementLeft && (top > selectedElementTop && top < selectedElementBottom) ||
					   selectedElementLeft < right && selectedElementRight > left && (selectedElementTop > top && selectedElementTop < bottom) ||
					   left > selectedElementLeft && left < selectedElementRight && (top < selectedElementBottom && bottom > selectedElementTop) || 
					   selectedElementLeft > left && selectedElementLeft < right && (selectedElementTop < bottom && selectedElementBottom > top)) {
						
						if(top < selectedElementTop && bottom < selectedElementBottom){
							// Top side
							var diff = bottom - selectedElementTop;
							var newOverTop = diff + selectedElementOverTop;
							if(selectedElement.ui.value.position.overTop && newOverTop > -selectedElement.ui.value.position.overTop || !selectedElement.ui.value.position.overTop){
								selectedElement.ui.value.position.overTop = -newOverTop;
							}
						} 
						else if(left > selectedElementLeft && right > selectedElementRight){
							//right side
							var diff = selectedElementRight - left;
							var newOverLeft = diff + checkingElementOverLeft;
							if(checkingElement.ui.value.position.overLeft && newOverLeft > -checkingElement.ui.value.position.overLeft || !checkingElement.ui.value.position.overLeft){
								checkingElement.ui.value.position.overLeft = - newOverLeft;
							}
						} else if(top > selectedElementTop && bottom > selectedElementBottom){
							//bottom side 
							var diff = selectedElementBottom - top;
							var newOverTop = diff + checkingElementOverTop;
							if(checkingElement.ui.value.position.overTop && newOverTop > -checkingElement.ui.value.position.overTop || !checkingElement.ui.value.position.overTop){
								checkingElement.ui.value.position.overTop = - newOverTop;
							}
						} else if(left < selectedElementLeft && right < selectedElementRight) {
							//Left side
							var diff = right - selectedElementLeft;
							var newOverLeft =  diff + selectedElementOverLeft;
							if(selectedElement.ui.value.position.overLeft && newOverLeft > -selectedElement.ui.value.position.overLeft || !selectedElement.ui.value.position.overLeft){
								selectedElement.ui.value.position.overLeft = -newOverLeft;
							}
						} else {
							// eslint-disable-next-line no-lonely-if
							if(bottom >= selectedElementBottom){
								var diff = selectedElementBottom - top;
								if(checkingElement.ui.value.position.overTop && diff > -checkingElement.ui.value.position.overTop || !checkingElement.ui.value.position.overTop){
									checkingElement.ui.value.position.overTop = -diff;
								}
							} else if(selectedElementBottom >= bottom){
								var diff = bottom - selectedElementTop;
								if(selectedElement.ui.value.position.overTop && diff > -selectedElement.ui.value.position.overTop || !selectedElement.ui.value.position.overTop){
									selectedElement.ui.value.position.overTop = -diff;
								}
							}
						}

					}
				}
			}
		}
	}
	var jsonCreation = (function () {
		function nodesJson(selectNode,compressed){
			// var nodesJson = [];
			var eachNodeJson =  createJson(selectNode);
			viewOverlap.overlapAdjustment(eachNodeJson);
			// nodesJson.push(eachNodeJson);
			if(compressed){
				eachNodeJson = compressJson(eachNodeJson,['id','datatype','_type','ui','theme','name','tabrelatedlistid','subformid','sectionId','personalityName','relatedList']); // NO I18N
			}
			return eachNodeJson;
		}
	
		function compressJson(json, key , callback , removecustom){
			var resultjson = {};
			var keylen = key.length;
			var ui = json.ui;
			zutils.compressioncallback && zutils.compressioncallback(json , null , removecustom);
			
			for(var i = 0 ; i < keylen ; i++){
				if(json[key[i]]){
					resultjson[key[i]] = json[key[i]];
				 }
			}
			for (var property in ui) {
				var currentObj = ui[property];
				delete currentObj.tagname;
			}
			// if(json.ui.value && json.ui.value.tagname){
			// 	delete json.ui.value.tagname;
			// }
			// eslint-disable-next-line webperf/no-multipleDOMLookup
			var childlen = json.children && json.children.length;
			var childrendata = []
			for(var i = 0 ; i < childlen ; i++){
				// eslint-disable-next-line webperf/no-multipleDOMLookup
				childrendata.push(compressJson(json.children[i], key , callback , removecustom));
			}
			callback && callback(resultjson);
			resultjson.children = childrendata;
			return resultjson;
		}
	
		function getStyles(){
			return ["color", "backgroundImage" , "backgroundColor", "fontFamily", "fontSize", "fontWeight", "textTransform", "textDecoration", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "marginTop", "marginLeft", "marginBottom", "marginRight", "borderBottom", "borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderColor", "borderLeft", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRight", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderStyle", "borderTop", "borderTopColor", "borderTopStyle", "borderTopWidth", "borderWidth", "boxShadow" , "borderRadius"];	 // NO I18N
		}
		function constructValue(node){
			var obj = {};
			var style = createStyle(node);
			obj.style = style;
			if(node.hasClass("zcanvas-field") || node.hasClass("editor") || node.hasClass("zcanvas-editor-outer") || node.hasClass("zclayout") || node.hasClass('zcanvas-editor') || node.hasClass('zcanvas-static-editor')) {
				var position = createPosition(node);
				obj.position = position;	
			}
			
			if(node.attr("fixed") === "true" || node.attr("data-fixed-x") === "true" && node.attr("data-fixed-y") === "true"){//NO I18N
				obj.fixed = true;
			} else if(node.attr("data-fixed-x") === "true"){
				obj.fixedWidth = true;
			} else if(node.attr("data-fixed-y") === "true"){
				obj.fixedHeight = true;
			}
			obj.tagname = node.prop("tagName");//NO I18N
			obj.class =  node.data("zcanvasclass");//NO I18N
	//		obj.children = [];
			var ndata = node.data('zcanvasdata'); // NO I18N
			if(ndata){
				if(ndata.name){
					obj.zcode = {};
					obj.zcode.name =  ndata.name;
				}
				if(ndata.systemid){
					obj.system_id = ndata.systemid;
				}
			}
			
			// Apply fixed for this elements
			var nodeDatavalue = node.zdata();
			if(nodeDatavalue && nodeDatavalue.length && node.is('.zcanvas-field')){
				var nodevalue = nodeDatavalue[0];
				var isImage = nodevalue && nodevalue.zctype && nodevalue.zctype.toLowerCase().indexOf("profileimage") > -1;
			//	var isButton = nodevalue && nodevalue.zctype && nodevalue.zctype.toLowerCase().indexOf("button") > -1;
//				if( isImage || isButton ){ // nodevalue.zctype.toLowerCase().indexOf("image") > -1 todo
				if( isImage ){
					obj.fixed = true;		
				}	
				if(obj.style && !obj.style.default || isImage){
					obj.style.default = {};
					if(isImage){
						var imagestyles = ['_order' , '_name_' , '_classstyle_' , '_show_' , '_hide_']; // NO I18N
						var imstlen = imagestyles.length;

						// FIXME: Needs to be handled using config outside canvas
						for(var stylekey in obj.style) {
							if(stylekey === 'default'){ // NO I18N
								continue;
							}
							var _allstyles = {};

							for(var _i = 0 ; _i < imstlen ; _i++){
								if(obj.style[stylekey].hasOwnProperty(imagestyles[_i])){
									_allstyles[imagestyles[_i]] = obj.style[stylekey][imagestyles[_i]];
								}
							}

							obj.style[stylekey] = _allstyles;
						}
					}

				}
			}
			
			return obj;
		}
		
		function createJson(node){	
			node = $(node);
			var eachNodeJson = {};
			eachNodeJson.ui = {};
			eachNodeJson.ui.value = constructValue(node);
			eachNodeJson.children = [];
			
			if(node.is(".zcanvas-field:not(.zclayout)") && !node.hasClass("zcanvas-merged-node") || node.hasClass("zcanvas-holder")){
				eachNodeJson = copydata(eachNodeJson, node);
				var _type = eachNodeJson._type;
				var holder = node.find(".zcanvas-holder");//NO I18N
				var field = node.find(".zcanvas-value-container");//NO I18N
				// eslint-disable-next-line zstandard/no-reserved-words
				var label = node.find(".zcanvas-label");//NO I18N
				if(holder.length > 0){
					eachNodeJson.ui.holder = constructValue(holder);
				}
				if(field.length > 0){
					eachNodeJson.ui.field = constructValue(field);
				} 
				if(label.length > 0){
					if(node.hasClass('zccbuttonicon')){
						eachNodeJson.ui.icon = constructValue(label);
						eachNodeJson.ui.icon.icon = label.attr('zc-icon'); // NO I18N
					}else{
						eachNodeJson.ui.label = constructValue(label);
					}
					
				}
//				if(_type == "action"){//NO I18N
//					eachNodeJson.ui.value.fixed = true;
//				}
				eachNodeJson._type = _type; // NO I18N
			} else if(node.hasClass("zcanvas-seperator")){
				eachNodeJson._type = "separator"; // NO I18N
				var val = node.html();
				eachNodeJson.ui.value.value = val;
				eachNodeJson.zcanvasId = node.attr('id'); // NO I18N
			}  else {

				if(node.hasClass("zcanvas-merged-node")){
					eachNodeJson._type = "merge-field"; // NO I18N
				} else if(node.hasClass("zcanvas-editor") && !node.hasClass("zclayout")){
					// eachNodeJson.customComponent = true;
					eachNodeJson._type = "component";//NO I18N
					eachNodeJson.theme = 'Custom Layout'; // NO I18N
					// eachNodeJson.elm = $(node);
					eachNodeJson.zcanvasId = node.attr('id'); //NO I18N
					var compmeta = node.data('zccompmeta'); // NO I18N
					if(compmeta){
						for(var key in compmeta){
							eachNodeJson[key] = compmeta[key];
						}
					}
				} else if(node.hasClass("zcanvas-static-editor")){
					eachNodeJson._type = "component"; // NO i18N 
					eachNodeJson.relatedList = true;
					eachNodeJson.theme = 'Custom Layout'; // NO I18N
					// eachNodeJson.customComponent = true;
					eachNodeJson.ui.value.relatedList = true;
					
				//	var nodedata = node.data('zcanvas') || {}; // NO i18N 
					eachNodeJson.zcanvasId = node.attr('id'); // NO I18N
					// eslint-disable-next-line webperf/no-multipleDOMLookup
					eachNodeJson.children = zcanvasrelatedList.toJson(node,eachNodeJson);
				// eachNodeJson.statichtml = zcanvasrelatedList.toView(eachNodeJson , nodedata, nodedata.template);
					// eslint-disable-next-line webperf/no-multipleDOMLookup
				//	eachNodeJson.children[0]._type = 'relatedlist';// NO i18N
					// eslint-disable-next-line webperf/no-multipleDOMLookup
				//	eachNodeJson.children[0].id = nodedata.id;// NO i18N 
					// if(node.has('.zc-noneditable-rl').length){
					// 	eachNodeJson.children[0].theme = 'Table Layout';// NO i18N
					// 	eachNodeJson.children[0].children = [];
					// 	eachNodeJson.children[0].ui = { value: { position: jsonCreation.getposition(node.find('.zc-noneditable-rl')), style: {} } };
					// } 
					return eachNodeJson;
				} else if(node.hasClass("zclayout")){
					eachNodeJson.layoutComponent = true;
					var layoutname = node.attr('data-layoutname'); // NO i18N
					var layoutinstance = zclayout.prototype.layouts[layoutname];
					var resultjson = layoutinstance.toJson(node,eachNodeJson);
					var layoutstyle = node.data('layoutstyle'); // NO i18N
					if(layoutstyle){
						eachNodeJson.ui.value.layoutstyle = layoutstyle;
					}
					if(resultjson.length){
						// eslint-disable-next-line webperf/no-multipleDOMLookup
						eachNodeJson.children = resultjson;
					}else{
						eachNodeJson = resultjson;
					}
					eachNodeJson.theme = layoutname;
					eachNodeJson._type = 'component'; //NO I18N
					eachNodeJson.zcanvasId = eachNodeJson.zcanvasId || node.attr('id'); //NO I18N
					return eachNodeJson;
				} else if(node.hasClass("zcanvas-row-separator")){ 
					eachNodeJson._type = "rows"; // NO I18N
				} else if(node.hasClass("zcanvas-editor-outer")){
					eachNodeJson._type = "pagecomponent";//NO I18N
				}
				
				if(node.hasClass("zcanvas-editor") || node.hasClass("zcanvas-editor-outer") || node.hasClass("zcanvas-merged-node") || node.hasClass("zcanvas-holder") || node.hasClass("zcanvas-row-separator")){
					var children = node.children(".zcanvas:not(.zcanvas-ignore)");//NO I18N
					var siblings = [];
					var childlen = children.length;
					for(var i = 0; i < childlen; i++) {
						siblings.push(createJson(children[i]));
					}
					// eslint-disable-next-line webperf/no-multipleDOMLookup
					eachNodeJson.children = siblings;
				}
			}
			viewOverlap.overlapAdjustment(eachNodeJson);
			return eachNodeJson;
		}
		
		
		
		function createJsonNew(node) {
			node = $(node);
	//		var style = createStyle(node);
			var eachNodeJson = {};
			eachNodeJson.ui = {};
			eachNodeJson.ui.value = constructValue(node);
			
	//		eachNodeJson.ui.value.style = style;
	//		if(node.hasClass("zcanvas-field") || node.hasClass("editor") || node.hasClass("zcanvas-editor-outer") || node.hasClass("zclayout") || node.hasClass('zcanvas-editor') || node.hasClass('zcanvas-static-editor')) {
	//			var position = createPosition(node);
	//			eachNodeJson.ui.value.position = position;	
	//		}
	//		eachNodeJson.ui.value.tagname = node.prop("tagName");//NO I18N
	//		eachNodeJson.ui.value.class =  node.data("zcanvasclass");//NO I18N
			eachNodeJson.children = [];
	
			if(node.hasClass("zcanvas-inner-component")){
				var parentNodeData = node.zdata()[0];//NO I18N
				if(node.hasClass("zcanvas-label")) {
					eachNodeJson._type = "label";//NO I18N
					eachNodeJson.label = parentNodeData.label;
				} else if(node.hasClass("zcanvas-value-container")) {
					var isOnlyValue = node.is('.zcanvas-data-node'); // NO I18N
					if(!node.parent('.zcanvas-holder').length || isOnlyValue){ //NO I18N
						eachNodeJson = copydata(eachNodeJson, node);
					}
					if(isOnlyValue){
						eachNodeJson.dataHolder = true;
						eachNodeJson._type = "field-holder";//NO I18N
					}
					// eachNodeJson._type = "field";//NO I18N
					// TODO: Must have confirmation
					// 'FIXME: This is a quick fix, the value should come from zcfieldtype
					eachNodeJson._type = parentNodeData.type;
					eachNodeJson.value = parentNodeData.value;
				}
			} else if(node.hasClass("zcanvas-seperator")){
				var val = node.html();
				// FIXME: to separator after list view revamp
				var nodetype =  "separator";//NO I18N
				eachNodeJson.ui.value.value = val;
				eachNodeJson.zcanvasId = node.attr('id'); // NO I18N
				eachNodeJson._type = nodetype;
			} else {
				var children = node.children(".zcanvas");//NO I18N
				var siblings = [];
				if(node.hasClass("zcanvas-holder") || node.hasClass('zcanvas-data-node')){
					var valueNode = node.find(".zcanvas-value-container");//NO I18N
					var labelNode = node.find(".zcanvas-label");//NO I18N
					eachNodeJson =  copydata(eachNodeJson,node);
					eachNodeJson.dataHolder = true;
					eachNodeJson._type = "field-holder";//NO I18N
					eachNodeJson.ui.holder = eachNodeJson.ui.value;
					delete eachNodeJson.ui.value;
					eachNodeJson.ui.value = constructValue(valueNode);
					if(labelNode){
						eachNodeJson.ui.label = constructValue(labelNode);
					}
				}
				if(node.hasClass("zcanvas-editor")){
					// eachNodeJson.customComponent = true;
					eachNodeJson._type = "component";//NO I18N
					eachNodeJson.theme = 'Custom Layout'; // NO I18N
					// eachNodeJson.elm = $(node);
					eachNodeJson.zcanvasId = node.attr('id'); //NO I18N
				}
				if(node.hasClass("zcanvas-static-editor")){
					eachNodeJson._type = "component"; // NO i18N 
					eachNodeJson.relatedList = true;
					eachNodeJson.theme = 'Custom Layout'; // NO I18N
					// eachNodeJson.customComponent = true;
					eachNodeJson.ui.value.relatedList = true;
					var nodedata = node.data('zcanvas') || {}; // NO i18N 
					// eslint-disable-next-line webperf/no-multipleDOMLookup
					eachNodeJson.children = [nodedata.data];
					eachNodeJson.statichtml = nodedata.template;
					// eslint-disable-next-line webperf/no-multipleDOMLookup
					eachNodeJson.children[0]._type = 'relatedlist';// NO i18N
					// eslint-disable-next-line webperf/no-multipleDOMLookup
					eachNodeJson.children[0].id = nodedata.id;// NO i18N 
					if(node.has('.zc-noneditable-rl').length){
						// eslint-disable-next-line webperf/no-multipleDOMLookup
						eachNodeJson.children[0].theme = 'Table Layout';// NO i18N
						// eslint-disable-next-line webperf/no-multipleDOMLookup
						eachNodeJson.children[0].children = [];
						// eslint-disable-next-line webperf/no-multipleDOMLookup
						eachNodeJson.children[0].ui = { position: jsonCreation.getposition(node.find('.zc-noneditable-rl')), style: {} };
					} 
					eachNodeJson.zcanvasId = node.attr('id'); // NO I18N
					return eachNodeJson;
				}
				if(node.hasClass("zcanvas-merged-node")){ 
					eachNodeJson._type = "merge-field"; // NO I18N
				} else if(node.hasClass("zcanvas-field") && !node.hasClass("zcanvas-merged-node")){ 
					eachNodeJson._type = "field"; // NO I18N
				} else if(node.hasClass("zcanvas-row-separator")){ 
					eachNodeJson._type = "rows"; // NO I18N
				} else if(node.hasClass("zcanvas-editor-outer")){
					eachNodeJson._type = "pagecomponent";//NO I18N
				}
				if(node.hasClass("zclayout")){
					eachNodeJson.layoutComponent = true;
					var layoutname = node.attr('data-layoutname'); // NO i18N
					var layoutinstance = zclayout.prototype.layouts[layoutname];
					var resultjson = layoutinstance.toJson(node);
					var layoutstyle = node.data('layoutstyle'); // NO i18N
					if(layoutstyle){
						eachNodeJson.ui.value.layoutstyle = layoutstyle;
					}
					if(resultjson.length){
						// eslint-disable-next-line webperf/no-multipleDOMLookup
						eachNodeJson.children = resultjson;
					}else{
						eachNodeJson = resultjson;
					}
					eachNodeJson.theme = layoutname;
					eachNodeJson._type = 'component'; //NO I18N
					return eachNodeJson;
				}
				var childlen = children.length;
				for(var i = 0; i < childlen; i++) {
					siblings.push(createJson(children[i]));
				}
				// eslint-disable-next-line webperf/no-multipleDOMLookup
				eachNodeJson.children =  siblings;
			}
			
			return eachNodeJson;
		}
	
		function copydata(eachNodeJson, node){
			var nodeData = node.zdata()[0];//NO I18N
			if(!nodeData){
				nodeData = node.data('zcanvas') || {}; // NO I18N
			}
			for(key in nodeData){
				eachNodeJson[key] = nodeData[key];
			}
			return eachNodeJson;
		}

		function CanvasRound(num, decimal_threshold){
			var decimal_part = num - Math.floor(num);
			if(decimal_part >= decimal_threshold){
			  return Math.ceil(num);
			}else{
			  return Math.floor(num);
			}
		  }
		
		function createPosition(node){
			
			var nodeParent = node.parent();//NO I18N
			var position = {};
			// if(node.hasClass("zcanvas-field") && !node.hasClass('zcanvas-no-img-default')){
			// 	var nodeWidth = Math.floor(node.width());
			// 	var nodeHeight = Math.floor(node.height());
			// } else 
			
		//	node.removeClass('ui-draggable-dragging'); // NO I18N
		if(node.hasClass("zcanvas-editor-outer")){//NO I18N
			var nodeWidth = CanvasRound(node.width() , 0.9);
			var nodeHeight = CanvasRound(node.outerHeight() , 0.9);
		} else{
			var nodeWidth = CanvasRound(node.outerWidth() , 0.9);
			var nodeHeight = CanvasRound(node.outerHeight() , 0.9);
		}
		//  if(nodeParent.hasClass("zcanvas-editor") || nodeParent.hasClass("zcanvas-editor-outer")){//NO I18N
		//  	var paddingLeft = parseInt(nodeParent.css("paddingLeft"));//NO I18N
		//  	var paddingTop = parseInt(nodeParent.css("paddingTop"));//NO I18N
			
		//  	position.startX = Math.floor(node.position().left);
		//  	position.startY = Math.floor(node.position().top);
		//  } else {
		// 	position.startX = Math.floor(node.position().left);
		// 	position.startY = Math.floor(node.position().top);
		//  }
		position.startX = CanvasRound(node.position().left , 0.9);
		position.startY = CanvasRound(node.position().top , 0.9);

		position.endX = CanvasRound(node.position().left + nodeWidth , 0.9);
		position.width = nodeWidth;
		position.height = nodeHeight;
			var depth = node.css('z-index'); // NO I18N
			position.depth = isNaN(parseInt(depth)) ? 1 : parseInt(depth);
			if(node.hasClass("zcanvas-editor") || node.hasClass("zcanvas-static-editor")){//NO I18N
				var childrenNodes = $(node).children(".zcanvas");
				if(childrenNodes.length > 0){
					var closestNodeTop = canvasObjUtils._.min(childrenNodes, function(n){return $(n).position().top});
					var closestNodeLeft = canvasObjUtils._.min(childrenNodes, function(n){return $(n).position().left});
	
					var paddingTop = $(closestNodeTop).position().top;
					var paddingLeft = $(closestNodeLeft).position().left;
					if(paddingTop > 0){
						position.minTop = CanvasRound( paddingTop , 0.9 );
					}
					if(paddingLeft > 0){
						position.minLeft = CanvasRound( paddingLeft , 0.9 );
					}
				}
			}
			if(node.hasClass("grid-stack-item-content")){
				var nodeParent = node.parents(".grid-stack-item");//NO I18N
				var nodeMaxWidth = parseInt(nodeParent.css("maxWidth"));//NO I18N
				var nodeMaxHeight = parseInt(nodeParent.css("maxHeight"));//NO I18N
				position.maxHeight = nodeMaxHeight;
				position.maxWidth = nodeMaxWidth;
				position.startX = nodeParent.position().left
				position.startY = nodeParent.position().top;
			}
			if(node.hasClass("zcanvas-editor-outer")) {//NO I18N
				position.startX = 0;
				position.startY = 0;
			}
			if(node.hasClass('zcanvas-locked-element')) { // NO I18N
				position._locked_ = 'true'; // NO I18N
			}
			
			return removeEmptyKeys(position, true);
		}
		
		// function createStyle2(node){
		// 	var style = {};
		// 	var styleProperties = node[0].style;
			
		// 	var availbalestyles = getStyles();
		// 	var stylelen = availbalestyles.length;
		// 	for (var i = 0 ; i < stylelen ; i ++){
		// 		style[availbalestyles[i]] = styleProperties[availbalestyles[i]];
		// 	}
			
		// 	if(node.hasClass("zcanvas-editor-outer")){ // NO I18N
		// 		style.fontSize = node.css("font-size");//NO I18N
		// 		style.fontFamily = node.css("font-family");//NO I18N
		// 	}
	
			 
		// 	var nodeDatavalue = node.zdata();
		// 	if(nodeDatavalue && nodeDatavalue.length){
		// 		var nodevalue = nodeDatavalue[0];
		// 		if((nodevalue && nodevalue.zctype.toLowerCase().indexOf("image") > -1) || (nodevalue && nodevalue.zctype.toLowerCase().indexOf("button") > -1)) { // nodevalue.zctype.toLowerCase().indexOf("image") > -1 todo
		// 			style.width = parseInt(styleProperties.width);
		// 			style.height = parseInt(styleProperties.height);			
		// 		}	
		// 	}
			
			
		// 	return removeEmptyKeys(style);
		// }

		function createStyle(node){
			var inst =  jsonCreation.toolinst;
			var selector = inst.getSelectorByElement(node,'default',false,true); // NO I18N
			var styles = zutils.zcopyobj2(inst.getstylebyselector(selector , null , true));

/*			var nodeDatavalue = node.zdata();
			if(nodeDatavalue && nodeDatavalue.length && node.is('.zcanvas-field')){
				var nodevalue = nodeDatavalue[0];
				var isImage = nodevalue && nodevalue.zctype && nodevalue.zctype.toLowerCase().indexOf("profileimage") > -1;
				var isButton = nodevalue && nodevalue.zctype && nodevalue.zctype.toLowerCase().indexOf("button") > -1;
				if( isImage || isButton ){ // nodevalue.zctype.toLowerCase().indexOf("image") > -1 todo
					var styleProperties = node[0].style;
					if(styles && !styles.default || isImage){
						styles.default = {};
					}
					// eslint-disable-next-line webperf/layout-thrashing
					styles.default.width = parseInt(styleProperties.width) + 'px';
					// eslint-disable-next-line webperf/layout-thrashing
					styles.default.height = parseInt(styleProperties.height) + 'px';			
				}	
			} */

			return styles;
		}

		
		function removeEmptyKeys(json, zeroAllow) {
			var returnJson = {};
			for(key in json) {
				var value = json[key]; 
				if(zeroAllow){
					// eslint-disable-next-line zstandard/no-duplicate-null-check, eqeqeq
					if(value != undefined && value != null){
						returnJson[key] = json[key];
					}
				// eslint-disable-next-line eqeqeq
				} else if(value && value != 0){
						returnJson[key] = json[key];
					}
				
			}
			return returnJson
		}
	
		return {
			createJson: nodesJson,
			createJsonNew: createJsonNew,
			styleAttribute : getStyles,
			compress: compressJson,
			getposition: createPosition,
			getstyles: createStyle,
			getValue: constructValue
		};
	})();
	
	window.jsonCreation = jsonCreation;
	
	})();;(function(){
	// eslint-disable-next-line zohocrm/no-unused-vars
	var createStruture = (function () {

		var SERVER_RENDERING = true;
		
		var createElement = function(el){
			//var $body = $('body');
			//var zciframe = $body.find('.zc-iframe'); // NO I18N
			// if(!zciframe.length){
			// 	zciframe = $('<iframe/>' , {class: 'zc-iframe'});
			// 	// eslint-disable-next-line zstandard/no-body-events
			// 	$body.append(zciframe);
			// }

			//var doc = zciframe.length ? zciframe[0].contentDocument : document;
			var zciframe = document.body.querySelector('.zc-iframe'); // NO I18N
			var doc = zciframe ? zciframe.contentDocument : document;
			return doc.createElement(el);
		}

		var $ZEL = function(st){
			if(typeof st === 'string'){
				var div = createElement('div'); // NO I18N
				div.innerHTML = st;
				return $(div).children();
			}else{
				return st;
			}
			
		}
		function getvalue(style, property){
			var result = {left: 0 , top: 0 , right: 0 , bottom: 0};
			var proparray = ['top' , 'right' , 'bottom', 'left']; // NO I18N
			if(style[property]){
				var split = style[property].split(" ");
				if(split.length > 1){
					result.top = parseInt( split[0] );
					result.right = parseInt( split[1] );
					result.bottom = parseInt( split[2] );
					result.left = parseInt( split[3] );
				}else{
					result.top = result.right = result.bottom = result.left = parseInt( split[0] );
				}
				
			}
			var proplen = proparray.length;
			for(var i = 0 ; i < proplen ; i++){
				if(style[property + '-' + proparray[i]]){
					result[proparray[i]] = parseInt( style[ property + '-' + proparray[i]] || 0);
				}
			}

			return result;
		}


		// function newHtmlLayout(){
		// 	return;
		// }
		
		function htmlLayout(selectedNode, json){ 
			if(selectedNode){
				var node = $(selectedNode);
				json = canvasOutput.createJson(node, undefined, true);
			} else if(json){
				json = JSON.parse(JSON.stringify(json));
			} else {
				json = canvasOutput.createJson($("#zcanvas-editor-outer"), undefined, true);
			}
			if(!json) {
				return;
			}
			var type = json._type;
			if(type === "pagecomponent" || type === "component" || type === "relatedlist"){
				// setPadding(json);
				// var jsonChildren = json.children;
				// var htmlJson = viewUtils.distrubNodeGroup(json, "row");//NO I18N
				// if(type != "relatedlist"){
				// 	if(htmlJson && htmlJson.ui && htmlJson.ui.value.style){
				// 		htmlJson.ui.value.style.marginTop = htmlJson.ui.value.position.startY;
				// 		htmlJson.ui.value.style.marginLeft = htmlJson.ui.value.position.startX;
				// 	}
				// }
				// viewUtils.overlapAdjustment(json);
				viewUtils.distrubNodeGroup(json, "row");//NO I18N
				return json;
			} else {
				return json;
			}
		}

		function setComponentPadding(json){
			if(json.ui.value.style && !json.ui.value.style.default){
				json.ui.value.style.default = {};
			}
			var children = json.children;
			var paddingval = createStruture.splitstyle(json.ui.value.style.default , 'padding') // NO I18N
			var haspadding = typeof json.ui.value.style.default.padding !== 'undefined'; // NO I18N 
			if(children.length > 0){
				// eslint-disable-next-line webperf/layout-thrashing
				var leftSpace = json.ui.value.position.minLeft || 0;
				// eslint-disable-next-line webperf/layout-thrashing
				var topSpace = json.ui.value.position.minTop || 0;
				// eslint-disable-next-line webperf/layout-thrashing
				var rightMaxNode = canvasObjUtils._.max(children, function(b){return b.ui.value.position.endX});
				
				// var leftPadding = paddingvall.left;
				// var topPadding = paddingvall.top;
				// eslint-disable-next-line webperf/layout-thrashing
				if(paddingval.right > 0){
						// eslint-disable-next-line webperf/layout-thrashing
					var rightSpace = json.ui.value.position.width - rightMaxNode.ui.value.position.endX;
					// eslint-disable-next-line webperf/layout-thrashing
					if(rightSpace < paddingval.right){
						var rightVal = rightSpace;
					} else {
						// eslint-disable-next-line webperf/layout-thrashing
						var rightVal = paddingval.right;
					}
						json.ui.value.style.default['padding-right'] = rightVal + 'px'; // NO I18N
				}else if(haspadding) {
					json.ui.value.style.default['padding-right'] =  '0px'; // NO I18N
				}
				// eslint-disable-next-line webperf/layout-thrashing
				if(paddingval.bottom > 0){
						// eslint-disable-next-line webperf/layout-thrashing
					var bottomSpace = json.ui.value.position.height - (rightMaxNode.ui.value.position.startY + rightMaxNode.ui.value.position.height);
					// eslint-disable-next-line webperf/layout-thrashing
					if(bottomSpace < paddingval.bottom){
						var bottomVal = bottomSpace;
					} else {
						// eslint-disable-next-line webperf/layout-thrashing
						var bottomVal = paddingval.bottom;
					}
					json.ui.value.style.default['padding-bottom'] = bottomVal + 'px'; // NO I18N
				}else if(haspadding) {
					json.ui.value.style.default['padding-bottom'] =  '0px'; // NO I18N
				}
				json.ui.value.style.default['padding-left'] = leftSpace + 'px'; // NO I18N
				json.ui.value.style.default['padding-top'] = topSpace + 'px'; // NO I18N
			} else {
				// eslint-disable-next-line webperf/layout-thrashing
				json.ui.value.style.default['padding-left'] = paddingval.left + 'px'; // NO I18N
				// eslint-disable-next-line webperf/layout-thrashing
				json.ui.value.style.default['padding-right'] = paddingval.right + 'px'; // NO I18N
				// eslint-disable-next-line webperf/layout-thrashing
				json.ui.value.style.default['padding-top'] = paddingval.top + 'px'; // NO I18N
				// eslint-disable-next-line webperf/layout-thrashing
				json.ui.value.style.default['padding-bottom'] = paddingval.bottom + 'px'; // NO I18N
				
			}
			
			// eslint-disable-next-line webperf/layout-thrashing
			if(json.ui.value.style.default.padding){
				// eslint-disable-next-line webperf/layout-thrashing
				 delete json.ui.value.style.default.padding;
			}
		}
		function createHtmlnew(json, viewType , outerflag){ // viewtype is px or percentage 
			// var tagName = json.ui.value.tagname;
			// var styleObj = json.ui.value.style;
			// var nodeClass = json.ui.value.class;
			var outerDiv = $( createElement('div') ); //NO I18N
			// for(key in styleObj) {
			// 	$(node).css(key, styleObj[key]);
			// }
			// $(node).addClass(nodeClass).addClass("zcanvas");
			// $(node).zaddClass(nodeClass);
			var parentChildrens = json.children;
			var parentChildrenLength = parentChildrens.length;
			
//			var splitValues = _.chain(parentChildrens).map(function(b){return canvasObjUtils._.extend(b.ui.value.position, b.ui.value.style)}).value();
//			var totalWidth = _.chain(splitValues).map(function(d){return (d.marginLeft||0) + (d.marginRight||0) + (d.width || 0) }).reduce(function(memo, num){ return memo + num; }, 0).value();
			for(var i = 0; i < parentChildrenLength; i++){
				var nostyleapply = false;
				var currentNodeJson = parentChildrens[i];

				if(currentNodeJson.postLoad){
//					var styleObjNew = {};
//					for(key in currentNodeJson.ui.value.style) {
//						styleObjNew[key] =  currentNodeJson.ui.value.style[key];
//					}
					// eslint-disable-next-line webperf/layout-thrashing
//					styleObjNew.width = currentNodeJson.ui.value.position.width;
					// eslint-disable-next-line webperf/layout-thrashing
//					currentNode.css(styleObj);
					// eslint-disable-next-line webperf/layout-thrashing
					outerDiv.append(currentNodeJson.value);
					// eslint-disable-next-line webperf/layout-thrashing
					// $(node).append(createTd);
//					outerDiv.append(currentNodeJson.value);

					if(currentNodeJson.ui && currentNodeJson.ui.value.postclass){
						// eslint-disable-next-line webperf/no-multipleDOMLookup
						outerDiv.children().addClass(currentNodeJson.ui.value.postclass);
					}

				}
				else {
					var tagName = currentNodeJson.ui.value.tagname || "div";//NO I18N
//					var styleObj = currentNodeJson.ui.value.style;
//					var nodeClass = currentNodeJson.ui.value.class;
					var currentNode = $(createElement(tagName || 'div')); //NO I18N
//					for(key in styleObj) {
//						$(currentNode).css(key, styleObj[key]);
//					}
					if(currentNodeJson.customComponent || currentNodeJson._type === 'component' && !currentNodeJson.theme || currentNodeJson.theme === 'Custom Layout'){
						delete currentNodeJson.customComponent;
						if(!currentNodeJson.ui.value.style.default){
							currentNodeJson.ui.value.style.default = {};
						}
						currentNodeJson.ui.value.style.default.overflow = "auto";//NO I18N
						currentNode.addClass('zcanvassection');
						if(currentNodeJson.ui.value.fixed || currentNodeJson.ui.value.fixedHeight){
							currentNode.css({
								minHeight: currentNodeJson.ui.value.position.height,
								height: currentNodeJson.ui.value.position.height
							});
						} else {
							currentNode.css({
								minHeight: currentNodeJson.ui.value.position.height
							});
						}
						if(currentNodeJson.statichtml){
							var getHtml = fullHtml(undefined, currentNodeJson);
							currentNode.append(getHtml);
						} else if(currentNodeJson.relatedList && createStruture.singleshotrender){
							var getHtml = zcanvasrelatedList.toView(currentNodeJson , null ,null, true);
							currentNode.append(getHtml);
						}else{
							// setPadding(currentNodeJson);
//							var gethtml = getHtmlnew(undefined, currentNodeJson);
							var gethtml = fullHtml(undefined, currentNodeJson);
//							setComponentPadding(currentNodeJson);
							currentNode.append(gethtml);
						}

						if(currentNode && currentNode.length && currentNodeJson.ui && currentNodeJson.ui.value && currentNodeJson.ui.value.attr){
							for(var atrkey in currentNodeJson.ui.value.attr){
								currentNode[0].setAttribute(atrkey , currentNodeJson.ui.value.attr[atrkey]);
							}
						}
						
						// $(createRowElm).append(createTd);
					} else if(currentNodeJson.layoutComponent || currentNodeJson.theme && currentNodeJson.theme !== 'Custom Layout'){
						var layoutname = currentNodeJson.theme || currentNodeJson.layoutName;
						var layoutinstance  = zclayout.prototype.layouts[layoutname];
						var gethtml = layoutinstance.toView(currentNodeJson,currentNode,SERVER_RENDERING);
						if(currentNodeJson.theme === "Grid List" || currentNodeJson.replacenode){//NO I18N
							currentNode = $(gethtml);
						} else {
							currentNode.append(gethtml);
						}
						nostyleapply = true;
						// $(createRowElm).append(createTd);
					} else if(currentNodeJson._type === "dummyDiv"){
						var jsonNew = JSON.parse(JSON.stringify(currentNodeJson))//canvasObjUtils._.clone(nodeJson);
						// var createJson = htmlLayout(undefined, currentNodeJson);
						// var gethtml = createHtmlnew(createJson);
						if(SERVER_RENDERING){
							var gethtml = createHtmlnew(jsonNew , null , true);
						}else{
							var gethtml = getHtmlnew(undefined, jsonNew , true);
						}
						
						if(gethtml.hasClass("canvas-component")){
							// var node = $(gethtml)[0];
							// var styleObjCom = inlineStyle(node);
							currentNode.append(gethtml.html());
							var dataClass = gethtml.data("zcanvasclass");//NO I18N
							currentNode.addClass(dataClass);
//							for(key in styleObjCom) {
//								currentNode.css(key, styleObjCom[key]);
//							}
						} else {
							currentNode.append(gethtml);
						} 
						// eslint-disable-next-line no-multipleDOMLookup
						// if(currentNodeJson.divType === "column" && currentNodeJson.children.length > 1 || currentNodeJson.divType === "row" && currentNodeJson.children.length > 1){//NO I18N
						// 	var _cbElementappend =  createElement('div'); // NO I18N
						// 	_cbElementappend.classList.add('cB'); // NO I18N 
						// 	currentNode.append(_cbElementappend);//NO I18N
						// }
						currentNode.addClass("divClass");
//						for(key in currentNodeJson.ui.value.style) {
//							currentNode.css(key, currentNodeJson.ui.value.style[key]);
//						}
						if(viewType){
							currentNode.css({
								width: currentNodeJson.ui.value.position.width,
								// minHeight: currentNodeJson.ui.value.position.height,
								height: "auto"//NO I18N
							});
						} else {
							// eslint-disable-next-line no-lonely-if
							if(viewType){
								currentNode.css({
									width: currentNodeJson.ui.value.position.width,
									// minHeight: currentNodeJson.ui.value.position.height,
									height: "auto"//NO I18N
								});
							} else {
								// eslint-disable-next-line no-lonely-if
								if(currentNodeJson.divType === "column"){
									currentNode.css({
										width: "100%",
										// minHeight: currentNodeJson.ui.value.position.height,
										height: "auto"//NO I18N
									});
								} else {
									if(currentNodeJson.ui.value.style && !currentNodeJson.ui.value.style.default){
										currentNodeJson.ui.value.style.default = {};
									}
									// var marginval = getvalue(currentNodeJson.ui.value.style.default , 'margin'); // NO I18N
									// var leftMargin = currentNodeJson.ui.value.style.default.marginLeft || 0;
									// var rightMargin = currentNodeJson.ui.value.style.default.marginRight || 0;
									// var leftMargin = marginval.left;
									// var rightMargin = marginval.right;
									// var marginVal =  leftMargin + rightMargin;
									// var perWidth = (currentNodeJson.ui.value.position.width/(json.ui.value.position.width + marginVal))*100;
									//var perWidth = ((currentNodeJson.ui.value.position.width + marginVal)/defaults.viewOuterWidth)*100;
									// var widthWidthMargin = currentNodeJson.ui.value.position.width + marginVal;
									var nodeWidth = currentNodeJson.ui.value.position.width;

									// if(currentNodeJson._type == 'dummyDiv'){
									// 	var  marginval = getvalue(currentNodeJson.ui.value.style.default , 'margin'); // NO I18N
									// 	// eslint-disable-next-line webperf/layout-thrashing
									// 	var leftMargin = marginval.left;
									// 	// eslint-disable-next-line webperf/layout-thrashing
									// 	var rightMargin = marginval.right;
									// 	var marginVal =  leftMargin ;
									// 	nodeWidth -= marginVal;
									// }

									
									// var widthWidthMargin = nodeWidth + marginVal;
									var paddingVal = getvalue(json.ui.value.style.default || {} , 'padding') // NO I18N
									// eslint-disable-next-line webperf/layout-thrashing
									var rightSpace = paddingVal.right;
									// eslint-disable-next-line webperf/layout-thrashing
									var outerContainerWidth = json.ui.value.position.width - (json.ui.value.position.minLeft || 0) - rightSpace;
									// var perWidth = ((currentNodeJson.ui.value.position.width)/json.ui.value.position.width)*100;

									if(currentNodeJson.ui.value.fixed){
										var perWidth = nodeWidth + "px";//NO I18N
										var perHeight =  currentNodeJson.ui.value.position.height + "px";//NO I18N
										var flexShrinkVal = 0;
										var flexGrowVal = 0;
									} else if(currentNodeJson.ui.value.fixedWidth){
										var perWidth = nodeWidth + "px";//NO I18N
										var perHeight =  "auto";//NO I18N
										var flexShrinkVal = 0;
										var flexGrowVal = 0;
									} else if(currentNodeJson.ui.value.fixedHeight){
										var perWidth = nodeWidth / outerContainerWidth * 100 + "%";//NO I18N
										var perHeight =  currentNodeJson.ui.value.position.height + "px";//NO I18N
										var flexShrinkVal = 1;
										var flexGrowVal = 0;
									} else {
										var perWidth = nodeWidth / outerContainerWidth * 100 + "%";//NO I18N
										var perHeight =  "auto";//NO I18N
										var flexShrinkVal = 1;
										var flexGrowVal = 1;
									}
									// var leftMarginPer = ((leftMargin/outerContainerWidth)*100);
									// var rightMarginPer = ((rightMargin/outerContainerWidth)*100);
									
									// eslint-disable-next-line webperf/layout-thrashing
									currentNode.css({
										// width: 'calc('+perWidth+' - '+leftMargin+'px - '+rightMargin+'px)',//NO I18N
										// minHeight: currentNodeJson.ui.value.position.height,
										width: perWidth,
										height: perHeight,//NO I18N
										flexShrink: flexShrinkVal,
										flexGrow: flexGrowVal
									});
//									if(currentNodeJson.ui.value.fixed){
//										var perWidth = widthWidthMargin;
//										currentNode.css({
//											width: 'calc('+perWidth+'px - '+leftMargin+'px - '+rightMargin+'px)',  //perWidth+"%",
//											// minHeight: currentNodeJson.ui.value.position.height,
//											height	: "auto",//NO I18N
//											flexShrink: 0
//										});
//									} else {
//										var perWidth = ((widthWidthMargin)/json.ui.value.position.width)*100;
//										currentNode.css({
//											width: 'calc('+perWidth+'% - '+leftMargin+'px - '+rightMargin+'px)',  //perWidth+"%",
//											// minHeight: currentNodeJson.ui.value.position.height,
//											height: "auto",//NO I18N
//											flexGrow: 1
//										});
//									}
								}
							}
						}
						
					} else if(currentNodeJson._type === "tableStruture"){
						var gethtml = newTableCreation(currentNodeJson); //getHtmlnew(undefined, currentNodeJson);
						// eslint-disable-next-line webperf/layout-thrashing
						currentNode.append(gethtml);
						// eslint-disable-next-line webperf/layout-thrashing
						currentNode.addClass("canvas-component"); //NO I18N
						// currentNode = $(getHt)
//						for(key in currentNodeJson.ui.value.style) {
//							currentNode.css(key, currentNodeJson.ui.value.style[key]);
//						}
					} else{
//						var childrenLen = currentNodeJson.children.length;
//						if(childrenLen > 0){
						
							var innerContent = toDomnew(currentNodeJson);
							currentNode = innerContent;
							nostyleapply = true;
							if(currentNodeJson._type === "row"){
								var _fields = $(innerContent).find('.zcanvas-field'); // NO I18N
								var nodeln = _fields.length;
								for(var index = 0 ; index < nodeln ; index++){
									// eslint-disable-next-line webperf/no-multipleDOMLookup
									applyzcss(_fields.eq(index), currentNodeJson.children[index] ? currentNodeJson.children[index].ui : {} , createStruture.toolinst , true);
								}
							}else{
								// eslint-disable-next-line zstandard/no-jQuery-casting
								applyzcss($(currentNode) , currentNodeJson.ui , createStruture.toolinst , true);
							}
							
//						}
						// $(createRowElm).append(createTd);	
					}
				var styleObj = currentNodeJson.ui.value.style;
				var nodeClass = currentNodeJson.ui.value.class;

				if(currentNodeJson.ui.value && currentNodeJson.ui.value.system_id){
					nodeClass += ' canvasselectableelemnt canvas-element-id-' + currentNodeJson.ui.value.system_id; // NO I18N
				}
				// eslint-disable-next-line zstandard/no-jQuery-casting
				var $currentNode = $(currentNode);
				var zIndex = currentNodeJson.ui.value.position.depth;
				// for(key in styleObj) {
				// 	$currentNode.css(key, styleObj[key]);
				// }
				var zid = zutils.getRandomId();
				
				if(!nostyleapply){
					applystyle($currentNode , styleObj , zid , null , currentNodeJson);
					// eslint-disable-next-line webperf/layout-thrashing
					/*$currentNode.addClass(zid);
					var inst = createStruture.toolinst;
					!canvasObjUtils._.isEmpty((styleObj && styleObj.default) || {}) && inst.addrule('.'+zid , styleObj.default || {} );
					!canvasObjUtils._.isEmpty((styleObj && styleObj.hover) || {}) && inst.addrule('.'+zid+':hover' , styleObj.hover || {} );*/
				}
				

				if(currentNodeJson.ui.value.fixed && currentNodeJson._type === "dummyDiv"){
					// eslint-disable-next-line webperf/layout-thrashing
					$currentNode.attr('data-fixed','true').addClass("zcfixed");//NO I18N
				}
				if(zIndex){
					// eslint-disable-next-line webperf/layout-thrashing
					$currentNode.css("z-index", zIndex);//NO I18N
				}
				// eslint-disable-next-line webperf/layout-thrashing
				$currentNode.addClass(nodeClass).addClass("zcanvas");
				// eslint-disable-next-line webperf/layout-thrashing
				$currentNode.zaddClass(nodeClass);
				// eslint-disable-next-line webperf/layout-thrashing
				outerDiv.append(currentNode);	

				if(createStruture && createStruture.toolinst && createStruture.toolinst.config && createStruture.toolinst.config.viewcallback){
					createStruture.toolinst.config.viewcallback(currentNode , currentNodeJson);
				}
				}
			}
			// eslint-disable-next-line webperf/no-multipleDOMLookup
			return outerflag ? outerDiv.children() : outerDiv.html();
		}
		function newTableCreation(currentNodeJson){
			var createDiv = $( createElement('div') );//NO I18N
			var children = canvasObjUtils._.sortBy(currentNodeJson.children, function(d){return d.ui.value.position.startY});
			var childrenLen = children.length;
			var outerNode = canvasObjUtils._.clone(currentNodeJson);
			for(var i = 0; i < childrenLen; i++){
			        var outerContainer = children[i];
			        var outerContent = toDomnew(outerContainer);
					var eachNode = outerContainer.children;
					// eslint-disable-next-line webperf/no-multipleDOMLookup
					outerNode.children = [];
					// eslint-disable-next-line webperf/no-multipleDOMLookup
			        outerNode.children.push(eachNode);
			        var getHtml = createHtmlnew(outerNode);
			        $(outerContent).append(getHtml);
			        createDiv.append(outerContent);
			}
			return createDiv;
		}

		function getClass_(json, parrentJson){
			var type = json._type;
			var parrentType = parrentJson && parrentJson._type;
			var returnClass;
			if(type === "field" && parrentType !== "rows"){ //NO I18N
				returnClass = "zcanvas-field";//NO I18N
			} else if(type === "field" && parrentType === "rows"){ //NO I18N
				returnClass = "zcanvas-holder zcanvas-data-node";//NO I18N
			} else if(type === "merge-field"){
				returnClass = "zcanvas-field zcanvas-merged-node";//NO I18N
			} else if(type === "rows"){
				returnClass = "zcanvas-row-separator";//NO I18N
			} else if(type === "separator" || type === "zcseparator"){
				returnClass = "zcanvas-seperator";//NO I18N
			} else if(type === "system"){//NO I18N
				returnClass = "zcanvas-value-container";//NO I18N
			}else if(type === "action" || type === "button" || type === "link"){ // NO I18N
				returnClass = "zcanvas-field"; // NO I18N
			}
			return returnClass;
		}
		function createNode(ui, value, json, parrentJson, onEditor , nostyleapply) {
			if(json){
				var editorClass = getClass_(json, parrentJson);
			}
			var tagName	= ui.tagName || "div";//NO I18N
			var styleObj = ui.style;
			var nodeClass = ui.class;
			var node =  createElement(tagName);

			// for(key in styleObj) {
			// 	$(node).css(key, styleObj[key]);
			// }
			if(!onEditor && !nostyleapply){
				var zid = zutils.getRandomId();
				$(node).addClass(zid);
				if(value && typeof value === "string" && value.indexOf('img') > -1){ // NO I18N
					zid = zid + ' img'; // NO I18N
				}
				applystyle($(node) , styleObj , zid , true);
				/*var inst = createStruture.toolinst;
				!canvasObjUtils._.isEmpty((styleObj && styleObj.default) || {}) && inst.addrule('.'+zid , styleObj.default || {} );
				!canvasObjUtils._.isEmpty((styleObj && styleObj.hover) || {}) && inst.addrule('.'+zid+':hover' , styleObj.hover || {} );*/
			}
			

			$(node).addClass(nodeClass).addClass("zcanvas").addClass(editorClass);
			$(node).zaddClass(nodeClass).zaddClass(editorClass);
			
			if(value && !ui.icon){
				// if(sanitize){
				// 	var $temps =  document.createElement("template");

				// 	$temps.innerHTML = value;
					
				// 	value = $temps.content.children[0];
				// }
				if(ui.extrahtml){
					value += ui.extrahtml;
				}
				$(node).zhtml(value);
			}
			if(ui.icon){
				$(node).attr('zc-icon',ui.icon).addClass(ui.icon).addClass('zcicon').html('');
			}

			attachinteractions(ui , node , onEditor);

			
			return node;
		}
		function attachinteractions(ui , node , isEditor){
			if(ui.interactions){
				var intlen = ui.interactions.length;
				for(var i = 0 ; i < intlen ; i++){
					node.setAttribute(ui.interactions[i].event , ui.interactions[i].handler);
				}
			}
			// Attach names
			if(!isEditor && ui.system_id){
				node.classList.add('canvasselectableelemnt'); // NO i18N
				node.classList.add('canvas-element-id-' + ui.system_id); // NO I18N
			}
			
		}
		function setZdata(currentJson, node , onEditor){
			if(!onEditor){
				return ;
			}
			var cloneData = canvasObjUtils._.clone(currentJson);
			delete cloneData.ui;
			delete cloneData.children;
			delete cloneData.dataHolder;
			$(node).data("zcanvasField", cloneData);
			$(node).attr("data-zcanvasid", cloneData.zcanvasId).addClass("zcanvas-data-node").zdata(cloneData);
		}
		function toDomnew(currentJson, onEditor, parrentNode){
//			var tagName	= currentJson.ui.value.tagName || "div";//NO I18N
//			var styleObj = currentJson.ui.value.style;
//			var nodeClass = currentJson.ui.value.class;
//			var node =  document.createElement(tagName);
//			for(key in styleObj) {
//				$(node).css(key, styleObj[key]);
//			}
//			$(node).addClass(nodeClass).addClass("zcanvas");
//			$(node).zaddClass(nodeClass);
			var type = currentJson._type;
			if(currentJson.ui && currentJson.ui.value && currentJson.ui.value.position){
				var currentJsonHeight = currentJson.ui.value.position.height;
				var currentJsonWidth = currentJson.ui.value.position.endX - currentJson.ui.value.position.startX ;
			}
			
//			if(type == "field-holder"){
//				var node = 	createNode(currentJson.ui.holder);
//			} else {
				var node = 	createNode(currentJson.ui.value, undefined, currentJson, parrentNode, onEditor);
//			}
			var childrenNodes = currentJson.children || [];
			var childrenLength =  childrenNodes.length;
			
			if(type){
//				if(type == "label"){
//					$(node).html(currentJson.label);
//				} else 
//				type == "field" || 
				if(type === "relatedlist" ) { // || type == "action" || type == "system"
					$(node).html(currentJson.value);
				}
				if(type === "separator"){
					$(node).html(currentJson.ui && currentJson.ui.value && currentJson.ui.value.value);
				}
			}
			if(type === "field" || type === "action" || type === "system" || type === "link" || type === "button"){ 
				var parentType = parrentNode && parrentNode._type;
				var fieldNode = createNode(currentJson.ui.field, currentJson.value , null , null , onEditor, true); 
				$(fieldNode).addClass("zcanvas-value-container zcanvas-inner-component");//NO I18N
				if(currentJson.ui.label) {
					var labelNode = createNode(currentJson.ui.label, currentJson.label, null ,null ,onEditor);
					var lnode = $(labelNode);
					lnode.addClass("zcanvas-label zcanvas-inner-component");//NO I18N

				}
				if(currentJson.ui.icon){
					var labelNode = createNode(currentJson.ui.icon,null,null,null,onEditor);
					var lnode = $(labelNode);
					lnode.addClass("zcanvas-label zcanvas-inner-component");//NO I18N
				}
				if(currentJson.datatype === "text-area" && currentJson.ui.value.fixed){//NO I18N
					!onEditor && $(fieldNode).css({"height": currentJsonHeight,"overflow":"auto"});//NO I18N
				}
				var hzid = currentJson.zcanvasId || zutils.getRandomId();
				node.classList.add(hzid);
				if(currentJson.ui.holder){
					var holderNode = createNode(currentJson.ui.holder,null,null,null,onEditor);
					var $holder = $(holderNode)
					
					$holder.addClass("zcanvas-holder zcanvas-data-node");//NO I18N
					setZdata(currentJson, holderNode , onEditor);
					holderNode.append(labelNode);
					holderNode.append(fieldNode);
					
					node.append(holderNode);
					!onEditor && $holder.attr('data-zcanvasid',hzid); // NO I18N
					onEditor && applyzcss($(node) , currentJson.ui);
					if(currentJson.datatype === "text-area"){//NO I18N
						!onEditor && $holder.css("min-height", currentJsonHeight);//NO I18N
					}
					if(type === "action" || type === "button"){//NO I18N
						if(onEditor){
							$(node).css("width", currentJsonWidth);
						} else {
							$(node).css("min-width", currentJsonWidth);
						}
					}
				} else {
					if(parentType === "rows"){
						setZdata(currentJson, node , onEditor);
					} else {
						setZdata(currentJson, fieldNode , onEditor);
					}
					if(labelNode){
						node.append(labelNode);
					}
					if(currentJson.datatype === "text-area"){//NO I18N
						$(holderNode).css("min-height", currentJsonHeight);//NO I18N
					}
					if(type === "action" || type === "button"){//NO I18N
						if(onEditor){
							$(node).css("width", currentJsonWidth);
						} else {
							$(node).css("min-width", currentJsonWidth);
						}
					}
					if(type !== 'field'){
						if(onEditor){
							$(node).css("width", currentJsonWidth);
						} else {
							$(node).css("min-width", currentJsonWidth);
						}
					}
					if(currentJson.datatype && currentJson.datatype.toLowerCase().indexOf("profileimage") > -1){
						var w = currentJson.ui.value.position.width;
						var h = currentJson.ui.value.position.height;
						var bdrStr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default.border;
						if(bdrStr){
							var bdrSplit = bdrStr.match(/\d+/g) || [];//NO I18N
							var bdrValue = parseInt(bdrSplit[0]);
							var leftBdrVal = bdrValue || 0;
							var rightBdrVal = bdrValue || 0;
							var topBdrVal = bdrValue || 0;
							var btmBdrVal = bdrValue || 0;
						} else {
							var leftBdrStr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["border-left"];//NO I18N
							var rightBdrStr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["border-right"];//NO I18N
							var topBdrStr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["border-top"];//NO I18N
							var btmBdrStr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["border-bottom"];//NO I18N

							var leftBdrSplit = leftBdrStr && leftBdrStr.match(/\d+/g);//NO I18N
							var rightBdrSplit = rightBdrStr && rightBdrStr.match(/\d+/g);//NO I18N
							var topBdrSplit = topBdrStr && topBdrStr.match(/\d+/g);//NO I18N
							var btmBdrSplit = btmBdrStr && btmBdrStr.match(/\d+/g);//NO I18N

							var leftBdrVal = leftBdrSplit && parseInt(leftBdrSplit[0]) || 0;
							var rightBdrVal = rightBdrSplit && parseInt(rightBdrSplit[0]) || 0;
							var topBdrVal = topBdrSplit && parseInt(topBdrSplit[0]) || 0;
							var btmBdrVal = btmBdrSplit && parseInt(btmBdrSplit[0]) || 0;
						}
						// eslint-disable-next-line webperf/layout-thrashing
						var pdstr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default.padding;

						if(pdstr){
							var psplit = pdstr.match(/\d+/g) || [];//NO I18N
							var pvalue = parseInt(psplit[0]);
							var lp = pvalue || 0;
							var rp = pvalue || 0;
							var tp = pvalue || 0;
							var bp = pvalue || 0;
						} else {
							var lpstr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["padding-left"];//NO I18N
							var rpstr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["padding-right"];//NO I18N
							var tpstr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["padding-top"];//NO I18N
							var bpstr = currentJson.ui.field.style && currentJson.ui.field.style.default && currentJson.ui.field.style.default["padding-bottom"];//NO I18N

							var lpsplit = lpstr && lpstr.match(/\d+/g);//NO I18N
							var rpsplit = rpstr && rpstr.match(/\d+/g);//NO I18N
							var tpsplit = tpstr && tpstr.match(/\d+/g);//NO I18N
							var bpsplit = bpstr && bpstr.match(/\d+/g);//NO I18N

							var lp = lpsplit && parseInt(lpsplit[0]) || 0;
							var rp = rpsplit && parseInt(rpsplit[0]) || 0;
							var tp = tpsplit && parseInt(tpsplit[0]) || 0;
							var bp = bpsplit && parseInt(bpsplit[0]) || 0;
						}
						var imgNode = $(fieldNode).find("img");//NO I18N
						imgNode.css({maxWidth: w - leftBdrVal - rightBdrVal - lp - rp , maxHeight: h - topBdrVal - btmBdrVal - tp - bp });
					}
					fieldNode.classList.add('zcanvas-data-node'); // NO I18N
					!onEditor && $(fieldNode).attr('data-zcanvasid',hzid); // NO I18N
					var $node = $(node);
					onEditor && applyzcss($node , currentJson.ui);
					node.append(fieldNode);
				}
			} else {
				for(var j = 0; j < childrenLength; j++){
					node.append(toDomnew(childrenNodes[j], onEditor, currentJson));
				}
			}

			var conf = createStruture.toolinst;

			if(conf && conf.config && conf.config.nodeattr){
				var attrdata = currentJson[conf.config.nodeattr.key] || currentJson[conf.config.nodeattr.key2];
				if(!attrdata && conf.config.nodeattr.altercheck){
					attrdata = currentJson[conf.config.nodeattr.alterkey];
				}
				for(attr in conf.config.nodeattr.attr){
					attrdata && node.setAttribute( attr ,   conf.config.nodeattr.attr[attr] + attrdata);
				}
			}

			if(currentJson.ui && currentJson.ui.value && currentJson.ui.value.attr){
				for(var atrkey in currentJson.ui.value.attr){
					node.setAttribute(atrkey , currentJson.ui.value.attr[atrkey]);
				}
			}
			 
			return node; 
		}

		var applyzcss = function(node , ui , inst , flag){
			if(jsonCreation.toolinst || inst){
				var field = node;
				var _node = node[0];
				var holder = $(_node.querySelector('.zcanvas-holder')); // node.find('.zcanvas-holder'); // NO I18N
				var lable = $(_node.querySelector('.zcanvas-label'));  //node.find('.zcanvas-label'); // NO I18N
				var value = $(_node.querySelector('.zcanvas-value-container')); //node.find('.zcanvas-value-container'); // NO I18N
				if(field.length && ui.value){
					field.zccss(ui.value.style , false , inst , flag);
				}
				if(holder.length && ui.holder) {
					holder.zccss(ui.holder.style , false , inst , flag);
				}
				if(lable.length && ui.label){
					lable.zccss(ui.label.style , false , inst , flag);
				}
				if(value.length && ui.field){
					value.zccss(ui.field.style , false , inst , flag);
				}
				if(lable.length && ui.icon){
					lable.zccss(ui.icon.style , false , inst , flag);
				}
			}
		}

		// function createHtml(json){
		// 	var childrens = json.children;
		// 	var outerDiv = toDom(json);
		// 	return outerDiv;
		// }
		// function toDom(json, onEditor){
		// 	var type = json._type;
            
        //     // if(json.postLoad){
        //     //     var styleObj = {};
        //     //     for(key in json.ui.value.style) {
        //     //         styleObj[key] =  currentNodeJson.ui.value.style[key];
        //     //     }
        //     //     // eslint-disable-next-line webperf/layout-thrashing
        //     //     styleObj.width = currentNodeJson.ui.value.position.width;
        //     //     // eslint-disable-next-line webperf/layout-thrashing
        //     //     createTd.css(styleObj);
        //     //     // eslint-disable-next-line webperf/layout-thrashing
        //     //     $(createTd).append(currentNodeJson.value);
        //     //     // eslint-disable-next-line webperf/layout-thrashing
        //     //     $(createRowElm).append(createTd);
        //     // }

		// 	if(json._type == "component"){
		// 		var componentHtml = getHtml(undefined, json);

		// 		var tagName = json.ui.value.tagname;
		// 		var styleObj = json.ui.value.style;
		// 		var nodeClass = json.ui.value.class;
		// 		var createDiv = document.createElement(tagName);
		// 		for(key in styleObj) {
		// 			$(createDiv).css(key, styleObj[key]);
		// 		}
		// 		$(createDiv).addClass(nodeClass).addClass("zcanvas");
		// 		$(createDiv).zaddClass(nodeClass);

		// 		$(createDiv).append(componentHtml);
		// 	} else if(json.layoutComponent){
		// 		var tagName = json.ui.value.tagname;
		// 		var createDiv = document.createElement(tagName);
		// 		var layoutname = json.theme;
		// 		var layoutinstance  = zclayout.prototype.layouts[layoutname];
		// 		var gethtml = layoutinstance.toView(json);
				
		// 		$(createDiv).append(gethtml);	
		// 	} else if (json._type == "pagecomponent" || json._type == "view"){
		// 		var html = getHtml(undefined, json.children[0]);
		// 		var tagName = json.ui.value.tagname;
		// 		var styleObj = json.ui.value.style;
		// 		var nodeClass = json.ui.value.class;
		// 		var createDiv = document.createElement(tagName);
		// 		for(key in styleObj) {
		// 			$(createDiv).css(key, styleObj[key]);
		// 		}
		// 		$(createDiv).addClass(nodeClass).addClass("canvas-outer");
		// 		$(createDiv).zaddClass(nodeClass);

		// 		$(createDiv).append(html);
		// 	} else {
		// 		if(type == "dummyDiv"){
		// 			var createDiv = $("<div />");
		// 			createDiv.addClass("divClass");

		// 			var styleObj = json.ui.value.style;
		// 			for(key in styleObj) {
		// 				$(createDiv).css(key, styleObj[key]);
		// 			}
		// 			createDiv.css({
		// 				width: json.ui.value.position.width,
		// 				height: json.ui.value.position.height
		// 			});
		// 		} else {
		// 			var tagName = json.ui.value.tagname;
		// 			var styleObj = json.ui.value.style;
		// 			var nodeClass = json.ui.value.class;
		// 			var createDiv = document.createElement(tagName);
		// 			for(key in styleObj) {
		// 				$(createDiv).css(key, styleObj[key]);
		// 			}
		// 			$(createDiv).addClass(nodeClass).addClass("zcanvas");
		// 			$(createDiv).zaddClass(nodeClass);

		// 			if(type == "label"){
		// 				$(createDiv).html(json.label);
		// 			} else if(type == "field" || type == "separator" || type == "relatedlist" || type == "link" || type == "button" || type == "special_comp") {
		// 				$(createDiv).html(json.value);
        //             }
                    
        //             if(json.dataHolder && onEditor){
        //                 var cloneData = canvasObjUtils._.clone(json);
        //                 delete cloneData.ui;
        //                 delete cloneData.children;
        //                 delete cloneData.dataHolder;
        //                 $(createDiv).data("zcanvasField", cloneData);
        //                 $(createDiv).attr("data-zcanvasid", cloneData.zcanvasId).addClass("zcanvas-data-node").zdata(cloneData);
        //             }
		// 		}
				
		// 		var children = json.children;
		// 		var childrenLen = children.length;
		// 		for(var i=0; i< childrenLen; i++){
		// 			$(createDiv).append(toDom(children[i], onEditor));
		// 		}
		// 	}
		// 	return createDiv;
		// }
		
		function getHtmlnew(selectedNode, nodeJson, canvasLayout){
			if(selectedNode) {
				var createJson =  htmlLayout(selectedNode);
				var html = createHtmlnew(createJson);
			} else if(nodeJson){
				var json = JSON.parse(JSON.stringify(nodeJson))//canvasObjUtils._.clone(nodeJson);
				if(!canvasLayout){
					var createJson = SERVER_RENDERING ? json : htmlLayout(undefined, json);
					var html = createHtmlnew(createJson);
				} else {
					var html = createHtmlnew(json);
				}
			}
			
			return html;
		}

		function fullHtml(selectedNode, nodeJson, serverCall, viewType, viewWidth, canvasLayout){
			if(selectedNode){
				var nodeJson =  canvasOutput.createJson(selectedNode, undefined, true);
			} 
			if(viewType === "fluid" && viewWidth){
				nodeJson.ui.value.position.width = viewWidth;
			}
			if(nodeJson.postLoad && nodeJson.value){
				return nodeJson.value;
			}
			var createDiv = $( createElement('div') );
			createDiv.addClass("canvas-outer");//NO I18N
			if(nodeJson.layoutComponent || nodeJson.theme && nodeJson.theme !== 'Custom Layout'){
				var tagName = nodeJson.ui.value.tagname || "div";//NO I18N
				var currentNode = $(createElement(tagName)) ; //NO I18N
				
				var layoutname = nodeJson.theme || nodeJson.layoutName;
				var layoutinstance  = zclayout.prototype.layouts[layoutname];
				var gethtml = layoutinstance.toView(nodeJson,currentNode,SERVER_RENDERING);
				return gethtml;
//				if(currentNodeJson.theme == "Grid List"){//NO I18N
//					currentNode = gethtml;
//				}
//				currentNode.append(gethtml);	

				// $(createRowElm).append(createTd);
			} else if(serverCall && nodeJson._type === "component"){
				var json = JSON.parse('{"_type":"dummyDiv","ui":{"value":{"position":{"startX":"","startY":"","width":"","height":"","endX":"","singleCellWidth":""},"style":{},"class":[]}},"children":[]}') //NO I18N
				// nodeJson.ui.value.style.width = nodeJson.ui.value.position.width;
				// nodeJson.ui.value.style.height = nodeJson.ui.value.position.height;
				// nodeJson.ui.value.style.height = "auto";//NO I18N
				json.children.push(nodeJson);
				var getInnerHtml = getHtmlnew(undefined, json, canvasLayout);
				setComponentPadding(json);
				return $ZEL(getInnerHtml);
			}
			// else if(nodeJson && nodeJson.statichtml){
			// 	var getInnerHtml = nodeJson.statichtml;
			// } 
			else if(serverCall && nodeJson._type === 'relatedlist'){ // NO I18N
				var getInnerHtml = getHtmlnew(undefined, nodeJson, canvasLayout);
				setComponentPadding(nodeJson);
				createDiv.css({
					height: nodeJson.ui.value.position.height,
					minHeight: nodeJson.ui.value.position.height
				})
			} else {
				var getInnerHtml = getHtmlnew(undefined, nodeJson, canvasLayout);
				if(!canvasLayout){
					setComponentPadding(nodeJson);
				}
			}
			
			createDiv.zhtml(getInnerHtml);
			// var _cbElement =  createElement('div'); // NO I18N
			// _cbElement.classList.add('cB'); // NO I18N 
			// createDiv.append(_cbElement);//NO I18N
			if(nodeJson._type === "pagecomponent"){
				var styleObj = nodeJson.ui.value.style;
				styleObj.default.height = nodeJson.ui.value.position.height;
				// styleObj.height = "100%";//NO I18N
				// styleObj.width = nodeJson.ui.value.position.width;
				styleObj.default.height = "unset";//NO I18N
				// for(key in styleObj) {
				// 	$(createDiv).css(key, styleObj[key]);
				// }
				var zid = 'zc-page-component-outer'; // NO I18N
				applystyle(createDiv , styleObj , zid);
				/*$(createDiv).addClass(zid);
				var inst = createStruture.toolinst;
				!canvasObjUtils._.isEmpty((styleObj && styleObj.default) || {}) && inst.addrule('.'+zid , styleObj.default || {} );
				!canvasObjUtils._.isEmpty((styleObj && styleObj.hover) || {}) && inst.addrule('.'+zid , styleObj.hover || {} )*/
			} 
			if(viewType === "fixed"){
				createDiv.css({"width":nodeJson.ui.value.position.width, "margin": "0 auto","box-sizing":"unset"});//NO I18N
			} else if(viewType === "warp"){
				createDiv.css({"width":nodeJson.ui.value.position.width});//NO I18N
			} else {
				createDiv.css("width", "100%");//NO I18N
			}
//			$(createDiv).css("height", "100%");//NO I18N
			
			if(nodeJson.relatedList){
				createDiv.css({
					display: "flex",//NO I18N
					flexDirection: "column"//NO I18N
				});
			} else if(nodeJson.divType === "row"){
				createDiv.css({
					display: "flex",//NO I18N
					flexDirection: "column"//NO I18N
				});
			} else if(nodeJson.divType === "column" || nodeJson.children.length > 1){
				createDiv.css({
					display: "flex",//NO I18N
					flexDirection: "row"//NO I18N
				});
			} else {
				createDiv.css({
					display: "flex",//NO I18N
					flexDirection: "column"//NO I18N
				});
			}
			
			return createDiv;
		}

		function applystyle(node , styleObj , zid , flag , mainjson){
			var zid = zid || zutils.getRandomId();
			var addclasses = ''
			!flag && (addclasses += zid); //node.addClass(zid);
			var _ispage = zid === 'zc-page-component-outer'; // NO I18N
			_ispage &&  (addclasses += ' zc-page-component'); // NO I18N
			addclasses && node.addClass(addclasses); // NO I18N
			var inst = createStruture.toolinst;
			if(styleObj){
				for(var keys in styleObj){
					switch(keys){
						case 'default':
							var selector = null
							if(_ispage){
								var newzid = zutils.getRandomId();
								selector = '.' + zid + '.' + newzid;
								node.addClass(newzid);
							}
							!canvasObjUtils._.isEmpty(styleObj && styleObj.default || {}) && inst.addrule(selector ? selector  : '.' + zid , styleObj.default || {} );
							break;
						case 'hover':
							!canvasObjUtils._.isEmpty(styleObj && styleObj.hover || {}) && inst.addrule('.' + zid + ':hover' , styleObj.hover || {} );
							break;
						case 'active':
							!canvasObjUtils._.isEmpty(styleObj && styleObj.active || {}) && inst.addrule('.' + zid + '.active' , styleObj.active || {} );
							break;
						default:
							var selector = '.' + zid;
							if(_ispage){
								var newzid = zutils.getRandomId();
								selector = selector + '.' + newzid;
								node.addClass(newzid);
							}
							if(inst.config && inst.config.customstate){
								selector = inst.config.customstate(keys , selector , node , styleObj , mainjson);
							}else if(node && node.hasClass('zcanvas-non-delete')){ // NO I18N
									selector = selctor + '.' + keys;
								}else{
									selector = '.' + keys + ' ' + selector;
								}
							if(styleObj[keys] && styleObj[keys]._classstyle_ && styleObj[keys]._classstyle_.length){
								styleObj[keys]._classstyle_.map(function(cname){node.addClass(cname)});
							}
							!canvasObjUtils._.isEmpty(styleObj && styleObj[keys] || {}) && inst.addrule(selector , styleObj[keys] || {} );
							break;
					}
				}
			}
			
			
		}
		

		function htmlouter(nodeJson){
			var createDiv = $( createElement('div') ); // NO I18N
			createDiv.addClass("canvas-outer");//NO I18N
			setComponentPadding(nodeJson);
			var styleObj = nodeJson.ui.value.style;
			// eslint-disable-next-line webperf/layout-thrashing
			styleObj.default.height = nodeJson.ui.value.position.height;
			// styleObj.height = "100%";//NO I18N
			// styleObj.width = nodeJson.ui.value.position.width;
			styleObj.default.height = "unset";//NO I18N
			// for(key in styleObj) {
			// 	$(createDiv).css(key, styleObj[key]);
			// }
			var zid = 'zc-page-component-outer'; // NO I18N
			applystyle(createDiv , styleObj , zid);
			/*$(createDiv).addClass(zid);
			var inst = createStruture.toolinst;
			!canvasObjUtils._.isEmpty((styleObj && styleObj.default) || {}) && inst.addrule('.'+zid , styleObj.default || {} );
			!canvasObjUtils._.isEmpty((styleObj && styleObj.hover) || {}) && inst.addrule('.'+zid , styleObj.hover || {} ) */

			if(nodeJson.divType === "row"){
				createDiv.css({
					display: "flex",//NO I18N
					flexDirection: "column"//NO I18N
				});
			} else if(nodeJson.divType === "column" || nodeJson.children.length > 1){
				createDiv.css({
					display: "flex",//NO I18N
					flexDirection: "row"//NO I18N
				});
			} else {
				createDiv.css({
					display: "flex",//NO I18N
					flexDirection: "column"//NO I18N
				});
			}
			return createDiv;
		}

		return {
			layoutJson: htmlLayout,
            layoutHtml: fullHtml,
			innerHtml: toDomnew,
			applystyle: applystyle,
			splitstyle: getvalue,
			rawhtml: createHtmlnew,
			outerhtml: htmlouter,
			createElement: createElement,
			attachinteractions: attachinteractions
			// splitedJson: renderJson;
			// layoutHtmlNew: getHtml //getHtmlnew
		}; 

	})();
	window.createStruture = createStruture;
})();;(function(){ // eslint-disable-line zstandard/no-global-function-call

	var canvasOutput = (function () {
		function nodesJson(selectNode, compressed){
			$('.ui-draggable-dragging').removeClass('ui-draggable-dragging'); 
			return jsonCreation.createJson(selectNode,compressed);
		}
		function getHtml(selectedNode, nodeJson, servercall, viewType, viewWidth){
			var html = createStruture.layoutHtml(selectedNode, nodeJson,servercall,viewType,viewWidth);
			return html;
		}
		// function getHtmlNew(selectedNode, nodeJson){
		// 	return createStruture.layoutHtmlNew(selectedNode, nodeJson);
		// }
		function toDom(json, onEditor){
			return createStruture.innerHtml(json, onEditor);
		}
		function styleAttributes(){
			return jsonCreation.styleAttribute();
		}
		function layoutJson(selectedNode, nodeJson){
			var layoutJson = createStruture.layoutJson(selectedNode, nodeJson);
			return layoutJson;
		}
		
			
		return {
			createJson: nodesJson,
			html: getHtml,
			innerNode: toDom,
			styleattributes: styleAttributes,
			htmlJson : layoutJson
			// htmlNew: getHtmlNew
		};
	})();
	
	window.canvasOutput = canvasOutput;
	
})();;(function($){ // eslint-disable-line zstandard/no-global-function-call
    var displayconditionfield = function(field , def){
		var data = field.data('zcanvas'); // No I18N
		if(data && data.group){
			switch(data.group){
				case 'fields': return def;
				case 'link': return I18n.getMsg('crm.canvas.builder.changelink');
				case 'action': return I18n.getMsg('crm.canvas.builder.changeaction');
				case 'button': return I18n.getMsg('crm.canvas.builder.changebutton');
				case 'actions': return I18n.getMsg('crm.canvas.builder.changeaction');
				default: return def;
			}
		}
		return def;
    }
    var keymovementhandler = function(keyevent){
        var $target = $(keyevent.target);
        switch(keyevent.keyCode){
            case 38:
                $target.prevAll('.zcanvas-field-context:visible').first().focus(); // NO I18N
                break;
            case 40:
                $target.nextAll('.zcanvas-field-context:visible').first().focus(); // NO I18N
                break;
            case 13:
                $target.click();
                break;
        }
        keyevent.preventDefault();
        keyevent.stopImmediatePropagation();
        keyevent.stopPropagation();
    }
    var displayconditionrl = function(field , def){
		field = field.closest('.zcanvas-static-editor'); // NO I18N
		var data = field.data('zcanvas'); // No I18N
		if(data && data.zctype && data.zctype === 'subform'){ 
			return  I18n.getMsg('crm.canvas.builder.changesubform'); // NO I18N
		}
		return def;
    }
    zutils.changelistutil = function(originalEvent , _data , contextcontainer , _element , _callback){
        var contextContainer = $( contextcontainer || '.zcanvas-context-container');
        var target = $(originalEvent.target).closest('.zcanvas-static-editor'); // NO I18N
        var data = target.data('zcanvas'); // NO I18N
        if(!data){
            data = _data;
        }
        var menufield = '#zcanvas-' + data.group; // NO I18N
        var fieldcontainer = $(data.fieldContainer);
        var datamap = fieldcontainer.data('zcdatamap'); // NO I18N
        var menucontainer = $('<div/>' , {class: 'zcanvas-context-container zcanvas-field-context-container'})
        // eslint-disable-next-line webperf/directly-select-with-id
        var fields = fieldcontainer.find(menufield).find('.zcanvas-field').clone().css('display','block'); // NO I18N
        var fieldlen = fields.length;
        var parentdata = zutils.getParentData(target);
        var types = [];
        if(parentdata && parentdata.config){
            types = parentdata.config.listtypes || [];
        }
        for(var i = 0 ; i < fieldlen ; i++){
            var skey = fields.get(i).dataset.uniquekey;
            if(types.length && skey  && datamap[skey] && !(types.indexOf(datamap[skey].zctype) > -1)){
                continue;
            }
            menucontainer.append(fields.get(i));
        }
        
        var rlclickhandler = function(e){ 
            //changeField(e,originalEvent,datamap);
            var id = $(e.target).attr('data-uniquekey');
            var data = datamap[id];
            var $el = $(originalEvent.target).closest('.zcanvas-static-editor'); // NO I18N
            var parentref = $el.parent('.zcanvas-editor').data('zcanvas'); // NO I18N
            var $parent = parentref ? parentref : $el.parent('.zcanvas-editor-outer').data('zcanvas'); // NO I18N
            var menuref = fieldcontainer.data('zcanvasMenu'); // NO I18N
            menuref && menuref.config && menuref.config.zmenustart(data);
            if($parent &&  $parent.changelist){
            	if(!_callback){
            		$parent.changelist($el, data);
            	}else{
            		_callback($el , data , $parent);
            	}
                
            }
        }
        menucontainer.children().not('.zc-strict-hide').not('.zcanvas-menuhidden').not('.zcmenu-disable-item').attr('class','').attr('tabindex','-1').addClass('zcanvas-field-context').click(rlclickhandler).keydown(keymovementhandler); // NO I18N
        var availfields = menucontainer.find('.zcanvas-field-context'); // NO I18N
        if(!availfields.length){
            menucontainer.append('<div class="zcnomatchel zcanvas-block">' + I18n.getMsg('crm.label.no.results.match') + '</div>'); // NO I18N
        }
        menucontainer.insertAfter(contextContainer);
       // menucontainer.show();
        var pos = getMenuPosition($(event.target),menucontainer , null , _callback ? true : false);
        // eslint-disable-next-line webperf/layout-thrashing , jQuery-chaining
        menucontainer.css({  left: pos.left,top: pos.top ,display: 'block' }); // NO I18N
        availfields.first().focus();
    }
    var menuItems = { 
                      insert: {event: 'insert', label: 'Insert', sortOrder:0, class: " zcanvas-context-arrow"}, // NO I18N
                      changefield: { displaycondition:displayconditionfield , event: 'changefield', label: 'crm.canvas.builder.changefield', sortOrder:0, class: "zcanvas-context-arrow" }, // NO I18N
                      script: {contextgroup: {
                        addscript:  {event: 'addscript' , label: 'crm.canvas.cscript.addcscript', sortOrder: 1 , rendercallback: true , class: " zcanvas-context-arrow addclientscript"}, // NO I18N
                        addelementname:  {event: 'addelementname' , label: 'crm.canvas.cscript.addelementname', sortOrder: 2, rendercallback: true}, // NO I18N
                        managescript: {event: 'managescripts' , label: 'crm.canvas.cscript.managecscript' , sortOrder: 3, rendercallback: true} // NO I18N
                      },sortOrder: 500},
                      changerl: { displaycondition:displayconditionrl ,event: 'changerl', label: 'crm.canvas.builder.changerelatedlist', sortOrder:0, class: "zcanvas-context-arrow" }, // NO I18N
                      gallery: { event: 'gallery' , label: 'crm.label.widgets.gallery' , sortOrder: 1, class: "zcanvas-context-arrow" }, // NO I18N
                      clone: {event : 'clone' , label: 'crm.button.clone' , sortOrder: 2 }, // NO I18N
                      showLabel: { event: 'showLabel', label: 'crm.canvas.editor.show.label', sortOrder: 20 }, // NO I18N
                      hideLabel: { event: 'hideLabel', label: 'crm.canvas.editor.hide.label',sortOrder: 30 }, // NO I18N
                      labelLeft: { event: 'labelLeft',label: 'crm.canvas.editor.label.left', sortOrder: 40 }, // NO I18N
                      labeltop:  { event: 'labelTop', label: 'crm.canvas.editor.label.top', sortOrder: 50 }, // NO I18N
                      labelTable: { event: 'labelTable', label: 'Table Align', sortOrder: 55 }, // NO I18N
                      converttable:  { event: 'convertTable', label: 'Table Align', sortOrder: 60 }, // NO I18N
                      convertTable2: { event: 'convertTable2', label: 'crm.canvas.builder.converttotable', sortOrder: 60 }, // NO I18N
                      showIcon:  { event: 'showIcon', label: 'crm.canvas.editor.show.icon', sortOrder: 70 }, // NO I18N
                      changeIcon: { event: 'changeIcon', label: 'crm.canvas.editor.change.icon', sortOrder: 80 }, // NO I18N
                      changeIcon2: {event: 'changeIcon2', label: 'crm.canvas.editor.change.icon', sortOrder: 80}, // NO I18N
                      merge: { event: 'merge', label: 'crm.auditlog.group', sortOrder: 90}, // NO I18N
                      removefromGroup: { event: 'unmerge', label: 'crm.canvas.editor.remove.form.group', sortOrder: 90}, // NO I18N
                      separator: {event: 'seperator',label: 'Seperator', sortOrder: 100, class: "zcanvas-context-arrow"}, // NO I18N
                      radius: {event: 'radius', label: 'crm.canvas.editor.radius', sortOrder: 110}, // NO I18N
                      conditionalstyle:{event: 'conditionalstyle' , label: 'crm.canvas.rules.conditionalstyle', sortOrder: 300}, // NO I18N
                      fixed:{event: 'fixed' , label: 'crm.canvas.builder.fixedcomponent', sortOrder: 120}, // NO I18N
                      fluid:{event: 'fluid' , label: 'crm.canvas.builder.fluidcomponent', sortOrder: 130},//NO I18N
                      copystyle: {event: 'copystyle', label: 'crm.canvas.editor.copystyle', sortOrder: 200}, // NO I18N
                      pastestyle: {event: 'pastestyle', label:  'crm.canvas.editor.pastestyle', sortOrder: 210 , condition: 'haspaste' } , // NO I18N
                      copystyletable: {event: 'copystyletable', label: 'crm.canvas.editor.copystyle', sortOrder: 200}, // NO I18N
                      pastestyletable: {event: 'pastestyletable', label:  'crm.canvas.editor.pastestyle', sortOrder: 210 , condition: 'haspastetable' } , // NO I18N
                      changetocard: {event: 'changetocard', label: 'crm.canvas.builder.changetocard', sortOrder: 250} , // NO I18N
                      changetolist: {event: 'changetolist', label: 'crm.canvas.builder.changetolist', sortOrder: 250} , // NO I18N
                      copyrelatedstyle: {event: 'copyrelatedstyle', label: 'crm.canvas.builder.copyrelatedlist', sortOrder: 300}, // NO I18N
                      pasterelatedstyle: {event: 'pasterelatedstyle', label: 'crm.canvas.builder.pasterelatedlist', sortOrder: 310 , condition: 'haspasterl'}, // NO I18N
                      lock: {event: 'lock', label: 'crm.data.subject.request.lock', sortOrder: 320}, // NO I18N
                      unlock: {event: 'unlock', label: 'crm.data.subject.request.unlock', sortOrder: 320}, // NO I18N
                      delete: { event: 'delete', label: 'crm.button.delete', sortOrder:1000}, // NO I18N
                      savepreset: { event: 'savepreset' , label: 'Add to Style Presets' , sortOrder: 400 } , // NO I18N
                      savecomponent: { event: 'savecomponent' , label: 'Add to reusable Components' , sortOrder: 401 } , // NO I18N
                      deletegroup: { event: 'deletegroup', label: 'crm.button.delete', sortOrder:1000} // NO I18N
                    }
    // TODO: this lines should be moved to corresponding layouts

    menuItems.showIconTab = { event: 'showIconTab', label: 'crm.canvas.editor.show.icon', sortOrder: 70 , class: "zcanvas-context-arrow"}; // NO I18N
    menuItems.hideIconTab = { event: 'hideIconTab', label: 'crm.canvas.editor.hide.icon', sortOrder: 70 }; // NO I18N
    menuItems.changeIconTab = { event: 'changeIconTab', label: 'crm.canvas.editor.change.icon', sortOrder: 71 , class: "zcanvas-context-arrow"}; // NO I18N
    menuItems.showText = { event: 'showText', label: 'crm.canvas.builder.showtext', sortOrder: 72 }; // NO I18N
    menuItems.hideText = { event: 'hideText', label: 'crm.canvas.builder.hidetext', sortOrder: 72 }; // NO I18N
    menuItems.flexrow = {event: 'flexDirectionRow', label: 'direction row'};//NO I18N
    menuItems.flexcolumn = {event: 'flexDirectionColumn', label: 'direction column'}//NO I18N
    menuItems.flexalignment = {event: 'alignments', label: 'GridList align', class: 'zcanvas-alignment-dropdown'}//NO I18N


    menuItems.showIconButton = { event: 'showIconButton', label: 'crm.canvas.editor.show.icon', sortOrder: 70 , class: "zcanvas-context-arrow"}; // NO I18N
    menuItems.hideIconButton = { event: 'hideIconButton', label: 'crm.canvas.editor.hide.icon', sortOrder: 70 }; // NO I18N
    menuItems.changeIconButton = { event: 'changeIconButton', label: 'crm.canvas.editor.change.icon', sortOrder: 71 , class: "zcanvas-context-arrow"}; // NO I18N
    menuItems.showTextButton = { event: 'showTextButton', label: 'crm.canvas.editor.show.label', sortOrder: 72 }; // NO I18N
    menuItems.hideTextButton = { event: 'hideTextButton', label: 'crm.canvas.editor.hide.label', sortOrder: 72 }; // NO I18N

   
    // End of Additions
    var element;
    var getItems = function(el){
    	var ispresetenabled = false;
        var isLockenabled = true;
    	if(!el.is(':visible') || el.closest('.zcicondropdpwn').length || el.is('.zcanvas-editor-resize')){
    		return [];
    	}

        // Result array
        var result = [];
        // flags //el.parents('.zcanvas-static-editor').length ? true : 
        var isRelatedList = el.is('.zcanvas-static-editor') ? true : false;  // NO I18N
        var $closesteditor = el.closest('.zcanvas-static-editor'); // NO I18N
        if($closesteditor.hasClass('zcnoaction')){
        	return [menuItems.delete];
        }
        if(el.closest('.zc-no-contextmenu').length){
        	return [menuItems.copystyletable , menuItems.pastestyletable];
        }

        var isIgnoredelement = el.closest('.zcanvas-ignore'); // NO I18N 
        if(isIgnoredelement.length){
            return [ $closesteditor.length ? menuItems.changerl : menuItems.changefield , menuItems.delete ];
        }
        
        var isUnderRelatedList = $closesteditor.length; // NO I18N
        var isRestrictedRL = isUnderRelatedList && $closesteditor.is('.zc-non-insertable'); // NO i18N
        var buttonel = el.closest('.zccbutton'); // NO I18N
        var isButton = buttonel.length; // NO I18N
        var islink = el.closest('.zcclink').length; // NO I18N
        var isMergedElement = !isRelatedList && el.parents('.zcmergelayout').length ? true : false; // NO I18N
      //  var isMergeComponent = el.closest('.zcmergelayout');
        var isMergeField = !isRelatedList && el.is('.zcanvas-merged-node'); // NO I18N
        var isRowSeperator = !isRelatedList &&  el.is('.zcanvas-row-separator'); // NO I18N
        var isCanvasField = !isRelatedList &&  el.is('.zcanvas-field'); // NO I18N
        var closestElement = !isRelatedList && el.closest('.zcanvas-data-node'); // NO I18N
        var isInnerElement = !isRelatedList &&  el.is('.zcanvas-inner-component'); // NO I18N
        var isImage = !isRelatedList &&  closestElement.children('img').length ? true : false; // NO I18N
        var iconel = el.closest('.zcstaticicon'); // NO I18N
        var isIcon = !isRelatedList && iconel.length ? true : false; // NO I18N
       // var isGalleryAvailable = zcanvasgallery.isAvailable(el);
        var isTable = !isRelatedList & el.is('.zctable-sortable'); // NO I18N
        var isUnderTable = !isRelatedList && el.closest('.zclayout-table'); // NO I18N
        var isTab = el.hasClass('zc-tab-content') || el.hasClass('zc-tablist-container');//NO I18N
        var isEditor = !isTab && !isRelatedList && el.is('.zcanvas-editor'); // NO I18N
        var isRLsection = isEditor && el.is('.zcanvas-non-delete') ||  isEditor && el.is('.zcanvas-title-editor'); // NO I18N
        var isRLContainer = el.is('.zcanvas-relatedlist-container'); // NO I18N
        var issubselectable = isRLContainer && el.is('.zc-rl-sub-selectable'); // NO I18N
        var isParent = el.is('.zcanvas-editor-outer'); // NO I18N
        var statictext = el.closest('.zcstatictext'); // NO I18N
        var isStaticText = statictext.length;//NO I18N
        var isTitleElement = isStaticText && statictext.hasClass('zc_disabled'); // NO I18N
        var isLine = el.closest('.zcdivider').length;//NO I18N
        var tabel = el.closest('.tab'); // NO I18N
        var isTabitem = tabel.length; // NO I18N
        var isGridList = el.hasClass('zcanvas-gridlist');//NO I18N
        var ismerged = el.closest('.zcmergelayout').length; // NO I18N
        var isseparator = el.is('.zcanvas-seperator'); // NO I18N
        var isscriptable = ( isStaticText && !isTitleElement ) || isIcon || ( isButton && buttonel.hasClass('zclayout') ) ; // NO I18N
        
        var isCustomizableRL = isUnderRelatedList && !$closesteditor.has('.zc-noneditable-rl').length; // NO I18N
        var isRLCard = isCustomizableRL && $closesteditor.has('.zc-rl-cards').length; // NO I18N
        var isMultiselectedField = el.is('.zcanvas-selectbox'); // NO I18N
        var isNonRestrictedTab = isTab && !el.hasClass('zcanvas-restricted-drop'); // NO I18N
        var isTableCell = el.hasClass('zc-table-cell'); // NO I18N

        var isRLAction = $closesteditor.length && isButton ? true : false;
        var isNoninsertable = el.closest('.zc-non-insertable').length; // NO I18N
        var isnoninsertsection = el.is('.zc-non-insertable'); // NO I18N

       
        var isLockeditor = (isEditor && !isRLsection) || $closesteditor.length || isTab || isTable;
        if(isLockenabled && isLockeditor){
            var lockel = el.closest('.ui-draggable'); // NO I18N
            var islockavail = lockel.is('.zcanvas-editor') || lockel.is('.zctablayout') || lockel.is('.zcanvas-static-editor'); // NO I18N
            if(islockavail){
                if(lockel.length && lockel.hasClass('zcanvas-locked-element')){
                    result.push(menuItems.unlock);
                }else{
                    result.push(menuItems.lock);
                }
            }
        }

        if(isLockeditor && ispresetenabled){
            result.push(menuItems.savecomponent);
        }
        
        
        // Label
        if(isRowSeperator || isCanvasField && !isButton){
            var labelNodesCount = el.find('.zcanvas-label').length;
            var dataNodeCount = el.find('.zcanvas-data-node').length;
            var iconNodesCount = el.find('.zcanvas-icon').length;
            if(el.attr("fixed") === "true"){ 
            	!isImage && result.push(menuItems.fluid);
            } else {
            	!isImage && result.push(menuItems.fixed);
            }
            if(iconNodesCount && iconNodesCount === labelNodesCount){
                // Icon
                if(!isUnderTable.length && !islink){
                    result.push(menuItems.showLabel);
                }
            }else{
                // Label
                // eslint-disable-next-line no-lonely-if
                if(!labelNodesCount){
                    if(!isUnderTable.length && !islink){
                        result.push(menuItems.showLabel);
                    }
                    result.push(menuItems.copystyle);
                    result.push(menuItems.pastestyle);
                }else if(labelNodesCount !== dataNodeCount){
                    if(!isUnderTable.length && !islink){
                        result.push(menuItems.showLabel);
                        result.push(menuItems.labeltop);
                        result.push(menuItems.labelLeft);
                    }
                  //  result.push(menuItems.labelTable);
                    result.push(menuItems.conditionalstyle);
                    result.push(menuItems.copystyle);
                    result.push(menuItems.pastestyle);
                }else if(labelNodesCount === dataNodeCount){
                    
                    if(!isUnderTable.length && !islink){
                        result.push(menuItems.hideLabel);
                        result.push(menuItems.labeltop);
                        result.push(menuItems.labelLeft);
                    }
                 //   result.push(menuItems.labelTable);
                    result.push(menuItems.conditionalstyle);
                    result.push(menuItems.copystyle);
                    result.push(menuItems.pastestyle);
                }
            }
        }else if(closestElement.length && !isButton){
            var dataElement = closestElement;
            var labelNodesCount = dataElement.find('.zcanvas-label').length;
            var iconNodesCount = dataElement.find('.zcanvas-icon').length;
            if(el.closest('.zcanvas-field').attr("fixed") === "true"){
            	!isImage && result.push(menuItems.fluid);
            } else {
            	!isImage && result.push(menuItems.fixed);
            }
            if(labelNodesCount && labelNodesCount === iconNodesCount){
                if(!isUnderTable.length && !islink){
                    result.push(menuItems.showLabel);
                }
                result.push(menuItems.conditionalstyle);
                result.push(menuItems.copystyle);
                result.push(menuItems.pastestyle);
            }else if (labelNodesCount && !iconNodesCount){
                if(!isUnderTable.length){
                    result.push(menuItems.hideLabel);
                    result.push(menuItems.labeltop);
                    result.push(menuItems.labelLeft);
                }
            //    result.push(menuItems.labelTable);
                result.push(menuItems.conditionalstyle);
                result.push(menuItems.copystyle);
                result.push(menuItems.pastestyle);
            }else if (!labelNodesCount){
                
                if(isImage){
                    result.push(menuItems.radius);
                }else{
                    if(!isUnderTable.length && !islink){
                     result.push(menuItems.showLabel);
                    }
                    result.push(menuItems.conditionalstyle);
                    result.push(menuItems.copystyle);
                    result.push(menuItems.pastestyle);
                }
               
            }

        }else if(isseparator){ // NO I18N
            result.push(menuItems.separator);
        }else if(isEditor){
            if(el.attr("fixed") === "true" && !isRLsection){
                result.push(menuItems.fluid);
            } else if(!isRLsection){
                result.push(menuItems.fixed);
            }
            result.push(menuItems.conditionalstyle);
            result.push(menuItems.copystyle);
            result.push(menuItems.pastestyle);
        }else if(isTable){
                !isNoninsertable && result.push(menuItems.insert);
            if(el.closest('.zcanvas-editor').attr("fixed") === "true"){
                result.push(menuItems.fluid);
            } else {
                result.push(menuItems.fixed);
            }
        } else if(isTab){
            if(el.closest('.zctablayout').attr("fixed") === "true"){
                result.push(menuItems.fluid);
            } else {
                result.push(menuItems.fixed);
            }
        } else if(isLine){
            result.push(menuItems.clone);
            if(el.parent().attr("fixed") === "true"){
                result.push(menuItems.fluid);
            } else {
                result.push(menuItems.fixed);
            } 
        } else if(isStaticText){
            !isTitleElement && !isUnderRelatedList && result.push(menuItems.clone);
            if(!el.hasClass('zcstaticicon')){//NO I18N
                var attrVal = iconel.attr("fixed");//NO I18N
            } else {
                var attrVal = el.attr("fixed");//NO I18N
            }
            if(attrVal === "true"){
                result.push(menuItems.fluid);
            } else {
                result.push(menuItems.fixed);
            } 
        }

        // If it is inside merged container
        if(isMergedElement && !el.is('.zcanvas-seperator')){
            result.push(menuItems.removefromGroup);
        }

        if(isMergeField){
            result.push(menuItems.converttable);
        }

        // eslint-disable-next-line no-extra-parens
        if(isInnerElement || (isCanvasField && !isMergeField) || (closestElement.length && !isImage && !isMergeField)){
          !isscriptable && !isNoninsertable && !isRLAction && result.push(menuItems.changefield);
        }

        if(isRelatedList){
            if(el.attr("fixed") === "true"){
               result.push(menuItems.fluid);
            } else {
            	result.push(menuItems.fixed);
            }
            !isRestrictedRL && result.push(menuItems.conditionalstyle);
            !isRestrictedRL && result.push(menuItems.copyrelatedstyle);
            !isRestrictedRL && result.push(menuItems.pasterelatedstyle);
            !isRestrictedRL && result.push(menuItems.changerl);
        }

        if(isUnderRelatedList){
            if(isCustomizableRL && !isRestrictedRL){
                if(!isRLCard){
                    result.push(menuItems.changetocard);
                }else{
                    result.push(menuItems.changetolist);
                }
                
            }
            if(isRLContainer){
            	if($closesteditor.attr("fixed") === "true"){
                    result.push(menuItems.fluid);
                 } else {
                 	result.push(menuItems.fixed);
                 }
            }
            !isRestrictedRL && result.push(menuItems.changerl);
            !isRestrictedRL && result.push(menuItems.copyrelatedstyle);
            !isRestrictedRL && result.push(menuItems.pasterelatedstyle);
        }
        if(isIcon){
        	!isUnderRelatedList && result.push(menuItems.clone);
            result.push(menuItems.changeIcon2);
        }

   // if(isGalleryAvailable){
         //   result.push(menuItems.gallery);
     //   }
         
        if(isGridList && !el.hasClass("zcanvas-flex-column")){
            result.push(menuItems.flexcolumn);
        } else if(isGridList && el.hasClass("zcanvas-flex-column")){
            result.push(menuItems.flexrow);
        }
        
        if(isGridList){
            result.push(menuItems.flexalignment);  
            if(el.parent().attr("fixed") === "true"){
                result.push(menuItems.fluid);
            } else {
                result.push(menuItems.fixed);
            }   
        }


        if(isButton){
            var $button =  buttonel;  // NO I18N
            var hasIcon = $button.hasClass('zccbuttonicon');  // NO I18N
            var hasText = !$button.hasClass('zccbuttonnotext'); // NO I18N
            var isonlyicon = $button.hasClass('zc-only-icon'); // NO I18N
            var isnochange = $button.hasClass('zc-restricted-icon'); // NO I18N
            if(!hasIcon && hasText && !isnochange){
            	if(isonlyicon){
            		result.push(menuItems.changeIconButton);
            	}else{
            		result.push(menuItems.showIconButton);
            	}
            }else if(hasIcon && hasText && !isnochange){
                result.push(menuItems.changeIconButton);
                if(!isonlyicon){
                    result.push(menuItems.hideIconButton);
                    result.push(menuItems.hideTextButton);
                    result.push(menuItems.labelLeft);
                    result.push(menuItems.labeltop);
                }
                
            }else if(!hasText && hasIcon && !isnochange){
                if(!isonlyicon){
                    result.push(menuItems.showTextButton);
                }
                result.push(menuItems.changeIconButton);
            }
            result.push(menuItems.conditionalstyle);
            result.push(menuItems.copystyle);
            result.push(menuItems.pastestyle);
        }

        if(isTabitem){
            el = tabel; // NO I18N
            var hasText = el.find('.tabname:visible').length; // NO I18N
            var hasIcon = el.find('.zctabicons').length; // NO I18N

            if(!hasIcon && hasText){
                result.push(menuItems.showIconTab);
            }else if(hasIcon && hasText){
                result.push(menuItems.changeIconTab);
                result.push(menuItems.hideIconTab);
                result.push(menuItems.hideText);
            }else if(!hasText && hasIcon){
                result.push(menuItems.showText);
                result.push(menuItems.changeIconTab);
            }
        }

        if(isMultiselectedField){
            var selectedel = $('.zcanvas-selected-element.zcanvas-field, .zcanvas-multiselect.zcanvas-field'); // NO I18N
            var btnicon = $('.zcanvas-selected-element.zcanvas-field.zccbutton, .zcanvas-selected-element.zcanvas-field.zcclink , .zcanvas-selected-element.zcanvas-field.zcbdrbox , .zcanvas-multiselect.zcanvas-field.zccbutton, .zcanvas-multiselect.zcanvas-field.zcclink , .zcanvas-multiselect.zcanvas-field.zcbdrbox').length; // NO I18N
            var labelNodesCount = selectedel.find('.zcanvas-label').length;
            var dataNodeCount = selectedel.find('.zcanvas-data-node').length;
            if(labelNodesCount !== dataNodeCount && !btnicon){
                result.push(menuItems.showLabel);
            }else if(!btnicon){
                result.push(menuItems.hideLabel);
            }
            !btnicon && result.push(menuItems.hideLabel);
            !btnicon && result.push(menuItems.labelLeft);
            !btnicon && result.push(menuItems.labeltop);
         //   result.push(menuItems.labelTable);
            if(isUnderRelatedList){
            	var $edit = el.closest('.zcanvas-non-delete'); // NO I18N
            	var $tabl = $edit.find('.zclayout-table').length; // NO I18N
            	if(!($tabl >= 5)){
            		!btnicon && result.push(menuItems.convertTable2);
            	}
            }else{
            	!btnicon && result.push(menuItems.convertTable2);
            }

            if(zclayout.prototype.layouts.MERGEFIELD){
                selectedel = selectedel.add( $('.zcanvas-selected-element.zcstatictext, .zcanvas-multiselect.zcstaticicon,.zcanvas-selected-element.zcstaticicon, .zcanvas-multiselect.zcstatictext , .zcanvas-multiselect.zcmergelayout,.zcanvas-selected-element.zcmergelayout') ); // NO I18N
                if(selectedel.length > 1){
                	var mergeflag = zclayout.prototype.layouts.MERGEFIELD.canmerged( selectedel );
                    if(mergeflag){
                        result.push(menuItems.merge);
                    }
                }
                
            }

            
        }

        if(!isParent && !isTableCell && !isTabitem && !el.is('.zcanvas-non-delete') && !el.is('.zcanvas-title-editor') && !isseparator){
            !isNoninsertable && !isnoninsertsection  && result.push(menuItems.delete);
        }

        if(isParent || isEditor || isTab && isNonRestrictedTab || isTableCell){
            !isNoninsertable  && result.push(menuItems.insert);
            !isNoninsertable  && result.push(menuItems.conditionalstyle);
        }

        if(ismerged && !isseparator && !el.is('.zcmergelayout')){
            result.push(menuItems.removefromGroup);
        }

        if(ispresetenabled){
            result.push(menuItems.savepreset);
        }

        if((isRLContainer && !issubselectable) || isInnerElement || closestElement.length || isParent || isCanvasField || isButton || isIcon || isStaticText || isRelatedList || isTab || isTabitem || isEditor || isTable || isLine){
            result.push(menuItems.script);
        }
        

        return result;

    }


    var getMenu = function(el,e,parentEl,options){
        var items = canvasObjUtils._.sortBy(getItems(el),'sortOrder'); // NO I18N
        // Skip menu item of context menu based on given configuration value(commonSkipContextMenuItems) - Start
        var skipCollection = options.config.commonSkipContextMenuItems;
        if (skipCollection && skipCollection.length) {
            var tempItems = items.slice();
            items = tempItems.filter(function(item) {
                return (skipCollection.indexOf(item.event) === -1);
            }); // NO I18N
        }
        // Skip menu item of context menu based on given configuration value(commonSkipContextMenuItems) - End
        items = canvasObjUtils._.uniq(items, 'event'); // NO I18N
        var itemsCount = items.length;
        if(!items.length){
        	return;
        }
        element = $(el);

        var ww = zutils.externalwindowWidth();
        var wh = zutils.externalwindowHeight();


        var $closestfield = element.closest('.zcanvas-field'); // NO I18N

        var container;
        var staticeditor = element.parents('.zcanvas-static-editor'); // NO I18N
        if(element.is('.zcanvas-editor')){
            container = element;
        }else if(staticeditor.length || element.is('.zcanvas-static-editor') ){ // NO I18N
            container = element.closest('.zcanvas-static-editor'); // NO I18N
        }else{
            container =  $closestfield;
        }


        var selectedcontainer = $closestfield;

        if(!selectedcontainer.length){
            selectedcontainer = container;
        }

        
        var containerPos = container.offset();
        var containerHeight = container.height();
        var contextContainer = $("<div/>", { class: 'zcanvas-context-container'});
        var template = '<ul class="zcanvas-contextmenu">';

        var toolinst = $('.zcanvas-editor-outer').data('zcanvas').config.toolsRef; // NO I18N

        for(var i = 0 ; i < itemsCount ; i++){
            if(items[i].contextgroup){
                var groupdata = items[i].contextgroup;
                var flatgroup = Object.keys(groupdata);
                var grouplen = flatgroup.length;
                var filteredgroup = [];
                for(var j = 0 ; j < grouplen ; j++){
                    var currentitem = groupdata[flatgroup[j]];
                    if(currentitem.rendercallback){
                        var newitem = toolinst && toolinst.config && toolinst.config.contextrendercallback && toolinst.config.contextrendercallback(currentitem , element);
                        if(newitem){
                            filteredgroup.push(newitem);
                        }
                    }
                }
                var filtergrouplen = filteredgroup.length;

                for(var j = 0 ; j < filtergrouplen ; j++){
                    var isstart = j === 0;
                    var isend = j === filtergrouplen - 1;
                    var currentitem = filteredgroup[j];
                    if(currentitem){
                        template += '<li data-zcqa="canvas-detail-contextmenu-' + currentitem.event + '" data-zcontextmenu ="' + currentitem.event + '" ' +  // NO I18N
                        'class="' + (isstart ? 'zcanvas-contextgroup-start' : '') + (isend ? 'zcanvas-contextgroup-end' : '') + (currentitem.class ? currentitem.class : '' ) +  (currentitem.condition && !toolinst[currentitem.condition](selectedcontainer) ? ' zc-disabled-menu' : '')  + '">' + // NO I18N
                        (currentitem.displaycondition ? currentitem.displaycondition(selectedcontainer , I18n.getMsg(currentitem.label)) :  I18n.getMsg(currentitem.label)) +
                        '</li>'; // NO I18N
                    }
                }
            }else{
                template += '<li data-zcqa="canvas-detail-contextmenu-' + items[i].event + '" data-zcontextmenu ="' + items[i].event + '" ' +  // NO I18N
                'class="' + (items[i].class ? items[i].class : '' ) +  (items[i].condition && !toolinst[items[i].condition](selectedcontainer) ? ' zc-disabled-menu' : '')  + '">' + // NO I18N
                (items[i].displaycondition ? items[i].displaycondition(selectedcontainer , I18n.getMsg(items[i].label)) :  I18n.getMsg(items[i].label)) +
                '</li>'; // NO I18N
            }
            
        }
        template += '</ul>';
        contextContainer.html(template);
        var contextclickhandler = function(evt){
            triggerAction($(evt.target).attr('data-zcontextmenu'),evt,e,options,container); // NO I18N
        }
        contextContainer.find('li').click(contextclickhandler);
        parentEl.append(contextContainer);
        var yPos = e.pageY;

        if(containerPos && container.is('.zcanvas-field')){
            yPos = containerPos.top + containerHeight;
        }
     
        // eslint-disable-next-line webperf/layout-thrashing
        var cwidth = contextContainer.outerWidth();
        // eslint-disable-next-line webperf/layout-thrashing
        var cheight = contextContainer.outerHeight();
        var res = {
            left: e.pageX, top: yPos
        }
        if(res.left + cwidth > ww){
            res.left = res.left - cwidth;
        }
        if(res.top + cheight > wh){
            res.top = res.top - cheight;
        }
        contextContainer.css(res);
       
        contextContainer.show();
        parentEl.parent().addClass(options.config.contextclass);
        if(!el.is('.zcanvas-selectbox') && !el.is('.zcanvas-non-selectable')){
            options.selection(e,true);
        }
    }

    var getMenuPosition = function(element, container , btm , dropdownflag){
        var offset = element.offset();
        var ww = zutils.externalwindowWidth();
        var wh = zutils.externalwindowHeight();
        var cwidth = container.outerWidth();
        var cheight = container.outerHeight();
        offset.left +=  dropdownflag ? 0 : element.outerWidth();
        offset.top += dropdownflag ? element.outerHeight() : 0;
        if(offset.left + cwidth > ww){
            offset.left = offset.left - element.outerWidth() - cwidth;
        }
        if(offset.top + cheight > wh){
        	if(!btm){
        		offset.top = offset.top - cheight;
        	}else{
        		offset._bottom = wh - offset.top;
        	}
            
        }
        return offset;
    }

    var changeField = function(event,originalEvent,map){
        var id = $(event.target).attr('data-uniquekey');
        var data = map[id];
        var target = $(originalEvent.target);
        var menuinst = $(data.fieldContainer).data('zcanvasMenu'); // NO I18N
        menuinst.reduceScope(data);
        var closest = target.closest('.zcanvas-data-node'); // NO I18N
        var element = closest.length ? closest : target.children('.zcanvas-data-node'); // NO I18N
        var closestfield = element.closest('.zcanvas-field'); // NO I18N
        var $parenteditor = element.closest('.zcanvas-editor:not(.zclayout)'); // NO I18N
        if(!$parenteditor.length){
            $parenteditor = element.closest('.zcanvas-editor-outer'); // NO I18N
        }
        var $parentdata = $parenteditor.data('zcanvas'); // NO I18N
        var olddataclone = element.zdata()[0]; // NO I18N
        menuinst.addElement(olddataclone);
        var xheight = olddataclone.zctype === 'text-area' ?  closestfield.outerHeight() : ''; // NO I18N
        var _label = element.find('.zcanvas-label'); 
        !_label.attr('zc-icon') &&  _label.html(data.zclabel); // NO I18N
        element.find('.zcanvas-value-container').html(data.zcvalue);
        if(element.is('.zcanvas-value-container')){
            element.html(data.zcvalue);
        }
        var zid = element.attr('data-zcanvasid'); // NO I18N
        var dataclone = JSON.parse(JSON.stringify(data));
        dataclone.zcanvasId = zid;
        element.zdata(dataclone);
        closestfield.data('zcanvas' , dataclone); // NO I18N
        var isResizeRequired = false;
        if(dataclone.zctype === 'text-area' || olddataclone.zctype === 'text-area'){
        	isResizeRequired = true;
        }
        if(isResizeRequired){
        	zutils.matchdefaultstyles(closestfield , $parentdata , dataclone , olddataclone , menuinst , xheight);
        }
        if(menuinst.config && menuinst.config.classbyid){
        	if(menuinst.config.classbyid[olddataclone[menuinst.config.uniqueId]]){
        		closestfield.removeClass(menuinst.config.classbyid[olddataclone[menuinst.config.uniqueId]])
        		closestfield.zremoveClass(menuinst.config.classbyid[olddataclone[menuinst.config.uniqueId]])
        	}
        	if(menuinst.config.classbyid[dataclone[menuinst.config.uniqueId]]){
        		closestfield.addClass(menuinst.config.classbyid[dataclone[menuinst.config.uniqueId]])
        		closestfield.zaddClass(menuinst.config.classbyid[dataclone[menuinst.config.uniqueId]])
        	}
        }
    	if(closestfield.find('.zcanvas-label.zcicon').length){
    		closestfield.addClass('zccbuttonicon').zaddClass('zccbuttonicon'); //NO I18N
        }
        var hasMaping = closestfield.hasClass('zcanvas-ignore'); // NO I18N
        closestfield.removeClass('zcanvas-ignore'); // NO I18N
        !hasMaping && $parentdata.savecanvasaction(element , 'changefield', null , null , null , null , {
            action: 'callback', // NO I18N
            previous: olddataclone,
            current: dataclone,
            node: element,
            isresize: isResizeRequired,
            xheight: xheight,
            callback: function(data , operation){
                var maindata = {};
                var olddata = {};
                var element = zutils.getElementBySelector(data.node);
                var $label = element.find('.zcanvas-label');
                var value = element.find('.zcanvas-value-container');
                var zinst = $(data.previous.fieldContainer).data('zcanvasMenu'); // NO I18N
                if(operation === 'undo'){
                    maindata = data.previous;
                    olddata = data.current;
                    zinst && zinst.reduceScope(data.previous);
                    zinst && zinst.addElement(data.current);
                }else{
                    maindata = data.current;
                    olddata = data.previous;
                    zinst && zinst.reduceScope(data.current);
                    zinst && zinst.addElement(data.previous);
                }
                !$label.attr('zc-icon') && $label.html(maindata.zclabel); // NO I18N
                value.html(maindata.zcvalue);
                if(element.is('.zcanvas-value-container')){
                    element.html(maindata.zcvalue);
                }
                element.zdata(maindata); 
                var closefield = element.closest('.zcanvas-field');// NO I18N
                closefield.data('zcanvas',maindata); // NO I18N
                if(data.isresize){
                	zutils.matchdefaultstyles(closefield , zutils.getParentData(closefield) , maindata , olddata , zinst);
                	if(operation === 'undo' && data.xheight){
                		closefield.height(data.xheight);
                	}
                }
                if(zinst && zinst.config && zinst.config.classbyid){
                	var olddataclone = data.previous;
                	var dataclone  = data.current;
                	closefield[operation === 'undo' ? 'addClass' : 'removeClass' ](zinst.config.classbyid[olddataclone[zinst.config.uniqueId]] || '') // NO I18N
                	closefield[operation === 'undo' ? 'zaddClass' : 'zremoveClass' ](zinst.config.classbyid[olddataclone[zinst.config.uniqueId]] || '') // NO I18N
                	closefield[operation === 'undo' ? 'removeClass' : 'addClass' ](zinst.config.classbyid[dataclone[zinst.config.uniqueId]] || '') // NO I18N
                	closefield[operation === 'undo' ? 'zremoveClass' : 'zaddClass' ](zinst.config.classbyid[dataclone[zinst.config.uniqueId]] || '') // NO I18N
                	if(closefield.find('.zcanvas-label.zcicon').length){
                		closefield.addClass('zccbuttonicon').zaddClass('zccbuttonicon'); //NO I18N
                	}
                }
            }
        })
    }

    var triggerAction = function(key,event,originalEvent,options,container){
        var closeflag = true;
        $('.zcanvas-field-context-container , .zcanvas-subcontext-container').zremove();
        $('.active-context').removeClass('active-context'); 
        var contextflags = { closeflag : true };
        switch (key) {
            case 'insert':
                    event.stopImmediatePropagation();
                    var $etarget = $(event.target);
                    var $li = $etarget.closest('li'); // NO I18N
                    $li.addClass('active-context'); 
                    closeflag = false;
                    options.selection(originalEvent);
                    var contextContainer = $('.zcanvas-context-container');
                    var target = $(originalEvent.target);
                    
                    var fieldcontainer = $(zcanvasrelatedList.currentmenu.opened || zcanvasrelatedList.currentmenu._default);
                    var datamap = fieldcontainer.data('zcdatamap'); // NO I18N
                    var elid = zutils.getRandomId();
                    var newcontextcontainer = $('<div/>' , {class: 'zcanvas-context-container zcanvas-subcontext-container' , style :'width:202px' });
                    var menucontainer = $('<div/>' , {class: 'zcanvas-field-context-container' , id: elid});
                    
                    var istitleditor = target.is('.zcanvas-title-editor'); // NO I18N
                    if(istitleditor){
                        var $seditor = target.closest('.zcanvas-static-editor'); // NO I18N
                        var $sdata = $seditor.data('zcanvas'); // NO I18N
                        if($sdata){
                            var title = $sdata.zclabel;
                            var $div = $('<div/>', { class: 'zcanvas-field-context' }); // NO I18N
                            $div.html(title);
                            menucontainer.append($div);
                            if($sdata.actions && $sdata.actions.length){
                            	var containername = I18n.getMsg('crm.setup.system.actions'); // NO I18n
                                var keyname = $('<div/>',{class:'zcanvas-context-header'}).append(containername); // NO I18N
                                menucontainer.append(keyname);
                                var fieldwrapper = $('<div/>', {class: 'zcanvas-field-insert-wrapper'}); // NO I18N
                                menucontainer.append(fieldwrapper);
                                var actionclickhandler = function(){
                                    var inst = this.container.data('zcanvas'); // NO I18N
                                    
                                    inst.insertaction({x: originalEvent.offsetX , y: originalEvent.offsetY , h: this.container.outerHeight()} , this.action, this.container, this.action.id.indexOf('moreRLAction') > -1);
                                }
                                var availactions = [];
                                $seditor.find('.zcanvas-title-editor').find('.zccbutton').each(function(){
                                	availactions.push($(this).data('zcanvas').id); // NO I18N
                                });
                                var actlen = $sdata.actions.length;
                                for(var i = 0 ; i < actlen ; i ++){
                                    var action = $sdata.actions[i];
                                    if(availactions.indexOf(action.id) > -1){
                                    	continue;
                                    }
                                    var acfield  = $('<div/>', {class: 'zcanvas-field-context' , 'data-uniquekey': action.id}); // NO I18N
                                    acfield.html(action.label);
                                    fieldwrapper.append(acfield);
                                    acfield.click(actionclickhandler.bind({container: target , action: action }));
                                }
                            }
                            var titleclickhandler = function(){
                                var inst = this.container.data('zcanvas'); // NO I18N
                                inst.inserttitle({x: originalEvent.offsetX , y: originalEvent.offsetY , h: this.container.outerHeight()} , this.title, this.container);
                            }
                            $div.click(titleclickhandler.bind({container: target , title: title }));
                        }
                        
                    }else{
                        // eslint-disable-next-line webperf/no-multipleDOMLookup , webperf/directly-select-with-id
                            var searchtemplate = $('<div class="canvas_field_search searchel">' +
                                '<input id="insertsearchinput" placeholder="' + I18n.getMsg('crm.label.search') + '" type="text" oninput="zutils.search(this,\'#' + elid + '\',\'.zcanvas-field-context\', {fieldwrapper: \'.zcanvas-field-insert-wrapper\' , menuheading: \'.zcanvas-context-header\' , submenucontainer: \'.zcanvas-field-insert-wrapper\'},\'.zcanvas-field-context , .zcanvas-context-header , .zcanvas-field-insert-wrapper\',\'#insertsidebarnomatch\')" autocomplete="off">' +
                                '<span class="dIB pR canvas_search_icon">' +
                                    '<span class="zc_searchIcon pA"></span> ' +
                                    '<span class="zc-closesearch-icon zc-search-hide" onclick="zutils.menuSearchClear(null,\'#insertsearchinput\',\'.zcanvas-field-context\',\'#' + elid + '\', {fieldwrapper: \'.zcanvas-field-insert-wrapper\' , menuheading: \'.zcanvas-context-header\' , submenucontainer: \'.zcanvas-field-insert-wrapper\'},\'.zcanvas-field-context , .zcanvas-context-header , .zcanvas-field-insert-wrapper\',\'#insertsidebarnomatch\');event.stopPropagation()"></span>' +
                                '</span> ' +
                            '</div><div class="zcnomatchel" id="insertsidebarnomatch" data-search-source="#insertsearchinput" style="">' + I18n.getMsg('crm.label.no.results.match') + '</div>');
                            newcontextcontainer.append(searchtemplate);
                          //  newcontextcontainer.append(menucontainer);
                            searchtemplate.keydown(function(e){
                                if(e.keyCode === 40){
                                    var $target = $(e.target);
                                    var $parent = $target.closest('.zcanvas-context-container'); // NO I18N
                                    $parent.find('.zcanvas-field-context-container').first().find('.zcanvas-field-insert-wrapper:visible').first().find('.zcanvas-field-context:visible').first().focus();
                                }
                            })
                            var fields = fieldcontainer.find('.zcanvas-field-wrapper').clone();
                            var fieldlen = fields.length;
                            for(var i = 0 ; i < fieldlen ; i++){
                                var wrapper = fields.eq(i).find('.zcanvas-field:not(.zcmenu-disable-item)');
                                var wrapperlen = wrapper.length;
                                var isTab = target.is('.zctable-sortable') || target.is('.zc-table-cell'); // NO I18N
                                var isRL = target.hasClass('zcanvas-non-delete'); // NO I18N
                                var containername = fields.show().eq(i).attr('data-wrappername'); // NO I18N
                                if(isTab && containername.indexOf('field') <= -1){
                                    continue;
                                }
                                var keyname = $('<div/>',{class:'zcanvas-context-header'}).append(zutils.getExternali18n ? zutils.getExternali18n(containername) : containername); // NO I18N
                                menucontainer.append(keyname);
                                var fieldwrapper = $('<div/>', {class: 'zcanvas-field-insert-wrapper'}); // NO I18N
                                menucontainer.append(fieldwrapper);
                                for(var j = 0 ; j < wrapperlen; j++){
                                    var field = wrapper.show().eq(j);
                                    var unid = field.attr('data-uniquekey'); // NO I18N
                                    var fdata = datamap[unid];
                                    if(isTab &&  (fdata._type !== 'field' || fdata.zctype === "profileimage")){
                                        continue;
                                    }
                                    if(isRL && fdata._type === 'action'){ // NO I18N
                                        continue;
                                    }
                                    fieldwrapper.append(field);
                                }
                                if(fieldwrapper.is(':empty')){
                                    keyname.remove();
                                    fieldwrapper.remove();
                                    
                                }
                            }
                            var clickhandler = function(e){ 
                                var position = $('.zcanvas-contextmenu').parent().offset();
                                var fieldcontainer = $(zcanvasrelatedList.currentmenu.opened || zcanvasrelatedList.currentmenu._default);
                                var menudata = fieldcontainer.data('zcdatamap'); // NO I18N
                                var fielddata = menudata[e.target.dataset.uniquekey];
                               // var draggable = fieldcontainer.find('.zcanvas-field[data-uniquekey =' + e.target.dataset.uniquekey + ']');
                               var draggable = fieldcontainer.find('.zcanvas-field.zcdatauniquekey' + e.target.dataset.uniquekey);
                                var $target = $(originalEvent.target)
                                var helper = draggable.clone().show();
                                // eslint-disable-next-line zstandard/no-body-events
                                $('body').append(helper);
                                
                                var menuinst = fieldcontainer.data('zcanvasMenu'); // NO I18N
                                menuinst.dragstarthandler.bind(draggable)(originalEvent , {helper: helper});

                                var $event = originalEvent;
                                helper.css({'position': 'absolute', left: position.left , top: position.top}).removeClass('zcanvas-on-menu').addClass('zcanvas-on-editor'); // NO I18N
                                helper.data('zcanvas', fielddata); // NO I18N
                                var $ui = {
                                    draggable: draggable,
                                    helper: helper,
                                    position: {
                                        left: position.left, 
                                        top: position.top
                                    },
                                    offset: {
                                        left: position.left,
                                        top: position.top
                                    }
                                }

                                if($target.is('.zctable-sortable')){ // NO I18N
                                    var tablel = zclayout.prototype.layouts['Table Layout'];
                                    $ui.item = helper;
                                    helper.css({top:'',position:'',left:'',width:''});
                                    $target.append(helper);
                                    tablel.handledrop.bind($target.parent())($event, $ui);
                                }else if($target.is('.zc-table-cell')){ // NO I18N
                                	zclayout.prototype.layouts['Table Layout'].reducescope(draggable);
                                    $target.droppable('option').drop(originalEvent , {helper: draggable} , helper.clone()); // NO I18N
                                }else{
                                    var inst = zutils.getdatabyelement($target);
                                    var dropped = inst.drophandler($event , $ui);
                                    if(dropped && menuinst && menuinst.config && menuinst.config.zcdropscope){
                                        dropped.is('.ui-draggable') && dropped.draggable('option','scope',menuinst.config.zcdropscope); // NO I18N
                                    }
                                }
                                

                                helper.zremove();
                            }
                            menucontainer.find('.zcanvas-field').not('.zc-strict-hide').not('.zcanvas-menuhidden').not('.zcmenu-disable-item').attr('class','').attr('tabindex','-1').addClass('zcanvas-field-context').click(clickhandler).keydown(function(keyevent){ // NO I18N
                                var $target = $(keyevent.target);
                                var $targetparent =  $target.parent();
                                var child = $targetparent.find('.zcanvas-field-context:visible');
                                switch(keyevent.keyCode){
                                    case 38:
                                        if( child.first().is($target) ){
                                            $targetparent.prevAll('.zcanvas-field-insert-wrapper:visible').first().find('.zcanvas-field-context:visible').last().focus(); // NO I18N
                                        }else{
                                            $target.prevAll('.zcanvas-field-context:visible').first().focus(); // NO I18N
                                        }
                                        break;
                                    case 40:
                                        if( child.last().is($target) ){
                                            $targetparent.nextAll('.zcanvas-field-insert-wrapper:visible').first().find('.zcanvas-field-context:visible').first().focus(); // NO I18N
                                        }else{
                                            $target.nextAll('.zcanvas-field-context:visible').first().focus(); // NO I18N
                                        }
                                        break;
                                    case 13:
                                        $target.click();
                                        break;
                                }
                                keyevent.preventDefault();
                                keyevent.stopImmediatePropagation();
                                keyevent.stopPropagation();
                            });
                    }
                 
                    
                    
                    newcontextcontainer.insertAfter(contextContainer).append(menucontainer).show();
                    var pos = getMenuPosition($etarget,newcontextcontainer,true);
                    // eslint-disable-next-line webperf/layout-thrashing
                       var stobj = {  left: pos.left - 4,top: pos.top - 1,width: '202px' }; // NO I18N
                         if(pos._bottom){
                             delete stobj.top;
                             stobj.bottom = pos._bottom - 5;
                             newcontextcontainer.addClass('zcbottomcontextmenu'); // NO I18N
                         }
                         newcontextcontainer.css(stobj); // NO I18N
                      if(!istitleditor){
                        searchtemplate.find('input').focus();
                      }
                break;
            case 'showLabel':
                var el = $(originalEvent.target);
                if(!el.is('.zcanvas-selectbox')){ // NO I18N
                    el = el.closest('.zcanvas-field') // NO I18N
                    options.selection(originalEvent);
                }
                var parentdata = zutils.getParentData(el);
                parentdata.config.toolsRef.togglelabel();
                parentdata.config.toolsRef.selectfield(el);
                break;
            case 'hideLabel':
                var el = $(originalEvent.target);
                if(!el.is('.zcanvas-selectbox')){ // NO I18N
                    el = el.closest('.zcanvas-field') // NO I18N
                    options.selection(originalEvent);
                }
                var parentdata = zutils.getParentData(el);
                parentdata.config.toolsRef.togglelabel(true);
                parentdata.config.toolsRef.selectfield(el);
                break;
            case 'labelLeft':
                var el = $(originalEvent.target);
                if(!el.is('.zcanvas-selectbox')){ // NO I18N
                    el = el.closest('.zcanvas-field') // NO I18N
                    options.selection(originalEvent);
                }
                var parentdata = zutils.getParentData(el);
                parentdata.config.toolsRef.labellefttop();
                break;
            case 'labelTop':
                var el = $(originalEvent.target);
                if(!el.is('.zcanvas-selectbox')){ // NO I18N
                    el = el.closest('.zcanvas-field') // NO I18N
                    options.selection(originalEvent);
                }
                var parentdata = zutils.getParentData(el);
                parentdata.config.toolsRef.labellefttop(true);
                break;
            case 'labelTable':
                $(".zctablelabel").addClass('zccontext').click();
                break;
            case 'merge':
                var el = $(originalEvent.target);
                var parentdata = zutils.getParentData(el);
                if(parentdata && parentdata.config && parentdata.config.toolsRef){
                    zclayout.prototype.layouts.MERGEFIELD.merge(parentdata.config.toolsRef.selectedfields , el , parentdata);
                }
                break;
            case 'unmerge':
                var el = $(originalEvent.target);
                if(zclayout.prototype.layouts.MERGEFIELD){
                    zclayout.prototype.layouts.MERGEFIELD.unmerge(el);
                }
               // zcanvasmerge.unmerge(el);
                break;
            case 'delete':
                var $selfield = $(originalEvent.target);
                var parenteditor = zutils.getClosestEditor($selfield);
                $selfield.is('.zcanvas-editor:not(".zc-tab-content")') ? zutils.deleteEditor(originalEvent.target) : zutils.deleteElement(); // NO I18N
                var parentdata = zutils.getdatabyelement(parenteditor);
                parentdata && parentdata.config.toolsRef && parentdata.config.toolsRef.selectfield(parenteditor);
                break;
            case 'showIcon':
                event.stopImmediatePropagation();
                closeflag = false;
                options.selection(originalEvent);
                $('.zicondropdown').click();
                var pos = getMenuPosition($(event.target));
                $('.ziconselectorbox').css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: pos.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: pos.top
                })
                break;
            case 'changeIcon':
                event.stopImmediatePropagation();
                closeflag = false;
                options.selection(originalEvent);
                $('.zicondropdown').click();
                var pos = getMenuPosition($(event.target));
                $('.ziconselectorbox').css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: pos.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: pos.top
                })
                break;
            case 'changeIcon2':
                zclayout.prototype.layouts['Static Icon'].changeIcon($(originalEvent.target).closest('.zcstaticicon'));
                break;
            case 'radius':
                event.stopImmediatePropagation();
                closeflag = false;
              
                var contextContainer = $('.zcanvas-context-container');
                if(contextContainer.find('.zcanvas-radius-tool').length){
                    return false;
                }
                options.selection(originalEvent);
                var clone = $('#radiussliderp').clone().addClass('zcanvas-radius-tool');
                contextContainer.append(clone);  
                var clonedchild = clone;
                clonedchild.attr('id','ztempradiuscontroller'); // NO I18N
                var slider =  clonedchild.find('.zcanvastoolslider'); // NO I18N
                var position = getMenuPosition($(event.target),clone);
                var posObj = {
                    'position':'fixed', // NO I18N
                    'top': position.top, // NO I18N
                    'left': position.left, // NO I18N
                    'display':'block' // NO I18N
                }
                clone.css(posObj);
                clone.click(function(e){e.stopImmediatePropagation();});
                slider.on('input',function(e){ // NO I18N
                    $('#radiussliderp').find('.zcanvastoolslider').val(e.target.value).trigger('input'); // NO I18N
                 })
                 slider.on('change',function(e){ // NO I18N
                    $('#radiussliderp').find('.zcanvastoolslider').val(e.target.value).trigger('change'); // NO I18N
                 })
                break;
            case 'copystyle':
                $("#zccopy").click();
                break;
            case 'pastestyle':
                $("#zcpaste").click();
                break;
            case 'changefield':
                event.stopImmediatePropagation();
                var $etarget = $(event.target);
                var $li = $etarget.closest('li'); // NO I18N
                $li.addClass('active-context'); 
                closeflag = false;
                options.selection(originalEvent);
                var contextContainer = $('.zcanvas-context-container');
                var target = $(originalEvent.target);
                target = target.is('.zcanvas') ? target : target.closest('.zcanvas'); // NO I18N
                var data = target.zdata()[0];
                var menufield = '#zcanvas-' + data.group; // NO I18N
                var fieldcontainer = $(data.fieldContainer);
                var datamap = fieldcontainer.data('zcdatamap'); // NO I18N
                var elid = zutils.getRandomId();
                var newcontextcontainer = $('<div/>' , {class: 'zcanvas-context-container zcanvas-subcontext-container' });
                var menucontainer = $('<div/>' , {class: 'zcanvas-field-context-container' , id: elid});
                // eslint-disable-next-line webperf/no-multipleDOMLookup , webperf/directly-select-with-id
                var searchtemplate = $('<div class="canvas_field_search searchel">' +
                                        '<input id="changesearchinput" placeholder="' + I18n.getMsg('crm.label.search') + '" type="text" oninput="zutils.search(this,\'#' + elid + '\',\'.zcanvas-field-context\',null,null,\'#changesidebarnomatch\')" autocomplete="off">' +
                                        '<span class="dIB pR canvas_search_icon">' +
                                            '<span class="zc_searchIcon pA"></span> ' +
                                            '<span class="zc-closesearch-icon zc-search-hide" onclick="zutils.menuSearchClear(null,\'#changesearchinput\',\'.zcanvas-field-context\',\'#' + elid + '\',null,null,\'#changesidebarnomatch\');event.stopPropagation()"></span>' +
                                        '</span> ' +
                                    '</div><div class="zcnomatchel" id="changesidebarnomatch" data-search-source="#changesearchinput" style="">' + I18n.getMsg('crm.label.no.results.match') + '</div>');
                newcontextcontainer.append(searchtemplate).append(menucontainer);
                searchtemplate.keydown(function(e){
                    if(e.keyCode === 40){
                        var $target = $(e.target);
                        var $parent = $target.closest('.zcanvas-context-container'); // NO I18N
                        $parent.find('.zcanvas-field-context-container').first().find('.zcanvas-field-context:visible').first().focus();
                    }
                })
                // eslint-disable-next-line webperf/directly-select-with-id
                var fields = fieldcontainer.find(menufield).find('.zcanvas-field:not(.zcmenu-disable-item)').clone();
                var fieldlen = fields.length;
                for(var i = 0 ; i < fieldlen ; i++){
                    var duid = fields.eq(i).attr('data-uniquekey'); // NO I18N
                    if(data && data.zctype && (data.zctype.indexOf('profileimage') > -1  || data.zctype.indexOf('fileupload') > -1 || data.zctype.indexOf('image') > -1 )){
                        if(duid && datamap[duid].zctype === data.zctype){
                            menucontainer.append(fields.show().get(i));
                        }
                    }else{
                        var ddata = datamap[duid];
                        if( ddata && ( ddata.zctype && !(ddata.zctype.indexOf('profileimage') > -1) &&  !(ddata.zctype.indexOf('fileupload') > -1) && !(ddata.zctype.indexOf('image') > -1) && !(ddata.zctype.indexOf('subform') > -1))){
                            menucontainer.append(fields.show().get(i));
                        }
                    }
                   
                }
                var availmenu = menucontainer.children().not('.zc-strict-hide').not('.zcanvas-menuhidden').not('.zcmenu-disable-item').attr('class','').attr('tabindex','-1').addClass('zcanvas-field-context'); // NO I18N
                availmenu.click(function(e){ // NO I18N
                    changeField(e,originalEvent,datamap);
                }).keydown(keymovementhandler);
                // eslint-disable-next-line jQuery-chaining
                newcontextcontainer.insertAfter(contextContainer).show();
                if(availmenu && availmenu.length === 0){
                	$('#changesidebarnomatch').show();
                }
                var pos = getMenuPosition($etarget,newcontextcontainer,1);
                  // eslint-disable-next-line webperf/layout-thrashing
                //  newcontextcontainer.css({  left: pos.left,top: pos.top })
                  
                  // eslint-disable-next-line webperf/layout-thrashing
                  var stobj = {  left: pos.left - 4,top: pos.top - 1,width: '202px' }; // NO I18N
                    if(pos._bottom){
                  	  delete stobj.top;
                  	  stobj.bottom = pos._bottom - 5;
                  	  newcontextcontainer.addClass('zcbottomcontextmenu'); // NO I18N
                    }
                    newcontextcontainer.css(stobj); // NO I18N
                searchtemplate.find('input').focus();
                break;
            case 'convertTable':
                var element = $(container);
                var baseel = $(originalEvent.target);
                if(baseel.is('.zcanvas-selectbox') && zcanvasmerge){
                    var $el = $('.zcanvas-multiselect.zcanvas-field , .zcanvas-selected-element.zcanvas-field'); // NO I18N
                    var mergedel = zcanvasmerge.prototype.mergeselected($el);
                    mergedel.addClass('zctablelayout').zaddClass('zctablelayout'); // NO I18N
                }else{
                    var data = { previous: {}, current: {} };
                    var inst = options.config;
                    if(inst && inst.toolsRef){
                        data.previous.flag = element.hasClass('zctablelayout'); // NO I18N
                        data.previous.className = 'zctablelayout'; // NO i18N
                        data.current.className = 'zctablelayout'; // NO i18N
                        data.current.flag = !data.previous.flag;
                        inst.toolsRef.savecanvasaction(element,'classaction',data.previous,data.current);
                    }
                    element.toggleClass('zctablelayout'); // NO I18N
                    element.ztoggleClass('zctablelayout'); // NO I18N
                }
                
                break;
            case 'convertTable2':
                var baseel = $(originalEvent.target);
                var $el = $('.zcanvas-multiselect.zcanvas-field , .zcanvas-selected-element.zcanvas-field'); // NO I18N
                var table = zclayout.prototype.layouts['Table Layout'].converttotable($el , baseel);
                if(table.parents('.zcanvas-static-editor').length){
                    var $parent = table.parents('.zcanvas-non-delete.zcanvas-editor'); // NO I18N
                    var parentinst = $parent.data('zcanvas'); // NO I18N
                    parentinst.changedetection && parentinst.changedetection('converttable'); // NO I18N
                    table.draggable('option','containment','parent'); // NO I18N
                    table.draggable('option','scope',parentinst.config.zcdropscope); // NO I18N
                    table.find('.zc-table-sort').css('position','absolute'); // NO I18N
                }
                break;
            
            case 'copyrelatedstyle':
                $("#copyrl").click();
                break;
            case 'pasterelatedstyle':
                $("#pasterl").click();
                break;
            case 'fixed':
                var $editor = $(originalEvent.target);
                if($editor.is('.zc-tab-content') || $editor.is('.zctable-sortable')){
                    $editor = $editor.closest('.zclayout'); // NO I18N
                } else if($editor.parent('.zclayout').length){
                    $editor = $editor.parent();
                } else if($editor.parents('.zcanvas-field').length){
                    $editor = $editor.closest('.zcanvas-field'); // NO I18N
                }else if($editor.is('.zcanvas-relatedlist-container')){ // NO I18N
                	$editor = $editor.closest('.zcanvas-static-editor'); // NO I18N
                }
                $editor.attr('fixed','true'); // NO I18N
                break;
            case 'fluid':
                var $editor = $(originalEvent.target);
                if($editor.is('.zc-tab-content') || $editor.is('.zctable-sortable')){
                    $editor = $editor.closest('.zclayout'); // NO I18N
                } else if($editor.parent('.zclayout').length){
                    $editor = $editor.parent();
                } else if($editor.hasClass('zcanvas-holder') || $editor.hasClass('zcanvas-inner-component')){
                    $editor = $editor.closest('.zcanvas-field'); // NO I18N
                }else if($editor.is('.zcanvas-relatedlist-container')){ // NO I18N
                	$editor = $editor.closest('.zcanvas-static-editor'); // NO I18N
                }
                $editor.removeAttr('fixed'); // NO I18N
                break;
            case 'gallery':
                event.stopImmediatePropagation();
                closeflag = false;
                var $etarget = $(event.target);
                var $li = $etarget.closest('li'); // NO I18N
                $li.addClass('active-context'); 
                var contextContainer = $('.zcanvas-context-container');
                var target = $(originalEvent.target).closest('.zcanvas-field');
                var galleryel = zcanvasgallery.getgallerylist(target);
                var menucontainer = $('<div/>', {class: 'zcanvas-context-container zcanvas-field-context-container'});
                menucontainer.append(galleryel);
                var gallerycontainer = function(e){ // NO I18N
                    var $li = $(e.target).closest('li'); // NO I18N
                    var listyle = $li.data('zcgallery'); // NO I18N
                    target.css(listyle);
                    var type = zcanvasgallery.gettype(target);
                    zcanvasgallery.postprocess[type](target)
                }
                menucontainer.click(gallerycontainer);
                // eslint-disable-next-line jQuery-chaining
                menucontainer.insertAfter(contextContainer).show();
                var pos = getMenuPosition($etarget,menucontainer);
                  // eslint-disable-next-line webperf/layout-thrashing , jQuery-chaining
                  menucontainer.css({  left: pos.left,top: pos.top })
                
                break;
            case 'clone':
                var el = $(originalEvent.target);
                var instname = el.closest('.zclayout').attr('data-layoutname'); // NO I18N
                var inst = zclayout.prototype.layouts[instname]; 
                inst.clone(el);
                break;
            case 'showIconTab':
                event.stopImmediatePropagation();
                closeflag = false;
                var $etarget = $(event.target);
                var $li = $etarget.closest('li'); // NO I18N
                $li.addClass('active-context'); 
                var el = $(originalEvent.target).closest('.tab');
                var $el = el.closest('.zctablayout');  // NO I18N
                zutils.showicondropdown($el,function(icon){
                    $('.ziconselectorbox').zremove();
                    zclayout.prototype.layouts['Tab Layout'].addIcon(icon,el);
                },'zcanvas-field-context-container') // NO I18N
                var $iconbox = $('.ziconselectorbox');
                var pos = getMenuPosition($etarget,$iconbox);
                $iconbox.css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: pos.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: pos.top
                })
                break;
            case 'changeIconTab':
                event.stopImmediatePropagation();
                closeflag = false;
                var $etarget = $(event.target)
                var $li = $etarget.closest('li'); // NO I18N
                $li.addClass('active-context');  // NO I18N
                var el = $(originalEvent.target).closest('.tab');
                var $el = el.closest('.zctablayout');  // NO I18N
                zutils.showicondropdown($el,function(icon){ 
                    zclayout.prototype.layouts['Tab Layout'].addIcon(icon,el);
                },'zcanvas-field-context-container') // NO I18N
                var $iconbox = $('.ziconselectorbox');
                var pos = getMenuPosition($etarget, $iconbox);
                $iconbox.css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: pos.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: pos.top
                })
                break;
            case 'hideIconTab':
                var el = $(originalEvent.target).closest('.tab');
                zclayout.prototype.layouts['Tab Layout'].hideIcon(el);
                break;
            case 'showText':
                var el = $(originalEvent.target).closest('.tab');
                zclayout.prototype.layouts['Tab Layout'].showText(el);
                break;
            case 'hideText':
                var el = $(originalEvent.target).closest('.tab');
                zclayout.prototype.layouts['Tab Layout'].hideText(el);
                break;
            case 'showIconButton': 
                var el = $(originalEvent.target).closest('.zccbutton');
                event.stopImmediatePropagation();
                closeflag = false;
                var $target = $(event.target);
                var $li = $target.closest('li'); // NO I18N
                $li.addClass('active-context'); 
                zutils.showicondropdown($target,function(icon){
                    $('.ziconselectorbox').zremove();
                    var parentdata = zutils.getParentData(el);
                    parentdata.config.toolsRef.togglelabel(null , icon);
                    parentdata.config.toolsRef.selectfield(el);
                    //$('#zcavaslabelswitch').click();
                    el.addClass('zccbuttonicon').zaddClass('zccbuttonicon'); //NO I18N
                    el.find('.zcanvas-label').html('').addClass(icon).addClass('zcicon').attr('zc-icon',icon);
                    parentdata && parentdata.bindlabelresize && parentdata.bindlabelresize(el);
                },'zcanvas-field-context-container') // NO I18N
                var $iconbox = $('.ziconselectorbox');
                var pos = getMenuPosition($target,$iconbox);
                $iconbox.css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: pos.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: pos.top
                })
                break;
            case 'changeIconButton':
                var el = $(originalEvent.target).closest('.zccbutton');
                event.stopImmediatePropagation();
                closeflag = false;
                var $target = $(event.target);
                var $li = $target.closest('li'); // NO I18N
                $li.addClass('active-context');  // NO I18N
                zutils.showicondropdown($target,function(icon){
                    function removeExp(i,classname){
                        return (classname.match(/(^|\s)icon-Icon_\S+/g) || []).join(' ');
                    }
                    var parentdata = zutils.getParentData(el);
                    var $lab = el.find('.zcanvas-label');
                    //parentdata.config.toolsRef.togglelabel(null , icon , true);
                    if(parentdata && parentdata.config && parentdata.config.toolsRef){
                        var undoobj = {
                            node: parentdata.config.toolsRef.getSelectorByElement(el),
                            action: 'callback', // NO I18N
                            prev: $lab.attr('zc-icon'), // NO I18N
                            current: icon,
                            callback: function(data , oper){
                            	var $element = zutils.getElementBySelector(data.node);
                            	var $label = $element.find('.zcanvas-label'); // NO I18N
                            	if(oper === 'undo'){
                            		$label.removeClass(removeExp).addClass(data.prev).attr('zc-icon',data.prev); // NO I18N
                            	}else{
                            		$label.removeClass(removeExp).addClass(data.current).attr('zc-icon',data.current); // NO I18N
                            	}
                            }
                        }
                        parentdata.savecanvasaction(el , null , null, null , null , null , undoobj);
                    }
                    el.addClass('zccbuttonicon').zaddClass('zccbuttonicon'); //NO I18N
                    $lab.html('').removeClass(removeExp).addClass(icon).attr('zc-icon',icon);
                    parentdata.bindlabelresize && parentdata.bindlabelresize(el);
                },'zcanvas-field-context-container') // NO I18N
                var $iconbox = $('.ziconselectorbox');
                var pos = getMenuPosition($target,$iconbox);
                $iconbox.css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: pos.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: pos.top
                })
                break;
            case 'hideIconButton':
                var el = $(originalEvent.target).closest('.zccbutton');
                var parentdata = zutils.getParentData(el);
                parentdata.config.toolsRef.togglelabel(true , null , true);
                parentdata.config.toolsRef.selectfield(el);
                el.removeClass('zccbuttonicon').zremoveClass('zccbuttonicon'); // NO I18N
                break;
            case 'hideTextButton':
                var el = $(originalEvent.target).closest('.zccbutton');
                el.addClass('zccbuttonnotext').zaddClass('zccbuttonnotext'); // NO I18N
                var parentdata = zutils.getParentData(el);
                if(parentdata && parentdata.config && parentdata.config.toolsRef){
                    var undoobj = {
                        node: parentdata.config.toolsRef.getSelectorByElement(el),
                        action: 'classaction', // NO I18N
                        current: true,
                        previous: false,
                        className: 'zccbuttonnotext' // NO I18N
                    }
                    parentdata.savecanvasaction(el , null , null, null , null , null , undoobj);
                    parentdata.config.toolsRef.selectfield(el);
                }
                break;
            case 'flexDirectionRow':
                var el = $(originalEvent.target).closest('.zcanvas-gridlist');
                el.removeClass('zcanvas-flex-column');//NO I18N
                break;
            case 'flexDirectionColumn':
                var el = $(originalEvent.target).closest('.zcanvas-gridlist');
                el.addClass('zcanvas-flex-column');//NO I18N
                break;
            case 'showTextButton':
                var el = $(originalEvent.target).closest('.zccbutton');
                el.removeClass('zccbuttonnotext').zremoveClass('zccbuttonnotext'); // NO I18N
                var parentdata = zutils.getParentData(el);
                if(parentdata && parentdata.config && parentdata.config.toolsRef){
                    var undoobj = {
                        node: parentdata.config.toolsRef.getSelectorByElement(el),
                        action: 'classaction', // NO I18N
                        current: false,
                        previous: true,
                        className: 'zccbuttonnotext' // NO I18N
                    }
                    parentdata.savecanvasaction(el , null , null, null , null , null , undoobj);
                }
                break;
            case 'seperator':
                event.stopImmediatePropagation();
                closeflag = false;
                var dropdown = $('.zc-seperator-dropdown').show(); // NO I8N
                var pos = getMenuPosition($(event.target),dropdown);
                dropdown.css({
                    // eslint-disable-next-line webperf/layout-thrashing
                    left: pos.left,
                    // eslint-disable-next-line webperf/layout-thrashing
                    top: pos.top
                })
                $(window).on('click.zcontext', function(){ // NO I18N
                    $('.zcanvas-context-container').zremove();
                    $('.zc-seperator-dropdown').hide();
                    $(window).off('click.zcontext'); // NO I18N
                })
                break;
            case 'changerl':
                event.stopImmediatePropagation();
                closeflag = false;
                zutils.changelistutil(originalEvent);
                
                break;
            case 'alignments':
                event.stopImmediatePropagation();
                closeflag = false;
                var el = $(originalEvent.target).closest('.zcanvas-gridlist');
                var $li = $(event.target).closest('.zcanvas-alignment-dropdown'); // NO I18N
                var contextContainer = $('.zcanvas-context-container');
                $li.addClass('active-context');
                var obj = zclayout.prototype.layouts['Grid List'];
                var menucontainer = obj.showAlignOption(el);
    //                el.append(menucontainer);
                menucontainer.insertAfter(contextContainer);
              //  var parentContainer = $(contextContainer).parent();
                // eslint-disable-next-line webperf/layout-thrashing
                var pos = $li.offset();
                // eslint-disable-next-line webperf/layout-thrashing
                var wid = $li.outerWidth();
                menucontainer.css({left: pos.left + wid,top: pos.top}).show();
                break;
            case 'changetocard':
                var target = $(originalEvent.target).closest('.zcanvas-static-editor'); // NO I18N
                zcanvasrelatedList.changelisttype(target);
                break;
            case 'changetolist':
                var target = $(originalEvent.target).closest('.zcanvas-static-editor'); // NO I18N
                zcanvasrelatedList.changetolist(target);
                break;
            case 'copystyletable':
                var target = $(originalEvent.target);
                var position = parseInt(target.data('child')); // NO I18N
                var type = target.data('selection'); // NO I18N
                var inst = zutils.getinstancetool();
                if(inst && type){
                    inst.copydata.tablecolumnstyle = {};
                    inst.copydata.tablecolumnstyle[type] = [];
                    var comp = target.closest('.zclayout-table'); // NO I18N
                    var el = zclayout.prototype.layouts['Table Layout'].getcellsbyevent.bind(comp)(originalEvent , true) || [];
                    var ellen = el.length;
                    for(var i = 0 ; i < ellen ; i++){
                        var selector = type === 'label' ? ' .zcanvas-label' : ' .zcanvas-value-container'; // NO I18N
                        var element = el.eq(i).find(selector);
                        if(element.length){
                            inst.copydata.tablecolumnstyle[type].push(inst.copystyle(element));
                        }else{
                            inst.copydata.tablecolumnstyle[type].push(undefined);
                        }
                        
                    }
                }
                break;
            case 'pastestyletable':
                var target = $(originalEvent.target);
                var position = parseInt(target.data('child')); // NO I18N
                var type = target.data('selection'); // NO I18N
                var inst = zutils.getinstancetool();
                if(inst && type){
                    var copydata =  inst.copydata.tablecolumnstyle ? inst.copydata.tablecolumnstyle[type] : null;
                    var hascopydata = copydata && copydata.length;
                    var singledata;
                    if(!hascopydata){
                        singledata = inst.copydata.field ? inst.copydata.field[type] : null;
                    }
                    if(hascopydata || singledata){
                        var comp = target.closest('.zclayout-table'); // NO I18N
                        var el = zclayout.prototype.layouts['Table Layout'].getcellsbyevent.bind(comp)(originalEvent , true) || [];
                        var ellen = el.length;
                        var undoobj = {action: 'link' , actionarray: [] , node: ''}; // NO I18N
                        for(var i = 0 ; i < ellen ; i++){
                            var selector = type === 'label' ? ' .zcanvas-label' : ' .zcanvas-value-container'; // NO I18N
                            var element = el.eq(i).find(selector);
                            if(hascopydata && copydata[i] && copydata[i][type]){
                                undoobj.actionarray.push(inst.pastestyle(copydata[i][type] , element , null ,true));
                            }else if(!hascopydata && singledata){
                                undoobj.actionarray.push(inst.pastestyle(singledata , element , null ,true));
                            }
                        }
                        inst.savecanvasaction(undoobj , comp);
                    }
                }
                break;
            case 'deletegroup':
                var target = $(originalEvent.target);
                var layout = target.closest('.zcmergelayout'); // NO I18N
                if(layout.length){
                    zutils.deleteLayout(layout);
                }
                break;
            case 'lock':
                var target = $(originalEvent.target);
                var closestdrag = target.closest('.ui-draggable'); // NO I18N
                if(closestdrag.length){
                    var zinst = $('#zcanvas-editor-outer').data('zcanvas'); // NO I18N
                	zinst && zinst.config && zinst.config.lockhandler(null , closestdrag);
                }
                break;
            case 'unlock':
                var target = $(originalEvent.target);
                var closestdrag = target.closest('.ui-draggable'); // NO I18N
                if(closestdrag.length){
                    var zinst = $('#zcanvas-editor-outer').data('zcanvas'); // NO I18N
                	zinst && zinst.config && zinst.config.unlockhandler(null , closestdrag);
                }
                break;
            default:
                var target = $(originalEvent.target);
                var _parentinst = $('#zcanvas-editor-outer').data('zcanvas'); // NO I18N
                _parentinst && _parentinst.config && _parentinst.config.contextcallback(key , target , event , contextflags);
                break;
        }
         // eslint-disable-next-line webperf/no-multipleDOMLookup
       closeflag && contextflags.closeflag && $('.zcanvas-context-container').zremove();
    }
    $.fn.zcontextmenu = function(options){
        var el = $(this);
        var appendel = options.config && options.config.contextmenucontainer ? $(options.config.contextmenucontainer) : el;
        el.contextmenu(function(e){
            // Prevent Opening the brower menu
            e.preventDefault();
            $('.zcanvas-context-container').zremove();
            var target = $(e.target);
            var selectedType = options.config.toolsRef.config.gettype(target).zctype; // Get selected element type
            // Disable context menu item from the list based on given selectedtype
            if (options.config.disableContextMenu && options.config.disableContextMenu.length) {
                var isDisableContentMenu = options.config.disableContextMenu.indexOf(selectedType) > -1;
            }
           // if(!el.is(target)){
            	if (!isDisableContentMenu) {
                    getMenu(target,e,appendel,options);
                }
                
           //}
        });
        appendel.off('click.zccontext'); // NO I18N
        appendel.on( 'click.zccontext' , function(e){
            if(!$(e.target).is('input')){
                $('.zcanvas-context-container').zremove();
                e.currentTarget.parentElement.classList.remove(options.config.contextclass);
            }
        })
    }
})(jQuery);;(function(){
    function isBetween(value,start,end){
        return value >= start && value <= end;
    }
    function isTopIntercepted(source,destination){
       return isBetween( destination.left , source.left , source.left + source.width) ||
              isBetween( destination.left + destination.width , source.left, source.left + source.width ) ||
              // eslint-disable-next-line no-extra-parens
              (source.left > destination.left && source.left + source.width < destination.left + destination.width);
    }
    function isLeftIntercepted(source,destination){
        return isBetween( destination.top, source.top , source.top + source.height ) ||
               isBetween( destination.top + destination.height , source.top , source.top + source.height) ||
               // eslint-disable-next-line no-extra-parens
               (source.top > destination.top && source.top + source.height < destination.top + destination.height);
    }
    // FIXME: Find reliable solution than this
    function measureText(pText, pFontSize, pStyle) {
        var lDiv = document.createElement('div');

        // eslint-disable-next-line zstandard/no-body-events
        document.body.appendChild(lDiv);
    
        if (pStyle) {
            lDiv.style = pStyle;
        }
        lDiv.style.fontSize = "" + pFontSize + "px";
        lDiv.style.position = "absolute";
        lDiv.style.left = -1000;
        lDiv.style.top = -1000;
    
        lDiv.innerHTML = pText;
    
        var lResult = {
            // eslint-disable-next-line webperf/layout-thrashing
            width: lDiv.clientWidth,
            // eslint-disable-next-line webperf/layout-thrashing
            height: lDiv.clientHeight
        };
    
        document.body.removeChild(lDiv);
        lDiv = null;
    
        return lResult;
    }
    function findResizeDisturbNodes(sourcenode,othernodes,editor,options){
        var nomin = options.nomin;
        var alignable = options.alignable;
        var innerelement = options.innerelement;
        var skipelement = options.skipelement;
        var sourcePositions = sourcenode.position();
        var sourcecanvasselector = options.sourceselector;
        sourcePositions.width = sourcenode.outerWidth();
        sourcePositions.height = sourcenode.outerHeight();
        var otherelementsCount = 0;//othernodes.length; // FIXME::
        var editorDimensions = {
            width : editor.width(),
            height: editor.height(),
            paddingleft: parseInt(editor.css('padding-left')), // NO I18N
            paddingtop: parseInt(editor.css('padding-top')) // NO I18N
        }
        var maxwidth = editorDimensions.width - (sourcePositions.left - editorDimensions.paddingleft)  ;// + sourcePositions.width;
        var maxHeight = editorDimensions.height - sourcePositions.top + sourcePositions.height;
        for(var i = 0; i < otherelementsCount ; i++){
            var $node = $(othernodes[i]);
            var nodePositions = $node.position();
            nodePositions.width = $node.outerWidth();
            nodePositions.height = $node.outerHeight();
            if(zutils.isInterceptedByPosition(sourcePositions, nodePositions)){
                continue;
            }
            var leftFlag = isLeftIntercepted(sourcePositions,nodePositions);
           if(leftFlag){
                if(maxwidth >  nodePositions.left - sourcePositions.left && nodePositions.left - sourcePositions.left > 0 ){
                    maxwidth = nodePositions.left - sourcePositions.left;
                }
           }
           var topFlg = isTopIntercepted(sourcePositions, nodePositions);
           if(topFlg){
                if(maxHeight > nodePositions.top - sourcePositions.top && nodePositions.top - sourcePositions.top > 0){
                    maxHeight = nodePositions.top - sourcePositions.top;
                }
           }
        }
        if(nomin){
            return { 
                'max-width': maxwidth + 'px', // NO I18N
                'max-height': maxHeight + 'px' // NO I18N
            }
        }else{
            var sourcecanvasnodes;
            if(sourcecanvasselector){
                sourcecanvasnodes = sourcenode.find(sourcecanvasselector).not('.zcanvas-cancel-resize').not('.zcanvas-temp-cancel').not('.zcautoratio'); // NO I18N
            }else{
                sourcecanvasnodes = sourcenode.children(innerelement || '.zcanvas').not('.zcanvas-cancel-resize').not('.zcanvas-temp-cancel'); // NO I18N
            }

           


            sourcecanvasnodes = canvasObjUtils._.filter(sourcecanvasnodes , function(tnode) {
                return !(tnode.style.width.indexOf('100%') > -1)
            })
            var alignableflag = alignable && (sourcenode.css('text-align') === 'right' || sourcenode.css('text-align') === 'center') || sourcenode.hasClass('zctablelayout') ? true : false; // NO I18N
            var minWidth;
            if(sourcenode.hasClass('zctablelayout') || sourcenode.has('.zcanvastableLabel').length || sourcenode.children(".zcanvas-gridlist").length){
                var fsize = sourcenode.css('font-size'); // NO I18N
                var resulttext = measureText(sourcenode[0],fsize,sourcenode[0].style);
                minWidth = resulttext.width;
            }else{
                minWidth = parseInt( canvasObjUtils._.max(sourcecanvasnodes.map(function(d){
                    var textwidth = 0;
                 var $this = $(d);
                 if(skipelement && $this.is(skipelement)){
                     $this.children().each(function(){
                         textwidth  += $(this).outerWidth(); 
                     })
                 }
                 return  (textwidth ? textwidth : d.clientWidth || parseInt(d.style.width) || 0  ) + ( alignableflag ? 0 : d.offsetLeft || parseInt(d.style.left) || 0 );
               }))) || 0;
            }
    
            var minHeight = parseInt(canvasObjUtils._.max( sourcecanvasnodes.map(function(d){
                return  d.clientHeight + d.offsetTop;
            }) )) || 0;
             
            var minres = { 
                'max-width': maxwidth + 'px', // NO I18N
                'max-height': maxHeight + 'px', // NO I18N
                'min-width': minWidth + 'px', // NO I18N
                'min-height': minHeight + 'px'  // NO I18N
            }
            if(options.nominheight){
                delete minres['min-height']; // NO I18N
            }
            return minres;
        }
    }
    if(zutils){
        zutils.setMinMaxDimension = function(element ){
            var editorparent = element.parent('.zcanvas-editor');  // NO I18N
            var outerparent = element.parent('.zcanvas-editor-outer');  // NO I18N
            var parentEditor = editorparent.length ? editorparent :  outerparent.length ? outerparent : null  ;
            if(parentEditor){
                var maxObj = findResizeDisturbNodes(element,parentEditor.children('.zcanvas').not(element).not('.zcanvas-cancel-resize'),parentEditor,{});  // NO I18N
                element.css(maxObj);
                return maxObj;
            }
        }

        zutils.removeMinMaxDimension = function(element){
            element.css({'min-width': '' , 'max-width': '', 'min-height': '', 'max-height': ''}); // NO I18N
        }
        zutils.invokeResize2 = function(element){
            var elem = element;
            var eastbar = elem.children(".ui-resizable-handle").first(); // NO I18N
            var pageX = eastbar.offset().left;
            var pageY = eastbar.offset().top;

            eastbar.trigger("mouseover")  // NO I18N
            .trigger({ type: "mousedown", which: 1, pageX: pageX, pageY: pageY }) // NO I18N
            .trigger({ type: "mousemove", which: 1, pageX: pageX - 1, pageY: pageY }) // NO I18N
            .trigger({ type: "mousemove", which: 1, pageX: pageX, pageY: pageY }) // NO I18N
            .trigger({ type: "mouseup", which: 1, pageX: pageX, pageY: pageY }); // NO I18N

        }
        zutils.invokeResize = function(element){
            var inst = element.data('uiResizable'); // NO I18N
            if(inst){
              var _plugins = inst.plugins;
              if(_plugins.start){
                  var len = _plugins.start.length;
                  for(var i = 0 ; i < len ; i ++){
                      var plugname = _plugins.start[i][0];
                      if(plugname === 'zrestricteditor'){ // NO I18N
                        inst.axis = 'se'; // NO I18N
                        _plugins.start[i][1].bind(element)();
                      }
                  }
              }

            }
        }
        zutils.findMinLeftTop = function(parent , element){
            var dlnode = zutils.findImmediateDisturb(parent , element , 'left'); // NO I18N
            var dtnode = zutils.findImmediateDisturb(parent , element , 'top'); // NO I18N
            var result = { minLeft: null , minTop: null }
            if(dlnode && dlnode.length){
                var pos = dlnode.position();
                result.minLeft =  pos.left + dlnode.outerWidth();
            }else{
                result.minLeft = parseInt(parent.css('padding-left')); // NO I18N
            }
            if(dtnode && dtnode.length){
                var pos = dtnode.position();
                result.minTop = pos.top + dtnode.outerHeight();
            }else{
                result.minTop = parseInt(parent.css('padding-top')); // NO I18N
            }
            return result;
        }
    }
    
    $.ui.plugin.add("resizable", "zrestrict", { //NO I18N
        start: function(event , ui){
            var element = $(this);
            var instance = element.data('uiResizable'); // NO i18N
            var options = instance.options.zrestrict;
            var parentEditor = $(options.editor);
            var styles = element.css(['padding-left','padding-right','padding-top','padding-bottom','border-left-width','border-right-width','border-top-width','border-bottom-width']); // NO I18N
            var paddingLeft = parseFloat(styles['padding-left']);//NO I18N
            var paddingRight = parseFloat(styles["padding-right"]);//NO I18N
            var paddingTop = parseFloat(styles["padding-top"]);//NO I18N
            var paddingBottom = parseFloat(styles["padding-bottom"]);//NO I18N
            var borderLeft =   parseFloat(styles['border-left-width']);//NO I18N
            var borderRight = parseFloat(styles["border-right-width"]);//NO I18N
            var borderTop = parseFloat(styles["border-top-width"]);//NO I18N
            var borderBottom = parseFloat(styles["border-bottom-width"]);//NO I18N

            var n_oheight = paddingTop + paddingBottom + borderTop + borderBottom;
            var w_owidth = paddingLeft + paddingRight + borderLeft + borderRight;
            styles.nh = n_oheight;
            styles.ww = w_owidth;
                
            instance.zcmetastyles = styles;

         
            if(instance && instance.axis && ui && (instance.axis.indexOf('e') > -1 || instance.axis.indexOf('w') > -1)){
                
                ui.size.width = ui.size.width + paddingLeft + paddingRight + borderLeft + borderRight;
            }
            if(instance && instance.axis && ui && (instance.axis.indexOf('s') > -1 || instance.axis.indexOf('n') > -1)){
                // eslint-disable-next-line webperf/layout-thrashing
                ui.size.height = ui.size.height + paddingTop + paddingBottom + borderTop + borderBottom;
            }
            if(!element.hasClass("canvas-norestrict")){
                var maxObj =  findResizeDisturbNodes(element,parentEditor.children(options.element).not(element),parentEditor,options); // NO i18N
                var isWestTop = false;
                if(maxObj && instance.axis && typeof instance.axis === 'string' && ( instance.axis.indexOf('w') > -1 || instance.axis.indexOf('n') > -1 )){
                    isWestTop = true;
                    maxObj['max-height'] = maxObj['max-width'] = 'initial'; // NO I18N
                }
                instance.element.resizable('option','maxHeight', isWestTop ? null : parseInt(maxObj['max-height'])); // NO I18N
                instance.element.resizable('option','maxWidth', isWestTop ? null : parseInt(maxObj['max-width'])); // NO I18N
                instance.element.resizable('option','minHeight', parseInt(maxObj['min-height'])); // NO I18N
           //     instance.element.resizable('option','minWidth', parseInt(maxObj['min-width'])); // NO I18N
                delete maxObj['min-width']; // NO I18N
                element.css(maxObj);
                //return maxObj;
            }
           
        },
        resize: function(event , ui){
            var element = $(this);
            var inst = element.data('uiResizable'); // NO i18N
            var options = inst.options.zrestrict;
            if(options.resizeclass && element.hasClass(options.resizeclass)){
                var styles = inst.zcmetastyles;
                // var styles = element.css(['padding-left','padding-right','padding-top','padding-bottom','border-left-width','border-right-width','border-top-width','border-bottom-width']); // NO I18N
                // var paddingLeft = parseFloat(styles['padding-left']);//NO I18N
                // var paddingRight = parseFloat(styles["padding-right"]);//NO I18N
                // var paddingTop = parseFloat(styles["padding-top"]);//NO I18N
                // var paddingBottom = parseFloat(styles["padding-bottom"]);//NO I18N
                // var borderLeft =   parseFloat(styles['border-left-width']);//NO I18N
                // var borderRight = parseFloat(styles["border-right-width"]);//NO I18N
                // var borderTop = parseFloat(styles["border-top-width"]);//NO I18N
                // var borderBottom = parseFloat(styles["border-bottom-width"]);//NO I18N
                if(inst.axis.indexOf('s') > -1 || inst.axis.indexOf('n') > -1){
                    ui.size.height = ui.size.height  + styles.nh;
                    
                } 
                if(inst.axis.indexOf('e') > -1 || inst.axis.indexOf('w') > -1){
                    // eslint-disable-next-line webperf/layout-thrashing
                    ui.size.width = ui.size.width + styles.ww;
                }
               
            }
            
        },
        stop: function(e, ui){
            var element = $(this);
            var inst = element.data('uiResizable'); // NO i18N
            var styles = inst.zcmetastyles;
           
            if(inst.axis.indexOf('s') > -1 || inst.axis.indexOf('n') > -1){
                  ui.originalSize.height += styles.nh;
            } 
            if(inst.axis.indexOf('e') > -1 || inst.axis.indexOf('w') > -1){
                  ui.originalSize.width += styles.ww;
            }
        }
    });


    $.ui.plugin.add("resizable", "zrestricteditor", { //NO I18N
        start: function(){
            var element = $(this);
            var instance = element.data('uiResizable'); // NO i18N
            if(instance.options.zrestricteditor){
                var editorparent = element.parent('.zcanvas-editor');  // NO I18N
                var outerparent = element.parent('.zcanvas-editor-outer');  // NO I18N
                var parentEditor = editorparent.length ? editorparent :  outerparent.length ? outerparent : null  ;
                var options = {};
                if(instance.options.zrestricteditor instanceof Object){
                    options = instance.options.zrestricteditor;
                }
                var styles = element.css(['padding-left','padding-right','padding-top','padding-bottom','border-left-width','border-right-width','border-top-width','border-bottom-width']); // NO I18N
                var paddingLeft = parseFloat(styles['padding-left']);//NO I18N
                var paddingRight = parseFloat(styles["padding-right"]);//NO I18N
                var paddingTop = parseFloat(styles["padding-top"]);//NO I18N
                var paddingBottom = parseFloat(styles["padding-bottom"]);//NO I18N
                var borderLeft =   parseFloat(styles['border-left-width']);//NO I18N
                var borderRight = parseFloat(styles["border-right-width"]);//NO I18N
                var borderTop = parseFloat(styles["border-top-width"]);//NO I18N
                var borderBottom = parseFloat(styles["border-bottom-width"]);//NO I18N
                var n_oheight = paddingTop + paddingBottom + borderTop + borderBottom;
                var w_owidth = paddingLeft + paddingRight + borderLeft + borderRight;
                styles.nh = n_oheight;
                styles.ww = w_owidth;
                
                instance.zcmetastyles = styles;
                
               // if(instance.axis.indexOf('s') > -1 || instance.axis.indexOf('n') > -1){
                  //  ui.originalSize.height += styles.nh;
                 //   var newh = ui.size.height + styles.nh;
                 //  ui.size.height = ui.size.height != newh ? newh : ui.size.height;
              //  } 
              //  if(instance.axis.indexOf('e') > -1 || instance.axis.indexOf('w') > -1){
                 //   ui.originalSize.width += styles.ww;
                 //   var neww = ui.size.width + styles.ww;
                  //  ui.size.width = ui.size.width != neww ? neww : ui.size.width;
              //  }




                // if(instance.axis.indexOf('n') > -1 || instance.axis.indexOf('w') > -1){
                //          element.css({
                //              'min-height': 'initial', // NO I18N
                //              'min-width': 'initial', // NO I18N
                //              'max-height': 'initial', // NO I18N
                //              'max-width': 'initial' // NO I18N
                //          });
                //         var minpos = zutils.findMinLeftTop(parentEditor , element);
                //         instance.minpos = minpos;

                //         instance.element.resizable('option','maxHeight', null); // NO I18N
                //         instance.element.resizable('option','maxWidth', null); // NO I18N
                //         instance.element.resizable('option','minHeight', null); // NO I18N
                //         instance.element.resizable('option','minWidth', null); // NO I18N

                // }else if(instance.axis.indexOf('s') > -1 || instance.axis.indexOf('e') > -1){
                    if(parentEditor && !element.hasClass("canvas-norestrict")){//NO I18N
                        var isTabLayout = element.hasClass('zctablayout'); // NO I18N
                        if(isTabLayout){
                            options.sourceselector = '.zc-tab-content > .zcanvas'; // NO I18N
                        }
                        var maxObj = findResizeDisturbNodes(element,parentEditor.children('.zcanvas').not(element).not('.zcanvas-cancel-resize'),parentEditor,options);  // NO I18N
                        if(isTabLayout){
                            var $zctabs = element.find('.zc-tabs'); // NO I18N
                            var zcmargin = $zctabs.css(['margin-top' , 'margin-bottom']); // NO I18N
                            var zcaddition = $zctabs.outerHeight() + parseInt(zcmargin['margin-top']) + parseInt(zcmargin['margin-bottom']); // NO I18N
                            maxObj['min-height'] = parseInt(maxObj['min-height']) + zcaddition + 'px'; // NO I18N
                        }
                       // delete maxObj['min-width']; // NO I18N
                      //  delete maxObj['min-height']; // NO I18N
                        var isWestTop = false;
                        var istabcontent = parentEditor.hasClass('zc-tab-content'); // NO I18N
                        if(maxObj && instance.axis && typeof instance.axis === 'string' && ( instance.axis.indexOf('w') > -1 || instance.axis.indexOf('n') > -1 || istabcontent )){
                            isWestTop = true;
                            maxObj['max-height'] = maxObj['max-width'] = 'initial'; // NO I18N
                            element.addClass('zcanvas-west-resizing'); // NO I18N
                        }
                        if(istabcontent){
                            instance.options.oldcontainment = instance.options.containment;
                            instance.options.containment = null;
                            instance.minpos = {minLeft : 1 , minTop: 1};
                        }
                        element.css(maxObj);
                        instance.element.resizable('option','maxHeight', isWestTop ? null : parseInt(maxObj['max-height'])); // NO I18N
                        instance.element.resizable('option','maxWidth', isWestTop ? null : parseInt(maxObj['max-width'])); // NO I18N
                        instance.element.resizable('option','minHeight', parseInt(maxObj['min-height'])); // NO I18N
                        instance.element.resizable('option','minWidth', parseInt(maxObj['min-width'])); // NO I18N
                   
                        if(instance.element.data('zc-min-force')){
                            instance.element.resizable('option','minHeight', parseInt(instance.element.data('zc-min-force'))); // NO I18N
                            instance.element.resizable('option','minWidth', parseInt(instance.element.data('zc-min-force'))); // NO I18N
                        }
                      // return maxObj;
    
                    }
                // }


                
            }
         
        },
        resize: function(event,ui){
            var element = $(this);
            var inst = element.data('uiResizable'); // NO i18N
            var styles = inst.zcmetastyles;

            element.removeClass('zcautoratio').zremoveClass('zcautoratio'); // NO I18N
           
            if(inst.axis.indexOf('s') > -1 || inst.axis.indexOf('n') > -1){
                // eslint-disable-next-line webperf/layout-thrashing
               var newh = ui.size.height + styles.nh;
               // eslint-disable-next-line webperf/layout-thrashing 
               ui.size.height = ui.size.height !== newh ? newh : ui.size.height;
            } 
            if(inst.axis.indexOf('e') > -1 || inst.axis.indexOf('w') > -1){
                // eslint-disable-next-line webperf/layout-thrashing
                var neww = ui.size.width + styles.ww;
                // eslint-disable-next-line webperf/layout-thrashing 
                ui.size.width = ui.size.width !== neww ? neww : ui.size.width;
            }

            // eslint-disable-next-line webperf/layout-thrashing
            if(inst.minpos && inst.minpos.minLeft && inst.minpos.minLeft > ui.position.left ){
                // eslint-disable-next-line webperf/layout-thrashing
                var diff = inst.minpos.minLeft - ui.position.left  ;
                // eslint-disable-next-line webperf/layout-thrashing
                ui.position.left = inst.minpos.minLeft;
                // eslint-disable-next-line webperf/layout-thrashing
                ui.size.width = ui.size.width - diff;
            }
            // eslint-disable-next-line webperf/layout-thrashing
            if(inst.minpos && inst.minpos.minTop && inst.minpos.minTop > ui.position.top ){
                // eslint-disable-next-line webperf/layout-thrashing
                var diff = inst.minpos.minTop - ui.position.top ;
                // eslint-disable-next-line webperf/layout-thrashing
                ui.position.top = inst.minpos.minTop;
                // eslint-disable-next-line webperf/layout-thrashing
                ui.size.height = ui.size.height - diff;
            }

            

        },
        stop: function(e, ui){
            var element = $(this);
            var inst = element.data('uiResizable'); // NO i18N
            var styles = inst.zcmetastyles;
           
            if(inst.axis.indexOf('s') > -1 || inst.axis.indexOf('n') > -1){
                  ui.originalSize.height += styles.nh;
            } 
            if(inst.axis.indexOf('e') > -1 || inst.axis.indexOf('w') > -1){
                  ui.originalSize.width += styles.ww;
            }

            element.removeClass('zcanvas-west-resizing'); // NO I18N
            if(inst.options.oldcontainment){
                inst.options.containment = inst.options.oldcontainment;
            }
            inst.minpos = null;
        }
    });
})();;(function(){
    $.ui.plugin.add("draggable", "zscrollparent",{ // NO I18N
        drag: function(ev,ui){
            var element, instance, options,containment;

            element = $(this);

            instance = element.data('ui-draggable'); //NO I18N

            options = instance.options;

            containment = $(options.zscrollparent);

            var scrollheight = ui.position.top + ui.helper.height();

            var containerheight = containment.height();

            if(containerheight - 40 < scrollheight){
                containment.height(containerheight + 30);
                containment.parent().scrollTop(containerheight - 400);
            }
            
        }
    });
})();;(function(){
    function movecontainer(side , e, flag){
        var selected = $('.zcanvas-selected-element.zcanvas , .zcanvas-multiselect.zcanvas');
        var haslock = selected.filter(function(){return this.classList.contains('zcanvas-locked-element')}); // NO I18N
        if(haslock && haslock.length){
            return;
        }
        if(selected.is('.zcanvas-inner-component')){
            selected = selected.closest('.zcanvas-field'); // NO I18N
        }
        if(!selected.is('.zcanvas-field') && !selected.is('.zcanvas-static-editor') && !selected.is('.zcanvas-editor') && !selected.is('.zclayout') ){
            var $layout = selected.closest('.zclayout'); // NO I18N 
            selected = $layout.length ? $layout : selected.closest('.zcanvas-editor'); // NO I18N
        } 
        if(!selected.length){
        	return;
        }
        var box = zutils.getBoxdimensions(selected);
        var parentref = selected.parent('.zcanvas-editor'); // NO I18N
        var selecteddata = selected.data('zcmovepos'); // NO I18N
        var $parent = parentref.length ? parentref : selected.parent('.zcanvas-editor-outer'); // NO I18N
        var $node;
        var containment = {
            mintop: 0 + parseInt($parent.css('padding-top')), // NO I18N
            minleft: 0 + parseInt($parent.css('padding-left')), // NO I18N
            maxtop: parseInt($parent.outerHeight() - selected.outerHeight() - parseInt($parent.css('padding-bottom'))), // NO I18N
            maxleft: parseInt($parent.outerWidth() - selected.outerWidth() - parseInt($parent.css('padding-right'))) // NO I18N
        }
        
        if(!selecteddata){
            $('.zcanvas-selectbox').zremove();
            var orgside;
            if(side === 'top'){
                orgside = flag ? side : 'bottom'; // NO I18N
            }else if(side === 'left'){ // NO I18N
                orgside = flag ? side : 'right'; // NO I18N
            }
            $node = zutils.findImmediateDisturb($parent , selected, orgside, box);
            selected.each(function(){
                var elcontainment = JSON.parse(JSON.stringify(containment));
                var el = $(this);
                if(el.is('.zcanvas-inner-component')){
                    el = el.closest('.zcanvas-field'); // NO I18N
                }else if(!el.is('.zcanvas-field') && !el.is('.zcanvas-static-editor')  && !el.is('.zcanvas-editor') && !el.is('.zclayout') && !el.is('.zcanvas-selectbox') ){ // NO I18N
                    var $layout = el.closest('.zclayout'); // NO I18N 
                    el = $layout.length ? $layout : el.closest('.zcanvas-editor'); // NO I18N
                }
                var elpos = el.position()
                switch(orgside){
                    case 'top':
                        var calctop = $node ? $node.position().top + $node.outerHeight() - 1 : elcontainment.mintop;
                        elcontainment.mintop = calctop + elpos.top - box.top;
                        elcontainment.previous = { top: elpos.top };
                        elcontainment.side = 'top'; // NO I18N
                        break;
                    case 'bottom':
                        var calcbottom = $node ? $node.position().top - el.outerHeight() + 1 : parseInt($parent.outerHeight() - el.outerHeight() - parseInt($parent.css('padding-bottom'))); // NO I18N
                        elcontainment.maxtop = calcbottom - (  box.height -  elpos.top - el.outerHeight() )
                        elcontainment.previous = { top: elpos.top }
                        elcontainment.side = 'top'; // NO I18N
                        break;
                    case 'left':
                        var calcleft = $node ? $node.position().left + $node.outerWidth() - 1 : elcontainment.minleft;
                        elcontainment.minleft = calcleft + elpos.left - box.left;
                        elcontainment.previous = { left: elpos.left }
                        elcontainment.side = 'left'; // NO I18N
                        break;
                    case 'right':
                        var calcright = $node ? $node.position().left - el.outerWidth() + 1 : parseInt($parent.outerWidth() - el.outerWidth() - parseInt($parent.css('padding-right'))); // NO I18N
                        elcontainment.maxleft = calcright -  ( box.width - elpos.left - el.outerWidth() )
                        elcontainment.previous = { left: elpos.left }
                        elcontainment.side = 'left'; // NO I18N
                        break;
                }
                el.data('zcmovepos', elcontainment); // NO I18N
               
            });
        }
        
       selected.each(function(){
           var el = $(this);
           var dimension = el.data('zcmovepos'); // NO I18N
           if(!dimension){
               return;
           }
            var val = parseInt(el.css(side)); // NO I18N
            if(e.shiftKey){
                flag ?  val = val - 5  :  val = val + 5  ;
            }else{
                flag ? val-- : val++;
            }
            if(side === 'left' && val > dimension.minleft && val < dimension.maxleft || side === 'top' && val > dimension.mintop && val < dimension.maxtop){
                
                el.css(side,val); // NO I18N
            }
       })


       
        
        
        var $window = $(window);
        $window.off('keyup.zcanvaskey'); // NO I18N
        var keyuphandler = function(){
            $(window).off('keyup.zcanvaskey'); // NO I18N
            var undoobj = {action: 'link' , actionarray: [], node: '#'}; // NO I18N
            var outinst = zutils.getParentData(selected) || $('.zcanvas-editor-outer').data('zcanvas'); // NO I18N
            selected.each(function(){
                var el = $(this);
                var dimension = el.data('zcmovepos'); // NO I18N
                el.removeData('zcmovepos'); // NO I18N

                if(el.is('.zcanvas-inner-component')){
                    el = el.closest('.zcanvas-field'); // NO I18N
                }else if(!el.is('.zcanvas-field') && !el.is('.zcanvas-static-editor')  && !el.is('.zcanvas-editor') && !el.is('.zclayout') && !el.is('.zcanvas-selectbox') ){ // NO I18N
                    var $layout = el.closest('.zclayout'); // NO I18N 
                    el = $layout.length ? $layout : el.closest('.zcanvas-editor'); // NO I18N
                }
                
                var editinst = zutils.getClosestEditor(el);
                var conf = zutils.getdatabyelement(editinst).config;
                var current = {};
                current[dimension.side] = el.position()[dimension.side];
                var undo = {
                    node: zutils.getSelectorByElement(el),
                    previous: dimension.previous,
                    current: current,
                    editor: conf && conf.editorcontainer,
                    action: 'drag' // NO I18N
                }
                undoobj.actionarray.push(undo);
            });
            outinst.savecanvasaction(selected.eq(0) , null , null ,null , null , null , undoobj);
        }
        $window.on('keyup.zcanvaskey', keyuphandler)
        e.preventDefault();
    }

    zutils.enableshortcuts = function(){
        // eslint-disable-next-line zstandard/no-body-events
        $(document).on('keydown.zcanvaskey',function(e){
            // Don't Listen if the key is pressed in input field`
            var $el = $(e.target);
            if($el.is('input') || $el.is('.tabname') || $el.children('textarea').length || $el.is('textarea') || $el.is('.zctextcontent') || $el.is('#zcgradientpicker')){
                return;
            }
            // Dont listen body events class name should be dynamic config
           /* if(!e.target.classList.contains('canvas-container')){
                return;
            } */


            // Tempfix for popup and popover events
            if(document.body.classList.contains('bodyWrapper')){
                return;
            }

            var deletemethod = function(){
                var $selectedfield = $('.zcanvas.zcanvas-selected-element , .zcanvas-selectbox'); // NO I18N
                if($selectedfield.length){
                    if($selectedfield.closest('.zclayout-table:not(.zcrestricttable)').length && !$selectedfield.is('.zcanvas-editor')){
                        return zclayout.prototype.layouts['Table Layout'].deletelayout($selectedfield);
                    }
                    var parenteditor = zutils.getClosestEditor($selectedfield);
                    zutils.deleteElement();
                    var parentdata = zutils.getdatabyelement(parenteditor);
                    parentdata && parentdata.config.toolsRef && parentdata.config.toolsRef.selectfield(parenteditor);
                }
            }
        
            var keycode = e.keyCode;
            switch (keycode) {
                case 27:
                    setTimeout(function(){
                		$('.zcanvas-editor-outer').click();
                	},10);
                    break;
                case 90:
                    if((e.ctrlKey || e.metaKey) && !e.shiftKey){
                        $('.zcundo').parent().click(); // NO I18N
                        e.preventDefault();
                    }else if((e.ctrlKey || e.metaKey) && e.shiftKey){
                        $('.zcredo').parent().click(); // NO I18N
                        e.preventDefault();
                    }
                    break;
                case 89:
                    if(e.ctrlKey || e.metaKey){ 
                        $('.zcredo').parent().click(); // NO I18N
                        e.preventDefault();
                    }
                    break;
                case 8:
                    deletemethod();
                    break;
                case 46:
                    deletemethod();
                    break;
                case 78:
                    if(e.ctrlKey){
                        var instance = $(".zcanvas-editor-outer").data("zcanvas");
                        var menuinst = $('#zcanvas_menu_insert').data('zcanvasMenu'); // NO I18N
                        if(menuinst){
                            var el = menuinst.getElementByKey('layoutname' , 'Section Layout'); // NO I18N
                            var elinst = el.data('zcanvas'); // NO I18N
                            var scope = menuinst.getCurrentScope(elinst);
                            if(!scope){
                                return;
                            }
                        }
                        instance && instance.addsection();
                    }
                    break;
                case 70:
                    if(e.ctrlKey && e.shiftKey){
                        $('#sidemenuSearchInput').focus();
                    }
                    break;
                case 37:
                    movecontainer('left',e, true); // NO I18N
                    break;
                case 38:
                    movecontainer('top',e, true); // NO I18N
                    break;
                case 39:
                    movecontainer('left',e); // NO I18N
                    break;
                case 40:
                    movecontainer('top',e); // NO I18N
                    break;
                case 67:
                    if(e.ctrlKey || e.metaKey){ $("#zccopy").click(); e.preventDefault(); } // NO I18N
                    break;
                case 86:
                    if(e.ctrlKey || e.metaKey){ $("#zcpaste").click(); e.preventDefault(); } // NO I18N
                    break;
                case 71:
                        $('.zcgallerysidebar').click();
                    break;
                case 68:
                        $('.zcfieldsidebar').click();
                        e.preventDefault();
                    break;
                case 69:
                        $('.zclayoutsidebar').click();
                    break;
                case 83:
                        $('.zcstylesideebar').click();
                    break;
                default:
                    break;
            }
        })
    }
    
})();;(function(){
    var zcanvasgallery = {
        gallery: {},
        init: function(data){
            zcanvasgallery.gallery = data;
        },
        isAvailable: function(element){
            if(!element.hasClass('zcanvas')){
                element = element.closest('.zcanvas'); // NO I18N
            }
            var type = zcanvasgallery.gettype(element)
            return zcanvasgallery.gallery[type];
        },
        isAvailableByType: function(type){
            return zcanvasgallery.gallery[type];
        },
        gettype: function(element){
            var eldata = element.zdata();
            if(eldata && eldata.length){
                return eldata[0].zctype;
            }
        },
        template: {
            button: '<div class="zcanvas-field zcanvas-no-img-default zc-ta-center zccbutton" data-uniquekey="edit" data-zcanvasclass="zcanvas-field zcanvas-no-img-default zc-ta-center zccbutton">\
                        <span class="zcanvas zcanvas-value-container zcanvas-inner-component zcanvas-data-node">\
                                <button>Button</button>\
                        </span>\
                    </div>'
        },
        process: {
            button2: function($clone){
                $clone.find('.zcanvas-value-container').css({
                    'background-color':'transparent',// NO I18N
                    'color':'inherit',// NO I18N
                    'border':'none'// NO I18N
                })
                $clone.find('.zcanvas-selected-element').removeClass('zcanvas-selected-element');
                $clone.find('.ui-resizable-handle').zremove();
            },
            button: function(el , style){
                var zid = zutils.getRandomId();
                el.addClass(zid);
                el.find('.zcanvas-value-container').attr('data-zcanvasId', zid); // NO I18N
                this.applyjsontostyle(el , style);
            }
        },
        postprocess: {
            button: function(el){
                var applybuttontheme = function(e){
                    var sfield = $(e.target).closest('li'); // NO I18N
                    var ddata = sfield.data('zcgallery'); // NO I18N
                    var field = this.selectedfields;
                    this.applyjsontostyle(field , ddata);
                }

                el.find('li').click(applybuttontheme.bind(this))
            }
        },
        getgallerylist: function(element){
                var type = zcanvasgallery.gettype(element);
                var galdata = zcanvasgallery.gallery[type];
                if(galdata){
                    var gallength = galdata.length;
                    var ul = $('<ul/>' , {class : 'zcanvasgallerylist'}); // NO I18N
                    for(var i = 0 ; i < gallength ; i++){
                        var $clone = element.clone();
                        zcanvasgallery.process[type]($clone);
                        $clone.css(galdata[i]).removeClass('zcanvas-selected-element');
                        var li = $('<li/>');
                        li.data('zcgallery', galdata[i]).append($clone); // NO I18N
                        ul.append(li);
                    }
                    return ul;
                }
                
        },
        getstaticgallerylist: function(type){
            var galdata = zcanvasgallery.gallery[type];
            var template = zcanvasgallery.template[type];
            if(galdata){
                var gallength = galdata.length;
                var ul = $('<ul/>' , {class: 'zcanvasgallerylist'}); // NO I18N
                for(var i = 0 ; i < gallength ; i++){
                    var $clone = $(template);
                    zcanvasgallery.process[type].bind(this)($clone ,  galdata[i]);
                    var li = $('<li/>');
                    li.data('zcgallery', galdata[i]).append($clone); // NO I18N
                    ul.append(li);
                }
                return ul;
            }

        }
    }
    window.zcanvasgallery = zcanvasgallery;
})();;(function(){
    zcanvasgallery.init({
        button: [
            {
                default: {
                    'background-color': 'rgba(51, 102, 255,1)', // NO I18N
                    'border-color': 'rgba(51, 102, 255,1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(51, 102, 255,1)', // NO I18N
                    'border-color': 'rgba(51, 102, 255,1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'rgba(0, 214, 143, 1)', // NO I18N
                    'border-color': 'rgba(0, 214, 143, 1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(0, 214, 143, 1)', // NO I18N
                    'border-color': 'rgba(0, 214, 143, 1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'rgba(255, 170, 0, 1)', // NO I18N
                    'border-color': 'rgba(255, 170, 0, 1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(255, 170, 0, 1)', // NO I18N
                    'border-color': 'rgba(255, 170, 0, 1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'rgba(255, 61, 113,1)', // NO I18N
                    'border-color': 'rgba(255, 61, 113,1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(255, 61, 113,1)', // NO I18N
                    'border-color': 'rgba(255, 61, 113,1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border-color': 'rgba(51, 102, 255,1)', // NO I18N
                    'color': 'rgba(51, 102, 255,1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(51, 102, 255,1)', // NO I18N
                    'border-color': 'rgba(51, 102, 255,1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border-color': 'rgba(0, 214, 143, 1)', // NO I18N
                    'color': 'rgba(0, 214, 143, 1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(0, 214, 143, 1)', // NO I18N
                    'border-color': 'rgba(0, 214, 143, 1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border-color': 'rgba(255, 170, 0, 1)', // NO I18N
                    'color': 'rgba(255, 170, 0, 1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(255, 170, 0, 1)', // NO I18N
                    'border-color': 'rgba(255, 170, 0, 1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border-color': 'rgba(255, 61, 113,1)', // NO I18N
                    'color': 'rgba(255, 61, 113,1)' // NO I18N
                },
                hover: {
                    'background-color': 'rgba(255, 61, 113,1)', // NO I18N
                    'border-color': 'rgba(255, 61, 113,1)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)' // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'transparent', // NO I18N
                    'background-image': 'linear-gradient(180deg, rgba(89, 139, 255,1) 0% , rgba(51, 102, 255,1) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border':'none' // NO I18N
                },
                hover: {
                    'background-image': 'linear-gradient(180deg , rgba(166, 193, 255,1) 0%, rgba(89, 139, 255, 1) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    "border":"none" // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'transparent', // NO I18N
                    'background-image': 'linear-gradient(180deg, rgba(44, 230, 155, 1) 0%, rgb(44, 230, 155, 1) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border':'none' // NO I18N
                },
                hover: {
                    'background-image': 'linear-gradient(180deg , rgba(140, 250, 199 , 1) 0%, rgba(140, 250, 199, 1) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    "border":"none" // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'transparent', // NO I18N
                    'background-image': 'linear-gradient(180deg, rgba(255, 201, 77, 1) 0%, rgba(255, 170, 0, 1) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border':'none' // NO I18N
                },
                hover: {
                    'background-image': 'linear-gradient(180deg , rgba(255, 229, 158, 1) 0%, rgb(255, 201, 77) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    "border":"none" // NO I18N
                }
            },
            {
                default: {
                    'background-color': 'transparent', // NO I18N
                    'background-image': 'linear-gradient(180deg, rgba(255, 112, 141, 1) 0%, rgba(255, 61, 113, 1) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    'border':'none' // NO I18N
                },
                hover: {
                    'background-image': 'linear-gradient(180deg , rgba(255, 168, 180, 1) 0%, rgba(255, 112, 141,1) 100%)', // NO I18N
                    'color': 'rgba(255, 255, 255,1)', // NO I18N
                    "border":"none" // NO I18N
                }
            }
        ]
    })
})();;(function(){
    zutils.showicondropdown = function(element,callback, classes){
        var zofoiconset = ["icon-Icon_plus","icon-Icon_Back","icon-Icon_Leftarrow1","icon-Icon_dot_three","icon-Icon_Rightarrow1","icon-Icon_Antenna","icon-Icon_Datacard","icon-Icon_Dish","icon-Icon_Fiber","icon-Icon_HDvoice","icon-Icon_Internationalroaming","icon-Icon_Navigation","icon-Icon_QRcode","icon-Icon_Router","icon-Icon_Scan","icon-Icon_Signalstrength","icon-Icon_Simcard","icon-Icon_Status","icon-Icon_Surveillance","icon-Icon_Unlimited","icon-Icon_Barcode","icon-Icon_Bill","icon-Icon_Calculator","icon-Icon_Cards","icon-Icon_Customersupport","icon-Icon_Delivery","icon-Icon_Dress","icon-Icon_Elevator","icon-Icon_Fragile","icon-Icon_Gift","icon-Icon_Money","icon-Icon_Offer","icon-Icon_Piggybank","icon-Icon_Shoppingbag","icon-Icon_Tracking","icon-Icon_Wallet","icon-Icon_Area","icon-Icon_Areaplot","icon-Icon_Bathtub","icon-Icon_Carrom","icon-Icon_Cupboard","icon-Icon_Dinningtable","icon-Icon_Doublebed","icon-Icon_Fan","icon-Icon_Fence","icon-Icon_Fireextinguisher","icon-Icon_Game","icon-Icon_Gym","icon-Icon_Intercom","icon-Icon_Lift","icon-Icon_Modularkitchen","icon-Icon_Park","icon-Icon_Refrigerator","icon-Icon_Singlebed","icon-Icon_Sofa","icon-Icon_Stove","icon-Icon_Swimmingpool","icon-Icon_Television","icon-Icon_Toilet","icon-Icon_Ambulance","icon-Icon_Ayurvedic","icon-Icon_Bandage","icon-Icon_Blood","icon-Icon_Dental","icon-Icon_Eye","icon-Icon_Female","icon-Icon_Lifeline","icon-Icon_Male","icon-Icon_Medical","icon-Icon_Medicalbox","icon-Icon_Medicine","icon-Icon_Ortho","icon-Icon_Patientbed","icon-Icon_Stethoscope","icon-Icon_Syringe","icon-Icon_Wheelchair","icon-Icon_Carparking","icon-Icon_Clean","icon-Icon_Cofeemaker","icon-Icon_Curtains","icon-Icon_Drinks","icon-Icon_Food","icon-Icon_Geyser","icon-Icon_Hairdryer","icon-Icon_Holiday","icon-Icon_Ironbox","icon-Icon_Nosmoking","icon-Icon_Roomservice","icon-Icon_Shower","icon-Icon_Toiletries","icon-Icon_Travelbag","icon-Icon_Washingmachine","icon-Icon_Account","icon-Icon_Attachment","icon-Icon_Bookmark","icon-Icon_Calender","icon-Icon_Camera","icon-Icon_Card","icon-Icon_Cart","icon-Icon_Caution","icon-Icon_Clock","icon-Icon_Coffeecup","icon-Icon_Dollar","icon-Icon_Downarrow","icon-Icon_Euro","icon-Icon_Facebook","icon-Icon_Favourite","icon-Icon_Flag","icon-Icon_Flight","icon-Icon_Folder","icon-Icon_Gallery","icon-Icon_Home","icon-Icon_Info","icon-Icon_Leftarrow","icon-Icon_Linkedin","icon-Icon_Location","icon-Icon_Mail","icon-Icon_Map","icon-Icon_Mention","icon-Icon_Mic","icon-Icon_Mobile","icon-Icon_Notification","icon-Icon_Phone","icon-Icon_Pound","icon-Icon_Printer","icon-Icon_Profile","icon-Icon_Rightarrow","icon-Icon_Search","icon-Icon_Star","icon-Icon_Tag","icon-Icon_Ticket","icon-Icon_Twitter","icon-Icon_Uparrow","icon-Icon_Upload","icon-Icon_Complete","icon-Icon_Agricultureloan","icon-Icon_ATMswipe","icon-Icon_Bank","icon-Icon_Banklocker","icon-Icon_Bond","icon-Icon_Customerprofile","icon-Icon_Fastag","icon-Icon_Goldloan","icon-Icon_Insurance","icon-Icon_Investment","icon-Icon_Loan","icon-Icon_Netbanking","icon-Icon_Premiumservice","icon-Icon_Reward","icon-Icon_Secure"]; // NO I18N
        var createiconsbox = function(){
            var template = '';
            zofoiconset.forEach(function(item){
                template += '<li data-value="' + item + '" class="zcanvas-icon-selector ' + item + '"></li>';
            })
            return template;
        }
        var icontemplate = $('<ul class="ziconselectorbox">' +
                    createiconsbox() +
                            '</ul>').addClass(classes) ;
        var  createdropdown = function(parent, dropdown, handler){
            var $parent = $(parent);
            var $dropdown = $(dropdown);
            var icons = $dropdown.find('.zcanvas-icon-selector'); // NO I18N
            icons.click(handler);

            var wwidth = zutils.externalwindowWidth();
            var wheight = zutils.externalwindowHeight();

            var $dropodwnpos = {
                top: $dropdown.offset().top,
                left: $dropdown.offset().left,
                height: $dropdown.outerHeight(),
                width: $dropdown.outerWidth() 
            }
            var $parentpos = {
                top: $parent.offset().top,
                left: $parent.offset().left,
                height: $parent.outerHeight(),
                width: $parent.outerWidth()
            }

            if($dropodwnpos.height + $parentpos.top + $parentpos.height < wheight){
                $dropdown.css('top',$parentpos.top + $parentpos.height); // NO I18N
            }else{
                $dropdown.css('top',$parentpos.top - $dropodwnpos.height); // NO I18N
            }
            if($dropodwnpos.width + $parentpos.left + $parentpos.width < wwidth){
                $dropdown.css('left',$parentpos.left); // NO I18N
            }else{
                $dropdown.css('left',$parentpos.left - $parentpos.width); // NO I18N
            }
        }
        element.append(icontemplate);
        createdropdown(element,icontemplate,function(e){
           var selectedicon =  $(e.target).attr('data-value');  // NO I18N
           
           callback(selectedicon);
        });
        var $window = $(window);
        $window.on('click.zcicondropdown',function(){   // NO I18N
            var $window = $(window);
            icontemplate.zremove();
            $window.off('click.zcicondropdown'); // NO I18N
        })


    }  
})();;(function(){
    var GradientBuilder = function(options){
        
        this.options = options;

        this.mousepointer = { x: 0 , y: 0, startx: 0, starty: 0, startelx: 0 };

        this.init = function(){
            var template = '<div class="z-gradient-input">' +
                                '<div class="z-gradient-slider">' +
                                    '<div class="z-gradient-slideline"></div>' +
                                '</div>' +
                                 '<div class="z-gradient-addstop">+</div>' +
                            '</div>';
            var targetelement = document.querySelector(this.options.container);
            this.options.container = targetelement;
            targetelement.innerHTML = template;
            this.attachaddstop();
        }

        this.setbg = function(value){
            var style = value || this.calculate(this.options.container.querySelectorAll('.z-gradient-stop')); // NO I18N
            var line = this.options.container.querySelector('.z-gradient-slideline'); // NO I18N
            if(style){
                line.style.backgroundImage = 'linear-gradient(to right, ' + style + ')'; // NO I18N
            }else{
                line.style.backgroundImage = '';
            }
        }

        this.attachaddstop = function(){
            var element = this.options.container.querySelector('.z-gradient-slideline'); // NO I18N
            element.addEventListener('click',this.addstop.bind(this));
        }

        this.addstop = function(e, percentage , color){
        //    var adjustneed = !percentage;
            var clickedel = !percentage;
            var display = percentage || this.getpercentage(e); // NO I18N
            var right = 100 - parseInt(display) + '%'; // NO I18N
            var bg = color || 'rgba(255,255,255,1)';  // NO I18N
        //    adjustneed && this.adjustothers();
            var template = '<div tabindex="0" title="' + display + '" class="z-gradient-stop" style="right:' + right + ';background-color:' + bg + '" data-bgcolor="' + bg + '">' +
                                '<span class="z-gradient-tooltip">' +
                                    '<span class="z-gradient-stoppercentage">' + I18n.getMsg('crm.button.delete') + '</span>' +
                                    '<span class="z-gradient-stopcaret"></span>' +
                                '</span>' + 
                             '</div>';
            var targetelement = this.options.container.querySelector('.z-gradient-slider'); // NO I18N
            var stopele = this.html(template);
            targetelement.insertAdjacentElement('beforeend', stopele ); // NO I18N
            this.attachstopitem();
            clickedel && this.options.onClick(stopele);
        }
        this.adjustothers = function(){
            var elements = this.options.container.querySelectorAll('.z-gradient-stop'); // NO I18N
            var minmax = function(n) { return 100 - parseInt(n.style.right); }
            var max = Math.max.apply(Math , Array.prototype.slice.call(elements).map(minmax) );
            var min = Math.min.apply(Math , Array.prototype.slice.call(elements).map(minmax));
            var dist = max - min;
            var len = elements.length;
            if(max === 100){
                if(dist !== 100){
                    for(var i = 0 ; i < len ; i ++){
                        var current = 100 - parseInt(elements[i].style.right);
                        elements[i].style.right = 100 - current + min + '%';
                    }
                }else{
                    var per =  dist / len;
                    var right = 0 ;
                    for(var i = 0 ; i < len ; i ++){
                        right = right + parseInt(per) ;
                        elements[i].style.right = right + '%';
                    }
                }
            }
        }
        this.getpercentage = function(e){
            var rect = e.target.getBoundingClientRect();
            var dist =  e.clientX - rect.left;
            var width = rect.width;
            var percentage = dist / width * 100;
            return Math.round(percentage) + '%';
        }
        this.mousemove = function(e){
            var element = this.options.container.querySelector('.z-gradient-moving'); // NO I18N
            if(!element || Math.abs(e.pageX - this.mousepointer.startx) < 3){return;}
            element.classList.add('z-gradient-startmoving'); // NO I18N
            var diff = e.pageX - this.mousepointer.startx;
            if(!element || !diff) { return; }
            var slider = this.options.container.querySelector('.z-gradient-slider'); // NO I18N
            var sliderwidth = slider.offsetWidth;
            var per = sliderwidth * 1 / 100 ;
            var percentage = diff / per;
            var rightside = this.mousepointer.startelx;
            var result =  rightside - percentage ;
            if(! (result > 0) ||  !(result < 100) ){ // this.mousepointer.minmax.min  this.mousepointer.minmax.max
                result = result < this.mousepointer.minmax.min ? this.mousepointer.minmax.min : result;
                result = result > this.mousepointer.minmax.max ? this.mousepointer.minmax.max : result;
            }
            result = Math.round(result) 
            element.style.right = result + '%'; // NO I18N
           // element.querySelector('.z-gradient-stoppercentage').innerHTML = 100 - result + '%'; // NO I18N
            var style = this.calculate(this.options.container.querySelectorAll('.z-gradient-stop')); // NO I18N
            this.setbg(style);
            this.options.onChange &&  this.options.onChange(style);
        }
        this.movestart = function(e){
            if(e.which !== 1){
                return;
            }
            e.target.classList.add('z-gradient-moving'); // NO I18N
            this.mousepointer.startx = e.pageX;
            this.mousepointer.starty = e.pageY;
            this.mousepointer.startelx = parseInt(e.target.style.right || 0);
            this.mousepointer.minmax = this.minmax(this.options.container.querySelectorAll('.z-gradient-stop:not(.z-gradient-moving)') , this.options.container.querySelector('.z-gradient-moving')); // NO I18N
            var movehandler = this.mousemove.bind(this);
            var clickhandler = this.options.onClick;
            var stophandler = this.options.onStop;
            window.addEventListener('mousemove',movehandler);
            window.addEventListener('mouseup',function(){
                e.target.classList.remove('z-gradient-moving'); // NO I18N
                if(e.target.classList.value.indexOf('z-gradient-startmoving') > -1){ // NO I18N
                    e.target.classList.remove('z-gradient-startmoving'); // NO I18N
                    e.stopPropagation();
                    stophandler && stophandler(e.target);
                }else{
                    clickhandler && clickhandler(e.target);
                }
                window.removeEventListener('mousemove',movehandler,false); // NO I18N
                // eslint-disable-next-line zstandard/no-reserved-words
                window.removeEventListener('mouseup',arguments.callee,false); // NO I18N
            });
        }

        this.remove = function(el){
            el.remove();
            var style = this.calculate(this.options.container.querySelectorAll('.z-gradient-stop')); // NO I18N
            this.setbg(style);
           // this.options.onChange &&  this.options.onChange(style);
            this.options.onRemove && this.options.onRemove(style);
        }
        this.deletestop = function(e){
            var el = e.currentTarget.parentElement;
            this.remove(el);
            e.stopPropagation();
        }
        this.keypress = function(e){
            if(e.keyCode === 8){
                this.remove(e.target);
            }
            e.stopPropagation();
            e.preventDefault();
        }
        this.attachstopitem = function(){
            var element = this.options.container.querySelector('.z-gradient-stop:not(.z-gradient-move)'); // NO I18N
            element.classList.add('z-gradient-move'); // NO I18N
            element.addEventListener('mousedown',this.movestart.bind(this));
            element.addEventListener('keydown', this.keypress.bind(this));
            element.querySelector('.z-gradient-tooltip').addEventListener('mousedown',this.deletestop.bind(this)); // NO I18N

            element.addEventListener('contextmenu' , function(e){
                e.preventDefault();

                var target = e.currentTarget;

                var tip = target.querySelector('.z-gradient-tooltip') // NO I18N

                tip.style.display = 'block'; // NO I18N

                var closetip = function(){
                    tip.style.display = 'none'; // NO I18N
                    window.removeEventListener('click' , closetip);
                }

                window.addEventListener('click',closetip);
               

                // e.target.app

                return false;
            })
            
        }
        this.getvalue = function(){
            return this.calculate(this.options.container.querySelectorAll('.z-gradient-stop')); // NO I18N
        }
        this.setvalue = function(split){
            var splitlen = split.length;
            this.removeall();
            for( var i = 0 ; i < splitlen ; i++){
                var percentage = split[i].substring(split[i].lastIndexOf(' '));
                var csplit = split[i].replace(percentage,'');
                this.addstop(null ,percentage , csplit);
            }
            this.setbg();
        }
        this.removeall = function(){
            var element = this.options.container.querySelectorAll('.z-gradient-stop'); // NO I18N
            var ellen = element.length;
            for(var i = 0 ; i < ellen ; i++){
                element[i].remove();
            }
        }
        
        this.init();
        return this;
    }
    GradientBuilder.prototype.html = function(html){
        var template = document.createElement('template');
        html = html.trim(); // Never return a text node of whitespace as the result
        template.innerHTML = html;
        return template.content.firstChild;
    }
    GradientBuilder.prototype.minmax = function(elements, current){
        var min = 0, max = 100, position = parseInt(current.style.right || 0);  
        var elementlen = elements.length;
        for(var i = 0 ; i < elementlen ; i++){
            var right = parseInt( elements[i].style.right || 0 );
            if(min < right && right < position) { min = right };
            if( max > right && right > position ) { max = right };
        }
        return {
            min: min !== 0 ? min - 1 : 0, max: max !== 100 && max !== 0  ? max - 1 : 100
        }
    }
    GradientBuilder.prototype.calculate = function(elements){
        var elementslen = elements.length;
        if(this.options.sortmethod){
            elements = this.options.sortmethod(elements);
        }
        var style = ''
        for(var i = 0 ; i < elementslen ; i++){
            style += elements[i].dataset.bgcolor || '#FFFFFF'; // NO I18N
            style += ' ' + ( 100 - parseInt(elements[i].style.right)) + '%' ;
            if(elementslen - 1 !== i ){
                style += ',';
            }
        }
        return style;
    }
    
    window.ZGradientBuilder = GradientBuilder;
})();;(function(){
    var DegreePicker = function(options){
        this.options = options;

        this.mousepointer = [];

        this.init = function(){
            var template = '<div class="z-degree-picker">' +
                                '<div class="z-degree-angle"><div class="z-degree-angle-pointer"></div></div>' +
                           '</div>';
            var targetelement = document.querySelector(this.options.container);
            this.options.container = targetelement;
            targetelement.innerHTML = template;
            this.attachangle();
        }
        this.mousemove = function(e){
            var offset = [e.x , e.y];
            var deg = this.calculate(offset , this.mousepointer);
            this.options.container.querySelector('.z-degree-angle').style.transform = "translateZ(0px) rotate(-" + deg + "deg)"; // NO I18N
            this.options.onChange && this.options.onChange(deg);
        }
        this.mousestart = function(e){
            var target = this.options.container.querySelector('.z-degree-picker'); // NO I18N
            this.mousepointer = this.getCenter(target);
            target.classList.add('z-degree-moving'); // NO I18N
            var handler = this.mousemove.bind(this);
            handler(e);
            var stophandler = this.options.onStop;
            window.addEventListener('mousemove', handler); // NO I18N
            window.addEventListener('mouseup', function(){ // NO I18N
                stophandler && stophandler();
                target.classList.remove('z-degree-moving'); // NO I18N
                window.removeEventListener('mousemove',handler, false); // NO I18N
                // eslint-disable-next-line zstandard/no-reserved-words
                window.removeEventListener('mouseup', arguments.callee , false); // NO I18N
            })
        }
        this.attachangle = function(){
            var element = this.options.container.querySelector('.z-degree-picker'); // NO I18N
            element.addEventListener('mousedown',this.mousestart.bind(this));
        }
        this.setvalue = function(deg){
            deg = 360 - deg;
            this.options.container.querySelector('.z-degree-angle').style.transform = "translateZ(0px) rotate(-" + deg + "deg)"; // NO I18N
        }
        this.init();
    }
    DegreePicker.prototype.calculate2 = function(offset ){
        var x2 = offset.x , y2 = offset.y;
        var radians = Math.atan2(y2 - 15 , x2 - 15);
        var degree = radians * (180 / Math.PI);
        degree = 90 + degree;
        degree < 0 && (degree = 360 + degree);
        degree = Math.round(degree);
        return degree;
    }

    DegreePicker.prototype.calculate = function(vector, center) {
         function radToDeg(rad) {
            return rad * (180 / Math.PI);
        }
        var x = vector[0] - center[0];
        var y = vector[1] - center[1];
        var deg = radToDeg(Math.atan2(x, y));
        deg -= 180;
        if(deg < 0) {
             deg += 360
        };
        return Math.round(deg);
  }
    DegreePicker.prototype.getCenter = function(element){
        var rect = element.getBoundingClientRect();
        return [
         rect.left + rect.width / 2,
         rect.top + rect.height / 2
        ];
    }
    window.ZDegreePicker = DegreePicker;
})();;(function(){
  var canvasGuide = function(options){
      var self_ = this;
      this.xnodes = {};
      this.ynodes = {};
      this.xPoints = [];
      this.yPoints = [];
      this.tolerance = 8;
      this.snapingElements = [];
      this.xSnapElments = [];
      this.ySnapElments = [];
      this.dragElmRect = undefined;
      this.xMarks = {};
      this.yMarks = {};
      this.allElements = [];
      this.vClass = 'zcguide-y';//NO I18N
      this.hClass = 'zcguide-x';//NO I18N
      this.appendGuideTo = 'body';//NO I18N
      this.selector = undefined;
      this.defaultClass = ".zcguide";//NO I18N
      this.dragElement = undefined;
      this.resizeElement = undefined;
      this.noDragElement = false;
      this.dragElementParent = undefined;
      this.allElmRects = [];
      this.dragSideH = "left";//NO I18N
      this.dragSideV = "top";//NO I18N

      // this.smartGuides = {};
      this.init =  function(options){
        for (var i in options) {
            self_[i] = options[i] || self_[i];
        }
        self_.dragElmRect = self_.getRect(self_.dragElement);
        self_.dragElmParentRect = self_.getRect(self_.dragElementParent);
        self_.reinit();
      }
      this.reinit = function(){
   //       var selector = $(self_.selector);
//          var parentSelector = $(self_.dragElementParent); 
          // eslint-disable-next-line webperf/no-global-variables
//          self_.allElements = $(self_.selector);
    	  if(self_.selector){
    		  self_.allElements = $(self_.selector);
    	  } else {
    		// eslint-disable-next-line webperf/no-global-variables
    		  self_.allElements = self_.dragElementParent.children(".zcanvas");//NO I18N
    	  }
          
          var allElmLen = self_.allElements.length;
          for(var i = 0;i < allElmLen;i++){
        	  	var elmRect = self_.getRect(self_.allElements[i]); 
        	  	self_.allElmRects.push(elmRect);
          }
          self_.getxypoints();//NO I18N
          
          if(!self_.resize){
            self_.equalSpacePoints();
            var sides = {};
            sides.top = [];
            sides.bottom = [];
            sides.left = [];
            sides.right = [];
            for(var i in sides){
              var addClass = i + "-guide zcdistanceguide";//NO I18N
              var styleObj = {};
              styleObj.top = 1;
              styleObj.left = 1;
              // styleObj.height = 1;
              // styleObj.width = 1;
              var guide = self_.createEquSpace(styleObj, addClass, styleObj.height, false);
              self_[i + "-guide"] = guide;//NO I18N
              $(self_.appendGuideTo).append(guide);
            }
          }
      }

      this.mockGuides = [];
      this.formPositionObjNew =  function(dimVal, rect, type, position){
          var valObj = {};
//          valObj.elm = selector;
          valObj.dim = dimVal || undefined;
          valObj.rect = rect;
          valObj.type = type;
          switch(position){
            case 0:
              valObj.posi = "left";//NO I18N
            break;
            case 1:
              valObj.posi = "middle";//NO I18N
              break;
            case 2:
              valObj.posi = "right";//NO I18N
              break;
          }
          return valObj;
      }
      this.formPositionObj =  function(selector, dimVal, type){
	    	  var valObj = {};
	    	  valObj.elm = selector;
	    	  valObj.dim = dimVal || undefined;
	    	  valObj.rect = self_.getRect(selector, type);
	    	  valObj.type = type;
	    	  
	    	  return valObj;
    	  }
      this.getxypoints = function(){
    	  	var allElmRectsLength = self_.allElmRects.length;
    	  	function pushToObject(array, pushArray){
        		var arrayLen = array.length;
        		for(var i = 0;i < arrayLen; i++){
        			var valObj = self_.formPositionObjNew(array[i],eachRects,undefined,i);
        			pushArray.push(valObj);
        		}
        }
    	  	for(var i = 0;i < allElmRectsLength; i++){
    	  		var eachRects = self_.allElmRects[i];
    	  		var outlineWidth = 0;
    	  		var x = [eachRects.left - outlineWidth, eachRects.left + eachRects.width / 2, eachRects.right];
    	  		var y = [eachRects.top - outlineWidth, eachRects.top + eachRects.height / 2, eachRects.bottom];
            pushToObject(x, self_.xPoints);
            pushToObject(y, self_.yPoints);
    	  	}
    	  }
      
      this.getxynodes = function(selector, type){
    	  var pos = selector.offset();
          var width = selector.outerWidth();
          var height = selector.outerHeight();
          var outlineWidth = parseInt($(self_.dragElement).css("outline-width"));
          if(type === "parent"){
        	  	  var x = [0, width, Math.round(width / 2)];
              var y = [0, height, Math.round(height / 2)];
          } else {
        	  	 var x = [pos.left - outlineWidth, pos.left + width, Math.round(pos.left + width / 2)];
             var y = [pos.top - outlineWidth, pos.top + height, Math.round(pos.top + height / 2)];
          }
          
          function assignobj(valueArray , pointsArray, type){
              var arrlen = valueArray.length; 
              for(var i = 0 ; i < arrlen; i++){
                  var valObj = self_.formPositionObj(selector,valueArray[i], type);
                  pointsArray.push(valObj);
              }
          }
          assignobj(y,self_.yPoints, type);
          assignobj(x,self_.xPoints, type);
      }

      this.equalSpacePoints = function(){
        var allNodesLength = self_.allElements.length;
        for(var i = 0;i < allNodesLength;i++){
          var distrubNode = self_.distrubNodeAllside(self_.allElmRects, self_.allElmRects[i], "position");//NO I18N
          for(var key in distrubNode){
            var eachSide = distrubNode[key];
            if(eachSide.length > 0){
              self_.createEqualSpaceNode(self_.allElmRects[i], eachSide, key);
            }
          }
        }
      }
      this.createEqualSpaceNode = function(currentElmRect, distrubNodesRect, side){
        var disNodeLen = distrubNodesRect.length;
//        var currentElmRect = self_.getRect(currentElm);
//        var distrubNodesRect= canvasObjUtils._.map(distrubNodes, function(d){
//          return self_.getRect($(d));
//        });
        if(disNodeLen === 0){
          return;
        }
        if(side === "left" || side === "right"){
          var closeNodeRect = canvasObjUtils._.max(distrubNodesRect, function(d){return d.left});
        } else {
          var closeNodeRect = canvasObjUtils._.min(distrubNodesRect, function(d){return d.top});
        }
        
        if(closeNodeRect){
          var allDistrubNode = distrubNodesRect.concat(currentElmRect);
          switch(side){
            case "right":
              var bwspace = Math.abs(currentElmRect.right - closeNodeRect.left);
              var orderedByRect = canvasObjUtils._.sortBy(allDistrubNode, function(d){return d.left});
              var orderedByRectLen = orderedByRect.length;
              for(var i = 0; i < orderedByRectLen;i++){
                var eachDistrubNodeRect = orderedByRect[i];
                var dim = eachDistrubNodeRect.right + bwspace;
                var rect = {"left": dim, "right": dim + 1, "top":eachDistrubNodeRect.top, "bottom":eachDistrubNodeRect.bottom, "width": 1, "height":eachDistrubNodeRect.height };//NO I18N
                var newObj = self_.equlSpactObj(dim,rect,distrubNodesRect,bwspace,side);
                // self_.xPoints.push(newObj);
                self_.pushToarray("xPoints", newObj);//NO I18N
              }
              break;
            case "left":
              var bwspace = Math.abs(currentElmRect.left - closeNodeRect.right);
              var orderedByRect = canvasObjUtils._.sortBy(allDistrubNode, function(d){return d.left * -1});
              var orderedByRectLen = orderedByRect.length;
              for(var i = 0; i < orderedByRectLen;i++){
                var eachDistrubNodeRect = orderedByRect[i];
                var dim = eachDistrubNodeRect.left - bwspace;
                var rect = {"left": dim, "right": dim + 1, "top":eachDistrubNodeRect.top, "bottom":eachDistrubNodeRect.bottom, "width": 1, "height":eachDistrubNodeRect.height };//NO I18N
                var newObj = self_.equlSpactObj(dim,rect,distrubNodesRect,bwspace,side);
                // self_.xPoints.push(newObj);
                self_.pushToarray("xPoints", newObj);//NO I18N
              }
              break;
            case "top":
              var bwspace = Math.abs(currentElmRect.top - closeNodeRect.bottom);
              var orderedByRect = canvasObjUtils._.sortBy(allDistrubNode, function(d){return d.bottom});
              var orderedByRectLen = orderedByRect.length;
              for(var i = 0; i < orderedByRectLen;i++){
                var eachDistrubNodeRect = orderedByRect[i];
                var dim = eachDistrubNodeRect.top - bwspace;
                var rect = {"left": eachDistrubNodeRect.left, "right": eachDistrubNodeRect.left + eachDistrubNodeRect.width, "top":dim, "bottom":dim + 1, "width": eachDistrubNodeRect.width, "height":1 };//NO I18N
                var newObj = self_.equlSpactObj(dim,rect,distrubNodesRect,bwspace,side);
                // self_.yPoints.push(newObj);
                self_.pushToarray("yPoints", newObj);//NO I18N
              }
              break;
            case "bottom":
              var bwspace = Math.abs(currentElmRect.bottom - closeNodeRect.top);
              var orderedByRect = canvasObjUtils._.sortBy(allDistrubNode, function(d){return d.top});
              var orderedByRectLen = orderedByRect.length;
              for(var i = 0; i < orderedByRectLen;i++){
                var eachDistrubNodeRect = orderedByRect[i];
                var dim = eachDistrubNodeRect.bottom + bwspace;
                var rect = {"left": eachDistrubNodeRect.left,"right": eachDistrubNodeRect.left + eachDistrubNodeRect.width, "top":dim, "bottom":dim + 1, "width": eachDistrubNodeRect.width, "height":1 };//NO I18N
                var newObj = self_.equlSpactObj(dim,rect,distrubNodesRect,bwspace,side);
                self_.pushToarray("yPoints", newObj);//NO I18N
              }
              break;
          }
        }
      }

      this.pushToarray =  function(array, obj){
        var alreadyExistsNode = canvasObjUtils._.filter(self_[array], function(d){return d.dim === obj.dim && d.side === obj.side && d.space === obj.space && d._type === "eqlSpace" && d.rect.left === obj.rect.left && d.rect.top === obj.rect.top});//NO I18N
        var nodeExistsLen = alreadyExistsNode.length;
        if(nodeExistsLen > 0){
          var uniqLeft = function(x){ return x.left};
          var uniqTop = function(x){ return x.top};
          for(var i = 0; i < nodeExistsLen; i++){
            var existsNode = alreadyExistsNode[i];
            var mergeArray = existsNode.allDistrubNodes.concat(obj.allDistrubNodes);
            if(array === "xPoints"){//NO I18N
              var destArray = canvasObjUtils._.uniq(mergeArray, uniqLeft);  
            } else {
              var destArray = canvasObjUtils._.uniq(mergeArray, uniqTop);
            }
            
            existsNode.allDistrubNodes = destArray;
          }
        } else {
          self_[array].push(obj);  
        }
      }

      this.equlSpactObj = function(dim, rect, distrubNodes,equSpace,side){
        switch(side){
          case "bottom":
            var distrubNodeAllside = self_.distrubNodeAllside(self_.allElmRects, rect, "position");//NO I18N
            var distrubNodes = canvasObjUtils._.map(distrubNodeAllside.top, function(d){return d});
          break;
          case "top":
            var distrubNodeAllside = self_.distrubNodeAllside(self_.allElmRects, rect, "position");//NO I18N
            var distrubNodes = canvasObjUtils._.map(distrubNodeAllside.bottom, function(d){return d});
            break;
          case "left":
            var distrubNodeAllside = self_.distrubNodeAllside(self_.allElmRects, rect, "position");//NO I18N
            var distrubNodes = canvasObjUtils._.map(distrubNodeAllside.right, function(d){return d});
            break;
          case "right":
            var distrubNodeAllside = self_.distrubNodeAllside(self_.allElmRects, rect, "position");//NO I18N
            var distrubNodes = canvasObjUtils._.map(distrubNodeAllside.left, function(d){return d});
            break;
        }
        var newObj = {};
        newObj.dim = dim;
        newObj.rect = rect;
        newObj._type = "eqlSpace";//NO I18N
        newObj.allDistrubNodes = distrubNodes;
        newObj.space = equSpace;
        newObj.side = side;
        return newObj;
      }
      
      this.distrubNodeAllside = function(allElmRect, currentNode, currentNodeVal){
        var returnObj = {};
        returnObj.left = [];
        returnObj.right = [];
        returnObj.top = [];
        returnObj.bottom = [];
        if(currentNodeVal === "position"){
          var currentNodeStartY = currentNode.top;
          var currentNodeStartX = currentNode.left;
          var currentNodeEndX = currentNode.right;
          var currentNodeEndY = currentNode.bottom;
        } else {
          var currentNodeStartY = $(currentNode).offset().top;
          var currentNodeStartX = $(currentNode).offset().left;
          var currentNodeEndX = currentNodeStartX + $(currentNode).outerWidth();
          var currentNodeEndY = currentNodeStartY + $(currentNode).outerHeight();
        }
        var allelmlen = allElmRect.length; 
        for(var i = 0; i < allelmlen; i++){ 
            var checkingNode = allElmRect[i];
            var checkingNodeStartY = checkingNode.top;
            var checkingNodeStartX = checkingNode.left;
            var checkingNodeEndY = checkingNodeStartY + checkingNode.height;
            var checkingNodeEndX = checkingNodeStartX + checkingNode.width;
            
            if(checkingNodeStartX === currentNodeStartX && checkingNodeStartY === currentNodeStartY){
                continue;
            }
            //right and left side distrubNode
            if(checkingNodeStartY >= currentNodeStartY && checkingNodeStartY < currentNodeEndY || 
                        checkingNodeStartY < currentNodeStartY && checkingNodeEndY > currentNodeStartY) {
                if(checkingNodeStartX > currentNodeStartX){
                    returnObj.right.push(checkingNode);
                } else{
                    returnObj.left.push(checkingNode);
                }
            } else if(checkingNodeStartX >= currentNodeStartX && checkingNodeStartX < currentNodeEndX || 
                        checkingNodeStartX < currentNodeStartX && checkingNodeEndX > currentNodeStartX) {
                if(checkingNodeStartY > currentNodeStartY){
                    returnObj.bottom.push(checkingNode);
                } else {
                    returnObj.top.push(checkingNode);
                }
            }
        }
        return returnObj;
      }

      this.setSmartGuid = function(dragElmPosi){
      //vertical guide
          // var snapingElements = [];
//          var outlineWidth = parseInt($(self_.dragElement).css("outline-width"));
          var snapSpace = 10;
          var xPointsLength = self_.xPoints.length;
          var x1 = dragElmPosi.left;
          var x2 = dragElmPosi.left + dragElmPosi.w / 2;
          var x3 = x1 + dragElmPosi.w;

          for(var i = 0; i < xPointsLength; i++){
              var eachPoint = self_.xPoints[i];
              var dim = eachPoint.dim;
              var element = eachPoint.elm;
              var calRect = eachPoint.rect || self_.getRect(element);
              if(eachPoint._type === "eqlSpace"){//NO I18N
            	  	 if( dim > x1 - snapSpace && dim < x1 + snapSpace){
                      self_.xSnapElments.push({
                          pos: "left",//NO I18N
                          left: dim,
//                          node: element,
                          rect: calRect,
                          type: "eqlSpace"//NO I18N
                      });
                  }
              } else {
            	  	 if( dim > x1 - snapSpace && dim < x1 + snapSpace){
                      self_.xSnapElments.push({
                          pos: "left",//NO I18N
                          left: dim,
//                          node: element,
                          rect: calRect
                      });
                  } 
                  if(dim > x2 - snapSpace / 2 && dim < x2 + snapSpace / 2){
                      self_.xSnapElments.push({
                          pos: "middle",//NO I18N
                          left: dim - dragElmPosi.w / 2,
//                          node: element,
                          rect: calRect
                      });
                  } 
                  if(dim > x3 - snapSpace && dim < x3 + snapSpace){
                      self_.xSnapElments.push({
                          pos: "right",//NO I18N
                          left: dim - dragElmPosi.w,
//                          node: element,
                          rect: calRect
                      });
                  }
              }
              

          }
          var yPointsLength = self_.yPoints.length;
          var y1 = dragElmPosi.top;
          var y2 = dragElmPosi.top + dragElmPosi.h / 2;
          var y3 = y1 + dragElmPosi.h;
//          self_.yPoints = canvasObjUtils._.sortBy(self_.yPoints, function(d){return d.dim});
          for(var i = 0; i < yPointsLength; i++){
              var eachPoint = self_.yPoints[i];
              var dim = eachPoint.dim;
//              var element = eachPoint.elm;
              if(eachPoint._type === "eqlSpace" && (eachPoint.rect.right < dragElmPosi.left || eachPoint.rect.left > dragElmPosi.left + dragElmPosi.w)){
                continue;
              }
              if(eachPoint._type === "eqlSpace"){
            	  	 if( dim > y1 - snapSpace && dim < y1 + snapSpace){
                      self_.ySnapElments.push({
                          pos: "top",//NO I18N
                          top: dim,
//                          node: element,
                          rect: calRect,
                          type: "eqlSpace"//NO I18N
                      });
                  } 
              } else {
            	     if( dim > y1 - snapSpace && dim < y1 + snapSpace){
                      self_.ySnapElments.push({
                          pos: "top",//NO I18N
                          top: dim,
//                          node: element,
                          rect: calRect
                      });
                  } 
                  if(dim > y2 - snapSpace / 2 && dim < y2 + snapSpace / 2){
                      self_.ySnapElments.push({
                          pos: "middle",//NO I18N
                          top: dim - dragElmPosi.h / 2,
//                          node: element,
                          rect: calRect
                      });
                  } 
                  if(dim > y3 - snapSpace && dim < y3 + snapSpace){
                      self_.ySnapElments.push({
                          pos: "bottom",//NO I18N
                          top: dim - dragElmPosi.h,
//                          node: element,
                          rect: calRect
                      });
                  }
              }
          }
        }
      this.clear = function(){
    	  	  // self_.xPoints = [];
          // self_.yPoints = [];
          // self_.snapingElements = [];
          // self_.xSnapElments = [];
          // self_.ySnapElments = [];
          // self_.xMarks={};
          // self_.yMarks={};

          self_.xPoints = null;
          self_.yPoints = null;
          self_.snapingElements = null;
          self_.xSnapElments = null;
          self_.ySnapElments = null;
          self_.xMarks = null;
          self_.yMarks = null;
          $(self_.defaultClass).remove();
          $(".zcdistanceguide").remove();
      }
      this.chooseMatchingPoints = function(nodeDim, obj){
          if(nodeDim.left <= obj.x.left){
            var diff = Math.abs(nodeDim.left - obj.x.left);
            self_.xMarks.x1 = nodeDim.left + diff;
            self_.xMarks.x2 = self_.xMarks.x1 + nodeDim.w / 2;
            self_.xMarks.x3 = self_.xMarks.x1 + nodeDim.w;
          } else if(nodeDim.left >= obj.x.left) {
            var diff = Math.abs(nodeDim.left - obj.x.left);
            self_.xMarks.x1 = nodeDim.left - diff;
            self_.xMarks.x2 = self_.xMarks.x1 + nodeDim.w / 2;
            self_.xMarks.x3 = self_.xMarks.x1 + nodeDim.w;
          }
          if(nodeDim.top <= obj.y.top){
            var diff = Math.abs(nodeDim.top - obj.y.top);
            self_.yMarks.y1 = nodeDim.top + diff;
            self_.yMarks.y2 = self_.yMarks.y1 + nodeDim.h / 2;
            self_.yMarks.y3 = self_.yMarks.y1 + nodeDim.h;
          } else if(nodeDim.top >= obj.y.top) {
            var diff = Math.abs(nodeDim.top - obj.y.top);
            self_.yMarks.y1 = nodeDim.top - diff;
            self_.yMarks.y2 = self_.yMarks.y1 + nodeDim.h / 2;
            self_.yMarks.y3 = self_.yMarks.y1 + nodeDim.h;
          }
      }
      this.chooseMatchingPointsResize = function(nodeDim, obj){
        if(obj.x){
          var node = obj.x;
          var right = nodeDim.left + nodeDim.w;
          if(node.pos === "left"){ 
            var diff = Math.abs(node.left - nodeDim.left);
            if(nodeDim.left < node.left){
              self_.xMarks.x1 = nodeDim.left + diff;
            } else {
              self_.xMarks.x1 = nodeDim.left - diff;
            }
          } else if(node.pos === "right") {
            var diff = Math.abs(node.right - right);
            if(right < node.right){
              self_.xMarks.x3 = right + diff;
            } else {
              self_.xMarks.x3 = right - diff;
            }
          }
        }
        if(obj.y){
          var node = obj.y;
          var bottom = nodeDim.top + nodeDim.h;
          if(node.pos === "top"){ 
            var diff = Math.abs(node.top - nodeDim.top);
            if(nodeDim.top < node.top){
              self_.yMarks.y1 = nodeDim.top + diff;
            } else {
              self_.yMarks.y1 = nodeDim.top - diff;
            }
          } else if(node.pos === "bottom") {
            var diff = Math.abs(node.bottom - bottom);
            if(bottom < node.bottom){
              self_.yMarks.y3 = bottom + diff;
            } else {
              self_.yMarks.y3 = bottom - diff;
            }
          }
        }
      }
      this.setResizeSmartGuid = function(dragElmPosi,ui){
      //vertical guide
          // var snapingElements = [];
          var snapSpace = self_.tolerance;
          var xPointsLength = self_.xPoints.length;
          var yPointsLength = self_.yPoints.length;
          var x = {};
          var y = {};
          // var x3 = x1 + dragElmPosi.w;
          var axis = ui.helper.data("uiResizable").axis;//NO I18N
          switch(axis){
            case "e":
              x.x3 = dragElmPosi.left + dragElmPosi.w
            break;
            case "s":
              y.y3 = dragElmPosi.top + dragElmPosi.h;
              break;
            case "w":
              x.x1 = dragElmPosi.left;
              break;
            case "n":
              y.y1 = dragElmPosi.top;
              break;
            case "ne":
              y.y1 = dragElmPosi.top;
              x.x3 = dragElmPosi.left + dragElmPosi.w
              break;
            case "se":
              y.y3 = dragElmPosi.top + dragElmPosi.h;
              x.x3 = dragElmPosi.left + dragElmPosi.w
              break;
            case "sw":
              y.y3 = dragElmPosi.top + dragElmPosi.h;
              x.x1 = dragElmPosi.left;
              break;
            case "nw":
              y.y1 = dragElmPosi.top;
              x.x1 = dragElmPosi.left;
              break;
          }
          for(var j in x){
            var point = x[j];
            for(var i = 0; i < xPointsLength; i++){
              var eachPoint = self_.xPoints[i];
              var dim = eachPoint.dim;
              var element = eachPoint.elm;
              var calRect = eachPoint.rect || self_.getRect(element);
              if( dim > point - snapSpace && dim < point + snapSpace){
                  if(j === "x1"){
                    self_.xSnapElments.push({
                        left: dim,
                        node: element,
                        rect: calRect,
                        pos: "left"//NO I18N
                    });
                  } else if(j === "x3"){
                    self_.xSnapElments.push({
                        right: dim,
                        node: element,
                        rect: calRect,
                        pos: "right"//NO I18N
                    });
                  }
              }
            }  
          }
          for(var j in y){
            var point = y[j];
            for(var i = 0; i < yPointsLength; i++){
              var eachPoint = self_.yPoints[i];
              var dim = eachPoint.dim;
              var element = eachPoint.elm;
              var calRect = eachPoint.rect || self_.getRect(element);
              if( dim > point - snapSpace && dim < point + snapSpace){
                  if(j === "y1"){
                    self_.ySnapElments.push({
                        top: dim,
                        node: element,
                        rect: calRect,
                        pos: "top"//NO I18N
                    });
                  } else if(j === "y3"){
                    self_.ySnapElments.push({
                        bottom: dim,
                        node: element,
                        rect: calRect,
                        pos: "bottom"//NO I18N
                    });
                  }
              }
            }  
          }

          
        }
      this.addResizeGuides = function(event, ui){
          this.snapingElements = [];
          self_.xSnapElments = [];
          self_.ySnapElments = [];
          self_.xMarks = {};
          self_.yMarks = {};
          var helperNode = ui.helper;
          var elementOffset = ui.offset;
          $(self_.defaultClass).remove();

          var nodeDim = {};
          // eslint-disable-next-line webperf/layout-thrashing
          nodeDim.left = elementOffset.left;
          // eslint-disable-next-line webperf/layout-thrashing
          nodeDim.top = elementOffset.top;
          // eslint-disable-next-line webperf/layout-thrashing
          nodeDim.w = ui.size.width;
          // eslint-disable-next-line webperf/layout-thrashing
          nodeDim.h = ui.size.height;
          
          self_.dragElmRect = self_.getRect(helperNode,undefined,nodeDim);
          self_.setResizeSmartGuid(nodeDim,ui);
          if(self_.xSnapElments.length > 0 || self_.ySnapElments.length > 0){
        	  	var obj = {};
            obj.x = self_.xSnapElments[0] || {};
            obj.y = self_.ySnapElments[0] || {};
            self_.chooseMatchingPointsResize(nodeDim, obj, ui);
            if(self_.resize){
              var dragElmRect = self_.getRect(ui.helper);
              dragElmRect.width = nodeDim.w;
              dragElmRect.height = nodeDim.h;
            }
            self_.drawLines(obj, ui.helper, dragElmRect);
            return obj;
          }

      }
      this.addGuides = function(event, ui){
          this.snapingElements = [];
          self_.xSnapElments = [];
          self_.ySnapElments = [];
          self_.xMarks = {};
          self_.yMarks = {};
          var helperNode = ui.helper;
//          var dragSideH,dragSideV;

          var nodeDim = {};
          nodeDim.left = ui.offset.left;
          nodeDim.top = ui.offset.top;
          if(ui.helper){
        	  nodeDim.w = ui.helper.outerWidth();
       		  nodeDim.h = ui.helper.outerHeight();
          } else {
        	  	return;
          }
          var oldLeft = self_.dragElmRect.left;
          var oldTop = self_.dragElmRect.top;
          self_.dragElmRect = self_.getRect(helperNode,undefined,nodeDim);
          if(oldLeft < self_.dragElmRect.left){
            self_.dragSideH = "right";//NO I18N
          } else if(oldLeft > self_.dragElmRect.left){
        	  	self_.dragSideH = "left";//NO I18N
          }
          if(oldTop < self_.dragElmRect.top){
        	  	self_.dragSideV = "bottom";//NO I18N
          } else if(oldTop > self_.dragElmRect.top){
        	  	self_.dragSideV = "top";//NO I18N
          }
//          nodeDim.w = self_.dragElmRect.width;
//          nodeDim.h = self_.dragElmRect.height;
          
          self_.dragElmDistrubNode = self_.distrubNodeAllside(self_.allElmRects, self_.dragElmRect, "position");//NO I18N
          // $(self_.defaultClass).remove(); hide for es-lint issue
//          self_.drawSpaceLines();
          self_.setSmartGuid(nodeDim);
          if(self_.xSnapElments.length > 0 || self_.ySnapElments.length > 0){
        	  self_.xSnapElments = canvasObjUtils._.sortBy(self_.xSnapElments, function(d){return d.left});
      	  	self_.ySnapElments = canvasObjUtils._.sortBy(self_.ySnapElments, function(d){return d.top});
            var obj = {};
            obj.x = self_.getCorrectNode("left");//NO I18N
            obj.y = self_.getCorrectNode("top");//NO I18N
            
            self_.chooseMatchingPoints(nodeDim, obj, ui);
            if(self_.resize){
              var dragElmRect = self_.getRect(ui.helper);
              dragElmRect.width = nodeDim.w;
              dragElmRect.height = nodeDim.h;
            }
            $(self_.defaultClass).remove();
            self_.drawLines(obj, ui.helper, dragElmRect);
            return obj;
          }
      }
      this.getCorrectNode =  function(side){
    	  	var ySnapElmLen = self_.ySnapElments.length;
    	  	var xSnapElmLen = self_.xSnapElments.length;
    	  	if(side === "top" && ySnapElmLen > 0){//NO I18N
    	  		self_.ySnapElments = canvasObjUtils._.sortBy(self_.ySnapElments, function(d){return d.top});
    	  		if(self_.dragSideV === "bottom"){
    	  			for(var i = 0; i < ySnapElmLen; i++){
    	  				var currentNode = self_.ySnapElments[i];
    	  				if(currentNode.top >= self_.dragElmRect.top){
            	  			return currentNode;
            	  		}
    	  			}
    	  		} else {
    	  			for(var i = ySnapElmLen - 1; i >= 0; i--){
    	  				var currentNode = self_.ySnapElments[i];
    	  				if(currentNode.top <= self_.dragElmRect.top){
            	  			return currentNode;
            	  		}
    	  			}
    	  		}
    	  	} else if(side === "left" && xSnapElmLen > 0){//NO I18N
    	  		self_.xSnapElments = canvasObjUtils._.sortBy(self_.xSnapElments, function(d){return d.left});
    	  		if(self_.dragSideH === "right"){
    	  			for(var i = 0; i < xSnapElmLen; i++){
    	  				var currentNode = self_.xSnapElments[i];
    	  				if(currentNode.left >= self_.dragElmRect.left){
            	  			return currentNode;
            	  		}
    	  			}
    	  		} else {
    	  			for(var i = xSnapElmLen - 1; i >= 0; i--){
    	  				var currentNode = self_.xSnapElments[i];
    	  				if(currentNode.left <= self_.dragElmRect.left){
            	  			return currentNode;
            	  		}
    	  			}
    	  		}
    	  	} 
    	  	return {};
      }
      
      this.drawSpaceLines = function(){
	      var allSideStyles = {}
	      allSideStyles.top = {};
	      allSideStyles.right = {};
	      allSideStyles.left = {};
	      allSideStyles.bottom = {};
	      var parentHeight = self_.dragElmParentRect.height;
	      var parentWidth = self_.dragElmParentRect.width;
	      for(var i in self_.dragElmDistrubNode){
	        var eachSide = self_.dragElmDistrubNode[i];
	        var sideLen = eachSide.length;
	        var styleObj = {};
          var sideObj = {};
          
          switch(i){
            case "top":
              var elm = self_["top-guide"];//NO I18N
              if(sideLen > 0){
                var closeNodeRect = canvasObjUtils._.max(self_.dragElmDistrubNode[i], function(d){return d.top});//NO I18N
                styleObj.top = closeNodeRect.bottom;
                styleObj.left = self_.dragElmRect.left + self_.dragElmRect.width / 2;
                styleObj.height = Math.abs(self_.dragElmRect.top - closeNodeRect.bottom);
                styleObj.width = 1;
              } else {
                styleObj.top = 0;
                styleObj.left = self_.dragElmRect.left + self_.dragElmRect.width / 2;
                styleObj.height = self_.dragElmRect.top;
                styleObj.width = 1;
              }
              sideObj.showValue = styleObj.height;
              break;
            case "bottom":
              var elm = self_["bottom-guide"];//NO I18N
              if(sideLen > 0){
                var closeNodeRect = canvasObjUtils._.min(self_.dragElmDistrubNode[i], function(d){return d.top});//NO I18N
                styleObj.top = self_.dragElmRect.bottom;
                styleObj.left = self_.dragElmRect.left + self_.dragElmRect.width / 2;
                styleObj.height = Math.abs(self_.dragElmRect.bottom - closeNodeRect.top);
                styleObj.width = 1;
              } else {
                  styleObj.top = self_.dragElmRect.bottom;
                styleObj.left = self_.dragElmRect.left + self_.dragElmRect.width / 2;
                styleObj.height = Math.abs(self_.dragElmRect.bottom - parentHeight);
                styleObj.width = 1;
              }
              sideObj.showValue = styleObj.height;
              break;
            case "left":
              var elm = self_["left-guide"];//NO I18N
              if(sideLen > 0){
                var closeNodeRect = canvasObjUtils._.max(self_.dragElmDistrubNode[i], function(d){return d.left});//NO I18N
                styleObj.top = self_.dragElmRect.top + self_.dragElmRect.height / 2;
                styleObj.left = closeNodeRect.right;
                styleObj.height = 1;
                styleObj.width = Math.abs(self_.dragElmRect.left - closeNodeRect.right);
              } else {
                styleObj.top = self_.dragElmRect.top + self_.dragElmRect.height / 2;
                styleObj.left = 0;
                styleObj.height = 1;
                styleObj.width = self_.dragElmRect.left;
              }
              sideObj.showValue = styleObj.width;
              break;
            case "right":
              var elm = self_["right-guide"];//NO I18N
              if(sideLen > 0){
                var closeNodeRect = canvasObjUtils._.min(self_.dragElmDistrubNode[i], function(d){return d.left});//NO I18N
    //                var closeNodeRect = self_.getRect(closeNode);
                styleObj.top = self_.dragElmRect.top + self_.dragElmRect.height / 2;
                styleObj.left = self_.dragElmRect.right;
                styleObj.height = 1;
                styleObj.width = Math.abs(self_.dragElmRect.right - closeNodeRect.left);
              } else {
                styleObj.top = self_.dragElmRect.top + self_.dragElmRect.height / 2;
                styleObj.left = self_.dragElmRect.right;
                styleObj.height = 1;
                styleObj.width = Math.abs(parentWidth - self_.dragElmRect.right);
              }
              sideObj.showValue = styleObj.width;
          }
//	        sideObj.style = styleObj;
//	        sideObj.node = elm;
	        var innerNode = elm.find(".zcguideNote");//NO I18N
	        elm.css(styleObj);
	        innerNode.html(sideObj.showValue);
//	        allGuides.push(elm);
	      }
//	      for(var i=0; i<4;i++){
//	    	  	var eachSide = allGuides[i];
//	    	  	var node = eachSide.node;
//		    var innerNode = node.find(".zcguideNote");//NO I18N
//		    node.css(eachSide.style);
//	        innerNode.html(eachSide.showValue);
//	      }
	   }
      this.drawLines = function(obj, dragElm, dragElmRect){
    	  	  var appendContainer = $(self_.appendGuideTo);
    	  	  var dragElmRect = self_.dragElmRect;
          var equSpaceX = _.chain(self_.xPoints).filter(function(d){return d._type === "eqlSpace"}).value();//NO I18N
          var drawLinesX = _.chain(self_.xPoints).filter(function(d){return d._type !== "eqlSpace"}).value();//NO I18N
          var groupbyX = canvasObjUtils._.groupBy(drawLinesX, function(val){return val.dim});
          var groupbyequX = canvasObjUtils._.groupBy(equSpaceX, function(val){return val.dim});
          var sortLeft = function(d){return d.left};
          var checkLeft = function(d){return d.left === newLeft};
          
          var xTouchNodes = $();
          var xTouchSpcNodes = $();
          var yTouchNodes = $();
          var yTouchSpcNodes = $();
          for (var key in self_.xMarks) {
            var point = self_.xMarks[key];
            var xTouchPoints = groupbyX[point];
            if(key !== "x2"){
              var xTouchSpcPoints = groupbyequX[point];  
            } else {
              var xTouchSpcPoints;
            }
            if(xTouchPoints){
              var styleObj = {};
              xTouchPoints.push(self_.formPositionObjNew(point,self_.dragElmRect));  
              var minTop = canvasObjUtils._.min(xTouchPoints, function(d){return d.rect.top});
              var maxTop = canvasObjUtils._.max(xTouchPoints, function(d){return d.rect.top});
              var xGuidTop = minTop.rect.top;
              if(minTop.type === "parent"){ //NO I18N
            	  	var xGuidBottom = minTop.rect.top + minTop.rect.height;
              } else  {
            	  	var xGuidBottom = maxTop.rect.top + maxTop.rect.height;
              }
              
              styleObj.top = xGuidTop;
              styleObj.height = xGuidBottom - xGuidTop;
              styleObj.left = point;// add for guid adjestment
              styleObj.width = 1;
              var guide = self_.createGuide(styleObj);
              xTouchNodes = xTouchNodes.add(guide);
//              $(self_.appendGuideTo).append(guide);
            }
            if(xTouchSpcPoints){
              var xTouchSpcPointsLength = xTouchSpcPoints.length;
              for(var i = 0;i < xTouchSpcPointsLength;i++){
                var touchPoint = xTouchSpcPoints[i];
                if(touchPoint.side === "right" && key === "x3" || touchPoint.side === "left" && key === "x1" || 
                  touchPoint.rect.top > dragElmRect.bottom || touchPoint.rect.bottom < dragElmRect.top){
                    continue;
                }
                var touchPointSpace = touchPoint.space;
                // var distrubNodes = touchPoint.allDistrubNodes.concat(dragElmRect);
                var orderedPoints = canvasObjUtils._.sortBy(touchPoint.allDistrubNodes, sortLeft);
                var len = orderedPoints.length;
                for(var j = 0;j < len;j++){
                  var rect1 = orderedPoints[j];
                  var newLeft = rect1.right + touchPointSpace;
                  // eslint-disable-next-line webperf/no-multipleDOMLookup
                  var checking = canvasObjUtils._.filter(orderedPoints, checkLeft);
                  if(checking.length > 0){
                    var rect2 = checking[0]; 
                    if(!rect2 || Math.abs(rect1.right - rect2.left) !== touchPointSpace){
                      continue;
                    }
                    var maxHeight = rect1.height > rect2.height ? rect1.height : rect2.height;
                    var minTop = rect1.top > rect2.top ? rect1.top : rect2.top;
                    var heightDiff = Math.abs(rect1.height - rect2.height);
                    var styleObj = {};
                    styleObj.top = minTop + (maxHeight - heightDiff / 2) / 2;
                    styleObj.left = rect1.right;
                    styleObj.height = 1;
                    styleObj.width = touchPointSpace;
                    var guide = self_.createEquSpace(styleObj,self_.hClass,styleObj.width,true);
                    xTouchSpcNodes = xTouchSpcNodes.add(guide);
//                    $(self_.appendGuideTo).append(guide);
                  }
                }
              }
            }
          }
          var drawLinesY = _.chain(self_.yPoints).filter(function(d){return d._type !== "eqlSpace"}).value();//NO I18N
          var equSpaceY = _.chain(self_.yPoints).filter(function(d){return d._type === "eqlSpace"}).value();//NO I18N
          var groupbyY = canvasObjUtils._.groupBy(drawLinesY, function(val){return val.dim});
          var groupbyequY = canvasObjUtils._.groupBy(equSpaceY, function(val){return val.dim});
          var sortTop = function(d){return d.top};
          var checkTop = function(d){return d.top === newTop};
          for (var key in self_.yMarks) {
            var point = self_.yMarks[key];
            var yTouchPoints = groupbyY[point];
            if(key !== "y2"){
              var yTouchSpcPoints = groupbyequY[point];  
            } else {
              var yTouchSpcPoints;
            }
            if(yTouchPoints){
              var styleObj = {};
              yTouchPoints.push(self_.formPositionObjNew(undefined, self_.dragElmRect));
              var minLeft = canvasObjUtils._.min(yTouchPoints, function(d){return d.rect.left});
              var maxLeft = canvasObjUtils._.max(yTouchPoints, function(d){return d.rect.left});
              var xGuidLeft = minLeft.rect.left;
	          	if(minLeft.type === "parent"){ //NO I18N
	          		var xGuidRight = minLeft.rect.left + minLeft.rect.width;
	            } else  {
	            		var xGuidRight = maxLeft.rect.left + maxLeft.rect.width;	
	            }
              
              styleObj.left = xGuidLeft;
              styleObj.width = xGuidRight - xGuidLeft;
              styleObj.top = point - 1;// add for guid adjestment;
              styleObj.height = 1;
              var guide = self_.createGuide(styleObj);
              yTouchNodes = yTouchNodes.add(guide);
//              $(self_.appendGuideTo).append(guide);
            }
            if(yTouchSpcPoints){
              // var checkTop = function(d){return d.top == newTop}; // for Eslint
              var yTouchSpcPointsLength = yTouchSpcPoints.length;
              for(var i = 0;i < yTouchSpcPointsLength;i++){
                var touchPoint = yTouchSpcPoints[i];
                if(touchPoint.side === "bottom" && key === "y3" || touchPoint.side === "top" && key === "y1" || 
                  touchPoint.rect.right < dragElmRect.left || touchPoint.rect.left > dragElmRect.right){
                    continue;
                }
                var touchPointSpace = touchPoint.space;
                // var distrubNodes = touchPoint.allDistrubNodes.concat(dragElmRect);
                var orderedPoints = canvasObjUtils._.sortBy(touchPoint.allDistrubNodes, sortTop);
                var len = orderedPoints.length;
                for(var j = 0;j < len;j++){
                  var rect1 = orderedPoints[j];
                  var newTop = rect1.bottom + touchPointSpace;
                  // eslint-disable-next-line webperf/no-multipleDOMLookup
                  var checking = canvasObjUtils._.filter(orderedPoints, checkTop);
                  if(checking.length > 0){
                    var rect2 = checking[0]; 
                    if(!rect2 || Math.abs(rect1.bottom - rect2.top) !== touchPointSpace){
                      continue;
                    }
                    var maxWidth = rect1.width > rect2.width ? rect1.width : rect2.width;
                    var minLeft = rect1.left > rect2.left ? rect1.left : rect2.left;
                    var widthDiff = Math.abs(rect1.width - rect2.width);
                    var styleObj = {};
                    styleObj.top = rect1.bottom;
                    styleObj.left = minLeft + (maxWidth - widthDiff / 2) / 2;
                    styleObj.height = touchPointSpace; //Math.abs(rect2.top - rect1.bottom);
                    // styleObj.height = rect2.top - rect1.bottom;
                    styleObj.width = 1;
                    var guide = self_.createEquSpace(styleObj, self_.vClass, styleObj.height, true);
                    yTouchSpcNodes = yTouchSpcNodes.add(guide);
//                    $(self_.appendGuideTo).append(guide);
                  }
                }
              }
            }
          }
          appendContainer.append(xTouchNodes,xTouchSpcNodes,yTouchNodes,yTouchSpcNodes);
      }

      this.createEquSpace = function(style, addclass, value, zcGuideClass){
        var createDiv = $("<div />").addClass(addclass).css({
          position: "fixed",//NO I18N
          width: style.width,
          height: style.height,
          left: style.left,
          top: style.top,
          backgroundColor: "#e12424"//NO I18N
        }).append("<div class='zcguideNote'></div>");
        if(zcGuideClass){
        		createDiv.addClass("zcguide " + addclass + "");
        }
        $(createDiv).find(".zcguideNote").html(value);//NO I18N
//        var noteTop = (value/2) - 7;
//        if(addclass == self_.hClass){
//          $(createDiv).find(".zcguideNote").css({left: noteTop});
//        } else {
//          $(createDiv).find(".zcguideNote").css({top: noteTop});
//        }
        
        return createDiv;
      }
      this.createGuide = function(style){
        var createDiv = $("<div />").addClass("zcguide").css({
          position: "fixed",//NO I18N
          width: style.width,
          height: style.height,
          left: style.left,
          top: style.top,
          backgroundColor: "#e12424"//NO I18N
        });
        return createDiv;
      }
      this.defineElementPositions = function(){
          var nodes = $('#container').children().not('.ui-draggable-dragging');
          self_.clear();
          self_.allElements = nodes;
          self_.reinit(nodes);
      }
      this.getRect = function (element, type, nodeDim) {
          var elm = $(element);
          var elmPosi = elm.offset();
          if(nodeDim){
        	  	 var elmOuterWidth = Math.round(nodeDim.w);
             var elmOuterHeight = Math.round(nodeDim.h);
          } else {
        	  	 var elmOuterWidth = Math.round(elm.outerWidth());
        	  	 var elmOuterHeight = Math.round(elm.outerHeight());
          }
//          var outlineWidth = 1; //parseInt($(self_.dragElement).css("outline-width"));
          if(nodeDim){
	        	  var left = nodeDim.left,
	              $top = nodeDim.top,
	              width = nodeDim.w,
	              height = nodeDim.h;
          } else if(type === "parent"){
	        	  var left = 0,
	              $top = 0,
	              width = elmOuterWidth,
	              height = elmOuterHeight;
          } else {
		    	  var left = elmPosi.left,
		    	  	  $top = elmPosi.top,
		          width = elmOuterWidth,
		          height = elmOuterHeight;
          }
          
          return {
              left: left,
              right: left + width,
              top: $top,
              bottom: $top + height,
              width: width,
              height: height
          };
      };
      this.init(options)
      // this.reinit($('#container').children().not('.ui-draggable-dragging'));
  }

  window.canvasGuide = canvasGuide;
})();;(function ($) {
    // var oldMouseStart = $.ui.draggable.prototype._mouseStart;
    // $.ui.draggable.prototype._mouseStart = function (event, overrideHandle, noActivation) {
    //     this._trigger("beforeStart", event, this._uiHash());
    //     this._trigger("prepare", event, this._uiHash());
    //     oldMouseStart.apply(this, [event, overrideHandle, noActivation]);
    // };
	var zcGuide,editorContainerOffset,container,containerOffsetLeft,containerOffsetTop;
    // var defaultGuideClass = 'zcanvas-guide';
    $.ui.plugin.add('draggable', 'zcGuide', {//NO I18N
        // prepare: function(evt,ui) {
              
        // },
    start: function (evt, ui) {
            var $this = $(this),
                inst = $this.data('ui-draggable'),//NO I18N
                settings = inst.options;
            	editorContainerOffset = $("#zcanvas-editor-outer").offset();
            	container = $(ui.helper).parent();
            	containerOffsetLeft = container.offset().left;
                containerOffsetTop = container.offset().top;
            if (settings.zcGuide) {
                zcGuide = new canvasGuide({
                    tolerance: settings.snapTolerance,
                    appendGuideTo: inst.options.appendGuideTo,
                    selector: settings.zcGuideSelector,
                    dragElement: $this,
                    // eslint-disable-next-line webperf/no-global-variables
                    dragElementParent: $this.parent()
                });
            } 
        },
        drag: function (evt, ui) {
            var $this = $(this);
            var inst = $this.data('ui-draggable'); // NO I18N
            if (inst.options.zcGuide && editorContainerOffset.left < ui.offset.left && editorContainerOffset.top < ui.offset.top){
                // var options = {
                //     selector: "$('#container').children().not('.ui-draggable-dragging')"
                // };
            	if(ui.helper.hasClass("zcOvertable") || inst.activated){
            		return;
            	}
            	var addGuidePosi = zcGuide ? zcGuide.addGuides(evt, ui) : null;
//                var container = inst.options.outerContainment || "body";//NO I18N
//                var container = $(ui.helper).parent();
                if(addGuidePosi){
                    // var outlineWidth = parseInt($this.css("outline-width"));//NO I18N
                    if(!jQuery.isEmptyObject(addGuidePosi.x)){
//                        var node = addGuidePosi.x;
//                        var containerOffsetLeft = $(container).offset().left;
                    	ui.position.left = addGuidePosi.x.left - containerOffsetLeft;
//                    	if(node.pos == "left"){
//                          ui.position.left = addGuidePosi.x.left;// + outlineWidth;
//                        } else {
//                          ui.position.left = addGuidePosi.x.left;
//                        }
                    }
                    if(!jQuery.isEmptyObject(addGuidePosi.y)){
//                        var node = addGuidePosi.y;
                     // eslint-disable-next-line webperf/layout-thrashing
//                        var containerOffsetTop = $(container).offset().top;
                     // eslint-disable-next-line webperf/layout-thrashing
                 		ui.position.top = addGuidePosi.y.top - containerOffsetTop;
//                      if(node.pos == "top"){
//                        ui.position.top = addGuidePosi.y.top;// + outlineWidth;
//                      } else {
//                        ui.position.top = addGuidePosi.y.top;
//                      }
                    }
                }
            }
        },
        stop: function () {
        	zcGuide && zcGuide.clear();
            zcGuide = null;
        }
    });
})(jQuery);;(function ($) { // eslint-disable-line zstandard/no-global-function-call
    // var oldMouseStart = $.ui.draggable.prototype._mouseStart;
    // $.ui.draggable.prototype._mouseStart = function (event, overrideHandle, noActivation) {
    //     this._trigger("beforeStart", event, this._uiHash());
    //     this._trigger("prepare", event, this._uiHash());
    //     oldMouseStart.apply(this, [event, overrideHandle, noActivation]);
    // };
    var zcGuide;
    // var defaultGuideClass = 'zcanvas-guide';
    $.ui.plugin.add('resizable', 'zcGuide', {//NO I18N
        // prepare: function(evt,ui) {
              
        // },
    start: function () {
            var $this = $(this),
                inst = $this.data('ui-resizable'),//NO I18N
                settings = inst.options;
                
                
            if (settings.zcGuide) {
                zcGuide = new canvasGuide({
                    tolerance: settings.snapTolerance,
                    appendGuideTo: inst.options.appendGuideTo,
                    selector: settings.zcGuideSelector,
                    dragElement: $this,
                    // eslint-disable-next-line webperf/no-global-variables
                    dragElementParent: $this.parent(),
                    resize: true,
                    noDragElement: true
                });
            } 
        },
        resize: function (evt, ui) {
            
            var $uihelper = $(ui.helper);
            var $uioutwidth = $uihelper.outerWidth();
            var $uioutheight = $uihelper.outerHeight();
            var $uiwidth = $uihelper.width();
            var $uiheight = $uihelper.outerHeight();
            var $this = $(this);
            var inst = $this.data('ui-resizable'); // NO I18N
            ui.extraSpace = {};
            ui.extraSpace.width = $uioutwidth - $uiwidth;
            ui.extraSpace.height = $uioutheight - $uiheight;
            
            var container = $(ui.element).parent();
         // eslint-disable-next-line webperf/layout-thrashing
            var parentElmOffset = container.offset();
            ui.offset = {};
         // eslint-disable-next-line webperf/layout-thrashing
            ui.offset.left = parentElmOffset.left + ui.position.left;
         // eslint-disable-next-line webperf/layout-thrashing
            ui.offset.top = parentElmOffset.top + ui.position.top;
            
            if (inst.options.zcGuide){
  //        	  var container = inst.options.outerContainment || "body";//NO I18N
                var addGuidePosi = zcGuide.addResizeGuides(evt, ui);
                if(addGuidePosi){
                   // var outlineWidth = parseInt($this.css("outline-width"));//NO I18N
                  // eslint-disable-next-line webperf/layout-thrashing
                    var containerOffset = container.offset();
  //            	  var parentElmOffset = parentElm.offset();
                    var elmOffset = {};
                 // eslint-disable-next-line webperf/layout-thrashing
                    elmOffset.left = containerOffset.left + ui.position.left;
                 // eslint-disable-next-line webperf/layout-thrashing
                    elmOffset.top = containerOffset.top + ui.position.top;
                    
                    if(!jQuery.isEmptyObject(addGuidePosi.x)){
                        var node = addGuidePosi.x;
                     // eslint-disable-next-line webperf/layout-thrashing
  //                     var elmOffset = ui.element.offset();
                     // eslint-disable-next-line webperf/layout-thrashing
                       var containerOffsetLeft = container.offset().left;
                       
                       if(node.pos === "left"){
                          ui.position.left = addGuidePosi.x.left - containerOffsetLeft;
                          // eslint-disable-next-line webperf/layout-thrashing
                          var diff = Math.abs(node.left - elmOffset.left);
                          // eslint-disable-next-line webperf/layout-thrashing
                          if(elmOffset.left < node.left){
                            ui.size.width = ui.size.width - diff;  
                            // eslint-disable-next-line webperf/layout-thrashing
  //                          ui.position.left = ui.position.left + diff;
                          } else {
                            ui.size.width = ui.size.width + diff;
                            // eslint-disable-next-line webperf/layout-thrashing
  //                          ui.position.left = ui.position.left - diff;
                          }
                          
                        } else if(node.pos === "right") {
                          // eslint-disable-next-line webperf/layout-thrashing
                          var right = elmOffset.left + ui.size.width;
                          // eslint-disable-next-line webperf/layout-thrashing
                          var diff = Math.abs(node.right - right);
                          // eslint-disable-next-line webperf/layout-thrashing
                          if(right < node.right){
                            // eslint-disable-next-line webperf/layout-thrashing
                            ui.size.width = ui.size.width + diff;  
                          } else {
                            // eslint-disable-next-line webperf/layout-thrashing
                            ui.size.width = ui.size.width - diff;
                          }
                        }
                    }
                    if(!jQuery.isEmptyObject(addGuidePosi.y)){
                        var node = addGuidePosi.y;
                        // eslint-disable-next-line webperf/layout-thrashing
  //                     var elmOffset = ui.element.offset();
                     // eslint-disable-next-line webperf/layout-thrashing
                       var containerOffsetTop = container.offset().top;
                       if(node.pos === "top") {
                           ui.position.top = addGuidePosi.y.top - containerOffsetTop;
                          // eslint-disable-next-line webperf/layout-thrashing
                          var diff = Math.abs(node.top - elmOffset.top);
                          // eslint-disable-next-line webperf/layout-thrashing
                          if(elmOffset.top < node.top){
                            // eslint-disable-next-line webperf/layout-thrashing
                            ui.size.height = ui.size.height - diff;  
                            // eslint-disable-next-line webperf/layout-thrashing
  //                          ui.position.top = ui.position.top + diff;
                          } else {
                            ui.size.height = ui.size.height + diff;
                            // eslint-disable-next-line webperf/layout-thrashing
  //                          ui.position.top = ui.position.top - diff;
                          }
                        } else {
                          // eslint-disable-next-line webperf/layout-thrashing
                          var bottom = elmOffset.top + ui.size.height;
                          // eslint-disable-next-line webperf/layout-thrashing
                          var diff = Math.abs(node.bottom - bottom);
                          // eslint-disable-next-line webperf/layout-thrashing
                          if(bottom < node.bottom){
                            // eslint-disable-next-line webperf/layout-thrashing
                            ui.size.height = ui.size.height + diff;  
                          } else {
                            // eslint-disable-next-line webperf/layout-thrashing
                            ui.size.height = ui.size.height - diff;
                          }
                        }
                    }  
                }
            }
  
        },
        stop: function () {
        	zcGuide && zcGuide.clear();
        }
    });
  })(jQuery);
